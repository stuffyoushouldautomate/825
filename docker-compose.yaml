version: '3.8'

services:
  # Main application
  app:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - '3000:3000'
    environment:
      - NODE_ENV=production
      - PORT=3000
      - HOSTNAME=0.0.0.0
    env_file:
      - .env.local
    depends_on:
      - redis
    restart: unless-stopped
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:3000/api/health']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - bulldozer-network

  # Redis for chat history and caching
  redis:
    image: redis:7-alpine
    ports:
      - '6379:6379'
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    restart: unless-stopped
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - bulldozer-network

  # Optional: SearXNG for alternative search
  searxng:
    image: searxng/searxng:latest
    ports:
      - '8080:8080'
    environment:
      - SEARXNG_BASE_URL=http://localhost:8080
      - SEARXNG_SECRET=your_secret_key_here
    volumes:
      - searxng_data:/data
    restart: unless-stopped
    profiles:
      - search
    networks:
      - bulldozer-network

  # Optional: PostgreSQL for Supabase local development
  postgres:
    image: postgres:15-alpine
    ports:
      - '5432:5432'
    environment:
      - POSTGRES_DB=bulldozer
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./supabase/migrations:/docker-entrypoint-initdb.d
    restart: unless-stopped
    profiles:
      - auth
    networks:
      - bulldozer-network

  # Optional: Supabase local development
  supabase:
    image: supabase/supabase-dev:latest
    ports:
      - '54321:54321'
      - '54322:54322'
    environment:
      - POSTGRES_PASSWORD=password
      - JWT_SECRET=your_jwt_secret_here
      - ANON_KEY=your_anon_key_here
      - SERVICE_ROLE_KEY=your_service_role_key_here
    volumes:
      - supabase_data:/var/lib/postgresql/data
    restart: unless-stopped
    profiles:
      - auth
    networks:
      - bulldozer-network

  # Nginx reverse proxy (optional)
  nginx:
    image: nginx:alpine
    ports:
      - '80:80'
      - '443:443'
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - app
    restart: unless-stopped
    profiles:
      - proxy
    networks:
      - bulldozer-network

volumes:
  redis_data:
    driver: local
  searxng_data:
    driver: local
  postgres_data:
    driver: local
  supabase_data:
    driver: local

networks:
  bulldozer-network:
    driver: bridge
