`This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

</file_summary>

<directory_structure>
public/
  placeholder.svg
  robots.txt
reports/
  jul-2-local-825-report.html
scripts/
  backfill-posts.js
  package.json
  README.md
src/
  components/
    analytics/
      AnalyticsOverview.tsx
      FeedSyncStatus.tsx
    chat/
      ChatContent.tsx
      ChatHeader.tsx
      ChatInput.tsx
      MarkdownRenderer.tsx
      MessageList.tsx
      presetOptions.tsx
      types.ts
    company-profile/
      CorporateStructureSection.tsx
      ExecutiveSummarySection.tsx
      FinancialProfileSection.tsx
      LaborRelationsSection.tsx
      LeadershipSection.tsx
      OrganizingStrategySection.tsx
      SafetyComplianceSection.tsx
      WorkforceAnalysisSection.tsx
    feed/
      ArticleCard.tsx
      ArticlesList.tsx
      FeedHeader.tsx
      FilterSection.tsx
      HighPriorityNews.tsx
      LoadingState.tsx
      NewsSourcesList.tsx
    onboarding/
      GoalsStep.tsx
      IndustryStep.tsx
      OrganizationSizeStep.tsx
      PriorityStep.tsx
      RoleStep.tsx
    reports/
      ReportTemplate.tsx
    ui/
      accordion.tsx
      alert-dialog.tsx
      alert.tsx
      aspect-ratio.tsx
      avatar.tsx
      badge.tsx
      breadcrumb.tsx
      button.tsx
      calendar.tsx
      card.tsx
      carousel.tsx
      chart.tsx
      checkbox.tsx
      collapsible.tsx
      command.tsx
      context-menu.tsx
      dialog.tsx
      drawer.tsx
      dropdown-menu.tsx
      form.tsx
      hover-card.tsx
      input-otp.tsx
      input.tsx
      label.tsx
      menubar.tsx
      navigation-menu.tsx
      pagination.tsx
      popover.tsx
      progress.tsx
      radio-group.tsx
      resizable.tsx
      scroll-area.tsx
      select.tsx
      separator.tsx
      sheet.tsx
      sidebar.tsx
      skeleton.tsx
      slider.tsx
      sonner.tsx
      switch.tsx
      table.tsx
      tabs.tsx
      textarea.tsx
      toast.tsx
      toaster.tsx
      toggle-group.tsx
      toggle.tsx
      tooltip.tsx
      use-toast.ts
    AdminAuth.tsx
    AdminPanel.tsx
    BenefitCard.tsx
    BulldozerFeeds.tsx
    ChatAssistant.tsx
    CommandBar.tsx
    CompanyMetrics.tsx
    CompanyRequestForm.tsx
    CompanySelector.tsx
    CustomCompanyForm.tsx
    DatabaseCheck.tsx
    DataPointChart.tsx
    DataPointsTabs.tsx
    EdgarTestComponent.tsx
    FadingBenefits.tsx
    ImportResearchModal.tsx
    MaintenancePage.tsx
    MaintenanceToggle.tsx
    MaintenanceWrapper.tsx
    NavBar.tsx
    ProtectedRoute.tsx
    RootRedirect.tsx
    SyncButton.tsx
    SystemInfo.tsx
    TaskManagement.tsx
    ThemeToggle.tsx
    WebhookManagement.tsx
  contexts/
    AuthContext.tsx
  hooks/
    use-mobile.tsx
    use-toast.ts
    useAdminStatus.ts
    useBulldozerSync.ts
    useCompanyProfile.ts
    useCompanyRequests.ts
    useCompanyResearch.ts
    useCompanySync.ts
    useDailyAnalytics.ts
    useEdgarInsights.ts
    useFeedData.ts
    useJobsScraper.ts
    useMainCompanies.ts
    useMaintenanceTasks.ts
    useNewsSourceCompanies.ts
    useNewsSources.ts
    useRSSSync.ts
    useTheme.tsx
    useTrackedCompanies.ts
  integrations/
    supabase/
      client.ts
      types.ts
    edgarMcp.ts
  lib/
    benefits.ts
    supabase-storage.ts
    utils.ts
  pages/
    Admin.tsx
    ArticleDetail.tsx
    Auth.tsx
    Chat.tsx
    CompaniesTracking.tsx
    CompanyAnalysis.tsx
    CompanyProfile.tsx
    CompanyReports.tsx
    CompanyResearchDetail.tsx
    DailyJobsReport.tsx
    Dashboard.tsx
    DataPoints.tsx
    Feed.tsx
    Index.tsx
    JobDetail.tsx
    Local825Signup.tsx
    NewsSourcesManagement.tsx
    NotFound.tsx
    Onboarding.tsx
    Profile.tsx
    Reports.tsx
    Settings.tsx
    ShareableProfile.tsx
    TeamInvites.tsx
    UserGuide.tsx
  types/
    index.ts
  utils/
    feedFilters.ts
    triggerSync.ts
  App.css
  App.tsx
  index.css
  main.tsx
  vite-env.d.ts
supabase/
  .temp/
    cli-latest
    gotrue-version
    pooler-url
    postgres-version
    project-ref
    rest-version
    storage-version
  functions/
    analyze-article/
      index.ts
    company-research/
      index.ts
    delete-historical-report/
      index.ts
    enhance-job-analysis/
      index.ts
    format-job-description/
      index.ts
    generate-daily-analytics/
      index.ts
    generate-historical-report/
      index.ts
    import-company-research/
      index.ts
    scrape-jobs/
      index.ts
    send-company-request-webhook/
      index.ts
    send-signup-webhook/
      index.ts
    send-webhook-notification/
      index.ts
    setup-analytics-cron/
      index.ts
    sync-rss-feeds/
      index.ts
    update-content-categories/
      index.ts
  migrations/
    20240712000000_add_page_maintenance.sql
    20250101000000_add_job_analysis_fields.sql
    20250102000000_add_company_research_table.sql
    20250619170248_e27d9c53-c590-4d6c-9a04-85df8d6893d8.sql
    20250620131829_be976ca6-01e3-477f-9364-2b692b8c8748.sql
    20250620230544_847cf19f-fbc6-4e22-a190-72597575b1e4.sql
    20250623213335_ed75b52c-0221-45cf-86cb-a0f407ba4b10.sql
    20250623214030_df2b510a-7911-4022-9167-3cae66075a64.sql
    20250623222059_ae19eb7c-7390-4018-a5ee-595d1cb39837.sql
    20250623222927_c1113db2-8cd8-47cd-99e1-4db88172e31e.sql
    20250623225252_9b842fe3-80df-491c-8dd5-6fbb65de99ea.sql
    20250624234721_78ad8c1c-bb59-49a3-aadf-c0d3753d42c7.sql
    20250625000001_update_company_feeds.sql
    20250625182744_92ac1f90-bfdc-4e89-b01b-7992ed964976.sql
    20250626153207_d8255edb-078c-418d-98f2-b3cf54c733aa.sql
    20250626204107_b588787b-9799-4abb-b107-c7c6d3999171.sql
    20250626205615_abec3d2a-fb28-447c-bb19-874c161a661c.sql
    20250626210730_b766ab7d-387e-4fe5-a652-7facaaae62a8.sql
    20250626214551_86a4abbc-0a9d-4cb4-a6a0-f72412da1edf.sql
    20250626223442_add_wordpress_category_to_news_articles.sql
    20250701000000_add_content_type_to_news_articles.sql
    20250709221513-519be282-5baf-43c3-a41e-cab954f05445.sql
    20250710131813-438279e8-ddc6-4c96-9436-8943ed602c3b.sql
    20250710142420-dc86821b-6415-43be-83a6-7b8c33df08e2.sql
    20250710145815-e5a71458-d19d-4b10-b806-5c36bc5a18dc.sql
    20250710154446-319a94d6-4edb-48b6-bb5c-2d34bcfb60e3.sql
    20250710154814-255584c2-08ee-4735-9068-03421e421fd0.sql
    20250710154833-3f7e1d5d-bada-4ddb-86a4-6ec1358d0fc8.sql
    20250710171044-f005f596-e3a6-40ef-b2df-9699d5c37427.sql
    20250710184900-7aaaa97f-a798-4003-bb94-f68193355ef0.sql
    20250710192024-7425c218-ca28-482b-919e-c76b5f4594be.sql
    20250710235221-56029d59-0016-4805-a980-1294307e506e.sql
    20250711040534-44d63ca2-fa75-4d72-912a-891d5b58fe7c.sql
    20250711055110-c6fc516d-cec1-4a70-b159-f4898ba8aeed.sql
    20250711145849-d9965894-4b04-430d-bb9f-f5cd397e3bb6.sql
    20250711165231-78ce11bd-034e-4b5d-bffc-ff625d08a41f.sql
    20250712000000_update_rss_feeds_for_more_posts.sql
  config.toml
.gitignore
AI_ANALYSIS_FIXES.md
components.json
eslint.config.js
FEED_FIXES.md
index.html
package.json
postcss.config.js
README.md
tailwind.config.ts
tsconfig.app.json
tsconfig.json
tsconfig.node.json
vite.config.ts
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="public/placeholder.svg">
<svg xmlns="http://www.w3.org/2000/svg" width="1200" height="1200" fill="none"><rect width="1200" height="1200" fill="#EAEAEA" rx="3"/><g opacity=".5"><g opacity=".5"><path fill="#FAFAFA" d="M600.709 736.5c-75.454 0-136.621-61.167-136.621-136.62 0-75.454 61.167-136.621 136.621-136.621 75.453 0 136.62 61.167 136.62 136.621 0 75.453-61.167 136.62-136.62 136.62Z"/><path stroke="#C9C9C9" stroke-width="2.418" d="M600.709 736.5c-75.454 0-136.621-61.167-136.621-136.62 0-75.454 61.167-136.621 136.621-136.621 75.453 0 136.62 61.167 136.62 136.621 0 75.453-61.167 136.62-136.62 136.62Z"/></g><path stroke="url(#a)" stroke-width="2.418" d="M0-1.209h553.581" transform="scale(1 -1) rotate(45 1163.11 91.165)"/><path stroke="url(#b)" stroke-width="2.418" d="M404.846 598.671h391.726"/><path stroke="url(#c)" stroke-width="2.418" d="M599.5 795.742V404.017"/><path stroke="url(#d)" stroke-width="2.418" d="m795.717 796.597-391.441-391.44"/><path fill="#fff" d="M600.709 656.704c-31.384 0-56.825-25.441-56.825-56.824 0-31.384 25.441-56.825 56.825-56.825 31.383 0 56.824 25.441 56.824 56.825 0 31.383-25.441 56.824-56.824 56.824Z"/><g clip-path="url(#e)"><path fill="#666" fill-rule="evenodd" d="M616.426 586.58h-31.434v16.176l3.553-3.554.531-.531h9.068l.074-.074 8.463-8.463h2.565l7.18 7.181V586.58Zm-15.715 14.654 3.698 3.699 1.283 1.282-2.565 2.565-1.282-1.283-5.2-5.199h-6.066l-5.514 5.514-.073.073v2.876a2.418 2.418 0 0 0 2.418 2.418h26.598a2.418 2.418 0 0 0 2.418-2.418v-8.317l-8.463-8.463-7.181 7.181-.071.072Zm-19.347 5.442v4.085a6.045 6.045 0 0 0 6.046 6.045h26.598a6.044 6.044 0 0 0 6.045-6.045v-7.108l1.356-1.355-1.282-1.283-.074-.073v-17.989h-38.689v23.43l-.146.146.146.147Z" clip-rule="evenodd"/></g><path stroke="#C9C9C9" stroke-width="2.418" d="M600.709 656.704c-31.384 0-56.825-25.441-56.825-56.824 0-31.384 25.441-56.825 56.825-56.825 31.383 0 56.824 25.441 56.824 56.825 0 31.383-25.441 56.824-56.824 56.824Z"/></g><defs><linearGradient id="a" x1="554.061" x2="-.48" y1=".083" y2=".087" gradientUnits="userSpaceOnUse"><stop stop-color="#C9C9C9" stop-opacity="0"/><stop offset=".208" stop-color="#C9C9C9"/><stop offset=".792" stop-color="#C9C9C9"/><stop offset="1" stop-color="#C9C9C9" stop-opacity="0"/></linearGradient><linearGradient id="b" x1="796.912" x2="404.507" y1="599.963" y2="599.965" gradientUnits="userSpaceOnUse"><stop stop-color="#C9C9C9" stop-opacity="0"/><stop offset=".208" stop-color="#C9C9C9"/><stop offset=".792" stop-color="#C9C9C9"/><stop offset="1" stop-color="#C9C9C9" stop-opacity="0"/></linearGradient><linearGradient id="c" x1="600.792" x2="600.794" y1="403.677" y2="796.082" gradientUnits="userSpaceOnUse"><stop stop-color="#C9C9C9" stop-opacity="0"/><stop offset=".208" stop-color="#C9C9C9"/><stop offset=".792" stop-color="#C9C9C9"/><stop offset="1" stop-color="#C9C9C9" stop-opacity="0"/></linearGradient><linearGradient id="d" x1="404.85" x2="796.972" y1="403.903" y2="796.02" gradientUnits="userSpaceOnUse"><stop stop-color="#C9C9C9" stop-opacity="0"/><stop offset=".208" stop-color="#C9C9C9"/><stop offset=".792" stop-color="#C9C9C9"/><stop offset="1" stop-color="#C9C9C9" stop-opacity="0"/></linearGradient><clipPath id="e"><path fill="#fff" d="M581.364 580.535h38.689v38.689h-38.689z"/></clipPath></defs></svg>
</file>

<file path="public/robots.txt">
User-agent: Googlebot
Allow: /

User-agent: Bingbot
Allow: /

User-agent: Twitterbot
Allow: /

User-agent: facebookexternalhit
Allow: /

User-agent: *
Allow: /
</file>

<file path="reports/jul-2-local-825-report.html">
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Company Intelligence Report - July 1, 2025</title>
  <style>
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }

    body {
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
      line-height: 1.6;
      color: #333;
      background-color: #f8f9fa;
    }

    .container {
      max-width: 1200px;
      margin: 0 auto;
      padding: 20px;
    }

    .header {
      background: linear-gradient(135deg, #1e3c72 0%, #2a5298 100%);
      color: white;
      padding: 40px 0;
      text-align: center;
      margin-bottom: 30px;
      border-radius: 10px;
      box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
    }

    .header h1 {
      font-size: 2.5em;
      margin-bottom: 10px;
      font-weight: 300;
    }

    .header .subtitle {
      font-size: 1.2em;
      opacity: 0.9;
      font-weight: 300;
    }

    .header .date {
      font-size: 1em;
      margin-top: 10px;
      opacity: 0.8;
    }

    .executive-summary {
      background: white;
      padding: 30px;
      border-radius: 10px;
      box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
      margin-bottom: 30px;
      border-left: 5px solid #1e3c72;
    }

    .executive-summary h2 {
      color: #1e3c72;
      margin-bottom: 20px;
      font-size: 1.8em;
    }

    .priority-section {
      margin-bottom: 40px;
    }

    .priority-high {
      border-left: 5px solid #dc3545;
    }

    .priority-medium {
      border-left: 5px solid #ffc107;
    }

    .priority-low {
      border-left: 5px solid #28a745;
    }

    .company-card {
      background: white;
      border-radius: 10px;
      padding: 25px;
      margin-bottom: 20px;
      box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
      transition: transform 0.3s ease, box-shadow 0.3s ease;
    }

    .company-card:hover {
      transform: translateY(-2px);
      box-shadow: 0 4px 20px rgba(0, 0, 0, 0.15);
    }

    .company-name {
      font-size: 1.4em;
      font-weight: 600;
      color: #1e3c72;
      margin-bottom: 10px;
    }

    .priority-badge {
      display: inline-block;
      padding: 4px 12px;
      border-radius: 20px;
      font-size: 0.8em;
      font-weight: 600;
      text-transform: uppercase;
      margin-bottom: 15px;
    }

    .badge-critical {
      background-color: #dc3545;
      color: white;
    }

    .badge-high {
      background-color: #fd7e14;
      color: white;
    }

    .badge-medium {
      background-color: #ffc107;
      color: #333;
    }

    .badge-low {
      background-color: #28a745;
      color: white;
    }

    .key-info {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
      gap: 15px;
      margin-bottom: 20px;
    }

    .info-item {
      background: #f8f9fa;
      padding: 15px;
      border-radius: 8px;
      border-left: 3px solid #1e3c72;
    }

    .info-label {
      font-weight: 600;
      color: #1e3c72;
      font-size: 0.9em;
      margin-bottom: 5px;
    }

    .info-value {
      color: #333;
      font-size: 0.95em;
    }

    .source-links {
      margin-top: 20px;
      padding-top: 15px;
      border-top: 1px solid #e9ecef;
    }

    .source-links h4 {
      color: #1e3c72;
      margin-bottom: 10px;
      font-size: 1em;
    }

    .source-link {
      display: inline-block;
      background: #e3f2fd;
      color: #1565c0;
      padding: 5px 12px;
      margin: 3px;
      border-radius: 15px;
      text-decoration: none;
      font-size: 0.85em;
      transition: background-color 0.3s ease;
    }

    .source-link:hover {
      background: #bbdefb;
      text-decoration: none;
    }

    .henjii-section {
      background: linear-gradient(135deg, #ff6b6b 0%, #ee5a24 100%);
      color: white;
      padding: 30px;
      border-radius: 10px;
      margin-bottom: 30px;
      box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
    }

    .henjii-section h2 {
      margin-bottom: 20px;
      font-size: 1.8em;
    }

    .henjii-insight {
      background: rgba(255, 255, 255, 0.1);
      padding: 20px;
      border-radius: 8px;
      margin-bottom: 15px;
      backdrop-filter: blur(10px);
    }

    .trends-section {
      background: white;
      padding: 30px;
      border-radius: 10px;
      box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
      margin-bottom: 30px;
    }

    .trends-grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
      gap: 20px;
      margin-top: 20px;
    }

    .trend-item {
      background: #f8f9fa;
      padding: 20px;
      border-radius: 8px;
      border-left: 4px solid #28a745;
    }

    .recommendations {
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      color: white;
      padding: 30px;
      border-radius: 10px;
      margin-bottom: 30px;
    }

    .recommendations h2 {
      margin-bottom: 20px;
    }

    .rec-timeline {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
      gap: 20px;
      margin-top: 20px;
    }

    .rec-item {
      background: rgba(255, 255, 255, 0.1);
      padding: 20px;
      border-radius: 8px;
      backdrop-filter: blur(10px);
    }

    .citations {
      background: white;
      padding: 30px;
      border-radius: 10px;
      box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
      margin-bottom: 30px;
    }

    .citations h2 {
      color: #1e3c72;
      margin-bottom: 20px;
    }

    .citation-category {
      margin-bottom: 25px;
    }

    .citation-category h3 {
      color: #495057;
      margin-bottom: 10px;
      font-size: 1.1em;
    }

    .citation-list {
      list-style: none;
      padding-left: 0;
    }

    .citation-list li {
      margin-bottom: 8px;
      padding-left: 20px;
      position: relative;
    }

    .citation-list li:before {
      content: "→";
      position: absolute;
      left: 0;
      color: #1e3c72;
      font-weight: bold;
    }

    .citation-list a {
      color: #1565c0;
      text-decoration: none;
    }

    .citation-list a:hover {
      text-decoration: underline;
    }

    .footer {
      text-align: center;
      padding: 20px;
      color: #6c757d;
      font-size: 0.9em;
    }

    @media (max-width: 768px) {
      .container {
        padding: 10px;
      }

      .header h1 {
        font-size: 2em;
      }

      .key-info {
        grid-template-columns: 1fr;
      }
    }

    .highlight {
      background: linear-gradient(120deg, #a8edea 0%, #fed6e3 100%);
      padding: 2px 6px;
      border-radius: 3px;
    }

    .metric {
      font-size: 1.2em;
      font-weight: 600;
      color: #1e3c72;
    }
  </style>
</head>

<body>
  <div class="container">
    <div class="header">
      <h1>Company Intelligence Report</h1>
      <div class="subtitle">Labor Union Organizing Opportunities Analysis</div>
      <div class="date">July 1, 2025 | IUOE Local 825 Strategic Intelligence</div>
    </div>

    <div class="executive-summary">
      <h2>🎯 Executive Summary</h2>
      <p>This comprehensive intelligence report analyzes <span class="highlight">40+ companies</span> across construction, infrastructure, and related sectors, incorporating data from multiple authoritative sources including industry publications, government records, and specialized labor intelligence platforms. The analysis identifies <span class="metric">3 critical priority targets</span> requiring immediate organizing action, <span class="metric">$1.2+ billion</span> in active project opportunities, and strategic recommendations for maximizing labor union engagement effectiveness.</p>

      <div class="key-info" style="margin-top: 20px;">
        <div class="info-item">
          <div class="info-label">Research Period</div>
          <div class="info-value">June 25 - July 2, 2025</div>
        </div>
        <div class="info-item">
          <div class="info-label">Companies Analyzed</div>
          <div class="info-value">40+ Construction & Infrastructure</div>
        </div>
        <div class="info-item">
          <div class="info-label">Sources Consulted</div>
          <div class="info-value">15+ Industry & Government</div>
        </div>
        <div class="info-item">
          <div class="info-label">Priority Targets</div>
          <div class="info-value">3 Critical, 5 High Priority</div>
        </div>
      </div>
    </div>

    <div class="priority-section priority-high">
      <h2 style="color: #dc3545; margin-bottom: 25px;">🚨 CRITICAL PRIORITY TARGETS</h2>

      <div class="company-card">
        <div class="company-name">Azuria Water Solutions</div>
        <div class="priority-badge badge-critical">IMMEDIATE ACTION REQUIRED</div>

        <div class="key-info">
          <div class="info-item">
            <div class="info-label">Organizing Window</div>
            <div class="info-value">Post-acquisition integration period</div>
          </div>
          <div class="info-item">
            <div class="info-label">Key Development</div>
            <div class="info-value">Acquired BLD Services (nation's largest CIPP lateral liner installer)</div>
          </div>
          <div class="info-item">
            <div class="info-label">Workforce Impact</div>
            <div class="info-value">Multi-state operations (LA, TN, Central/Eastern U.S.)</div>
          </div>
          <div class="info-item">
            <div class="info-label">Strategic Value</div>
            <div class="info-value">Major infrastructure rehabilitation provider with government contracts</div>
          </div>
        </div>

        <p><strong>Intelligence Summary:</strong> Azuria Water Solutions completed a major acquisition of BLD Services, LLC, creating significant workforce integration opportunities. BLD operates manufacturing facilities in Nashville, Tennessee, and maintains contracts with government purchasing cooperatives. The post-acquisition period represents an optimal organizing window as workers navigate new management structures and benefit arrangements.</p>

        <div class="source-links">
          <h4>📋 Source Citations:</h4>
          <a href="https://undergroundinfrastructure.com/news/2025/june/azuria-water-solutions-acquires-bld-services-to-expand-pipeline-rehab-capabilities" class="source-link" target="_blank">Underground Construction - Acquisition Details</a>
          <a href="https://www.cahill.com/news/firm-news" class="source-link" target="_blank">Cahill Gordon - Financing Arrangements</a>
        </div>
      </div>

      <div class="company-card">
        <div class="company-name">Level 10 Development</div>
        <div class="priority-badge badge-critical">HIGH PRIORITY</div>

        <div class="key-info">
          <div class="info-item">
            <div class="info-label">Organizing Window</div>
            <div class="info-value">Multi-year construction timeline (through 2028)</div>
          </div>
          <div class="info-item">
            <div class="info-label">Project Scale</div>
            <div class="info-value">Cipriani Residences Miami - three towers (50, 60, 80 stories)</div>
          </div>
          <div class="info-item">
            <div class="info-label">Total Space</div>
            <div class="info-value">2.72 million square feet across 2.74 acres</div>
          </div>
          <div class="info-item">
            <div class="info-label">Workforce Requirements</div>
            <div class="info-value">Massive, sustained employment through 2028</div>
          </div>
        </div>

        <p><strong>Intelligence Summary:</strong> Level 10 Development is executing one of Miami's largest construction projects with three simultaneous high-rise towers. The project includes 405 luxury condominiums and 850 rental apartments, requiring sustained workforce deployment over multiple years. High-profile nature creates public visibility opportunities for organizing campaigns.</p>

        <div class="source-links">
          <h4>📋 Source Citations:</h4>
          <a href="https://www.bldup.com/posts/level-10-taking-shape-at-cipriani-residences" class="source-link" target="_blank">BLDUP - Project Development Details</a>
        </div>
      </div>

      <div class="company-card">
        <div class="company-name">Joseph M. Sanzari, Inc.</div>
        <div class="priority-badge badge-critical">ACTIVE MONITORING</div>

        <div class="key-info">
          <div class="info-item">
            <div class="info-label">Current Project</div>
            <div class="info-value">$80.7M Newark Bay bridge contract (11 bridges)</div>
          </div>
          <div class="info-item">
            <div class="info-label">Jurisdiction</div>
            <div class="info-value">IUOE Local 825 core territory</div>
          </div>
          <div class="info-item">
            <div class="info-label">Union Status</div>
            <div class="info-value">Established union contractor</div>
          </div>
          <div class="info-item">
            <div class="info-label">Strategic Value</div>
            <div class="info-value">Major public works project with political visibility</div>
          </div>
        </div>

        <p><strong>Intelligence Summary:</strong> Joseph M. Sanzari secured the Newark Bay bridge contract after competitor El Sol Contracting was disqualified over paperwork issues, resulting in a $10M cost increase. The project represents significant public works activity in Local 825's jurisdiction and provides opportunities for subcontracting monitoring and workforce standards enforcement.</p>

        <div class="source-links">
          <h4>📋 Source Citations:</h4>
          <a href="https://henjii.com/democrats-unite-to-strengthen-infrastructure-and-support-union-jobs/" class="source-link" target="_blank">Henjii Local 825 Report - Bridge Project Analysis</a>
          <a href="https://henjii.com/%f0%9f%9a%a7-bridge-bid-botch-10m-costly-mistake-spurs-union-scrutiny/" class="source-link" target="_blank">Henjii - Bid Controversy Details</a>
        </div>
      </div>
    </div>

    <div class="henjii-section">
      <h2>🔍 HENJII LOCAL 825 INTELLIGENCE ANALYSIS</h2>
      <p>Specialized labor intelligence from Bulldozer Insights platform providing real-time organizing opportunities and strategic analysis for IUOE Local 825.</p>

      <div class="henjii-insight">
        <h3>Bridge Bid Controversy Impact</h3>
        <p><strong>Issue:</strong> $10M cost increase due to procedural bid error affecting El Sol Contracting and Joseph M. Sanzari</p>
        <p><strong>Organizing Implications:</strong> Procedural disqualifications can disrupt union job flow and create worker uncertainty. Opportunity exists for transparency advocacy and worker sentiment monitoring at both companies.</p>
        <p><strong>Strategic Recommendation:</strong> Deploy field organizers to assess worker sentiment and advocate for bid process reforms that protect union contractors.</p>
      </div>

      <div class="henjii-insight">
        <h3>Political Landscape Analysis</h3>
        <p><strong>Development:</strong> Building Trades support identified as crucial factor in NJ gubernatorial race</p>
        <p><strong>Candidate Focus:</strong> Steve Sweeney actively seeking labor endorsements</p>
        <p><strong>Strategic Value:</strong> Labor positioned as decisive factor in election outcome, creating leverage for policy advocacy</p>
      </div>

      <div class="henjii-insight">
        <h3>NJ Transit Labor Dispute</h3>
        <p><strong>Status:</strong> Brotherhood of Local Engineers and Trainmen rejected latest contract offer</p>
        <p><strong>Core Issue:</strong> Wage parity with New York engineers</p>
        <p><strong>Risk Assessment:</strong> Potential strike affecting 100,000 daily riders could impact public perception of organized labor</p>
        <p><strong>Opportunity:</strong> Public support for fair contracts and infrastructure investment</p>
      </div>

      <div class="source-links">
        <h4>📋 Henjii Platform Sources:</h4>
        <a href="https://henjii.com" class="source-link" target="_blank">Bulldozer Insights - Labor Intelligence Platform</a>
      </div>
    </div>

    <div class="priority-section priority-medium">
      <h2 style="color: #ffc107; margin-bottom: 25px;">⚡ MAJOR INFRASTRUCTURE PROJECTS</h2>

      <div class="company-card">
        <div class="company-name">NJ Transit Raritan River Bridge Replacement</div>
        <div class="priority-badge badge-high">UNION PROJECT</div>

        <div class="key-info">
          <div class="info-item">
            <div class="info-label">Contractor</div>
            <div class="info-value">Skanska Koch Inc. (Carteret, NJ)</div>
          </div>
          <div class="info-item">
            <div class="info-label">Contract Value</div>
            <div class="info-value">$444,380,524</div>
          </div>
          <div class="info-item">
            <div class="info-label">Status</div>
            <div class="info-value">Groundbreaking completed, construction beginning</div>
          </div>
          <div class="info-item">
            <div class="info-label">Union Involvement</div>
            <div class="info-value">Confirmed organized labor participation</div>
          </div>
        </div>

        <p><strong>Labor Leadership Quotes:</strong></p>
        <ul style="margin: 15px 0; padding-left: 20px;">
          <li><strong>Bernard Cooke, Middlesex County Building and Construction Trades Council:</strong> "Utilizing union labor ensures a highly skilled workforce that adheres to strict safety and quality standards."</li>
          <li><strong>Anthony Abrantes, Eastern Atlantic States Regional Council of Carpenters:</strong> "Projects like this are critical to workforce development, offering real careers with family-sustaining wages."</li>
        </ul>

        <div class="source-links">
          <h4>📋 Source Citations:</h4>
          <a href="https://www.rtands.com/track-construction/track-structure/bridges-tunnels/nj-transit-and-state-officials-celebrate-groundbreaking-of-next-phase-of-raritan-river-bridge-construction/" class="source-link" target="_blank">Railway Track and Structures - Project Details</a>
        </div>
      </div>
    </div>

    <div class="priority-section priority-low">
      <h2 style="color: #28a745; margin-bottom: 25px;">📊 MUNICIPAL CONTRACTS & OPPORTUNITIES</h2>

      <div class="company-card">
        <div class="company-name">Municipal Contract Awards</div>
        <div class="priority-badge badge-medium">MONITORING REQUIRED</div>

        <div class="key-info">
          <div class="info-item">
            <div class="info-label">Westfield Road Paving</div>
            <div class="info-value">P&A Construction, Inc. - $2,193,206.20 (60 roads)</div>
          </div>
          <div class="info-item">
            <div class="info-label">Cape May Projects</div>
            <div class="info-value">Think Pavers - $868,416.43</div>
          </div>
          <div class="info-item">
            <div class="info-label">A. Colarusso & Son</div>
            <div class="info-value">Multiple municipal contracts across NY region</div>
          </div>
          <div class="info-item">
            <div class="info-label">Prevailing Wage Status</div>
            <div class="info-value">Municipal contracts likely subject to prevailing wage requirements</div>
          </div>
        </div>

        <div class="source-links">
          <h4>📋 Source Citations:</h4>
          <a href="https://patch.com/new-jersey/westfield/60-roads-be-repaved-westfield-2025" class="source-link" target="_blank">Patch - Westfield Paving Contract</a>
          <a href="https://www.capemaycity.com/ConstructionProjects" class="source-link" target="_blank">City of Cape May - Project Awards</a>
          <a href="https://www.dailygazette.com/hv360/hudson-dock-replacement/article_067aef54-43b6-11ef-9ebe-07734db4d1df.html" class="source-link" target="_blank">Daily Gazette - A. Colarusso Legal Victory</a>
        </div>
      </div>
    </div>

    <div class="trends-section">
      <h2 style="color: #1e3c72;">📈 Industry Trends & Strategic Opportunities</h2>

      <div class="trends-grid">
        <div class="trend-item">
          <h3>Infrastructure Investment Surge</h3>
          <p>15.1% CAGR in pipe rehabilitation sector driven by federal and state funding initiatives. Technology adoption creating specialized skill requirements favoring trained union workforce.</p>
        </div>

        <div class="trend-item">
          <h3>Geographic Concentration</h3>
          <p>Strong project concentration in NJ/NY region with multiple municipal contract opportunities and government prevailing wage projects creating favorable organizing environment.</p>
        </div>

        <div class="trend-item">
          <h3>Industry Consolidation</h3>
          <p>Azuria Water Solutions acquisition strategy indicates market consolidation trends creating workforce integration opportunities and potential organizing leverage points.</p>
        </div>
      </div>
    </div>

    <div class="recommendations">
      <h2>🎯 Strategic Recommendations</h2>

      <div class="rec-timeline">
        <div class="rec-item">
          <h3>Immediate Actions (Next 30 Days)</h3>
          <ul style="margin-top: 10px; padding-left: 20px;">
            <li>Deploy organizers to Azuria Water Solutions/BLD Services facilities in Louisiana and Tennessee</li>
            <li>Monitor Joseph M. Sanzari Newark Bay bridge project for subcontracting opportunities</li>
            <li>Establish contact with Level 10 Development project management for workforce planning</li>
          </ul>
        </div>

        <div class="rec-item">
          <h3>Medium-Term Strategy (30-90 Days)</h3>
          <ul style="margin-top: 10px; padding-left: 20px;">
            <li>Leverage Building Trades support in NJ gubernatorial race for policy influence</li>
            <li>Push for bid process transparency reforms to protect union contractors</li>
            <li>Support NJ Transit fair contract negotiations while avoiding service disruptions</li>
          </ul>
        </div>

        <div class="rec-item">
          <h3>Long-Term Initiatives (90+ Days)</h3>
          <ul style="margin-top: 10px; padding-left: 20px;">
            <li>Track infrastructure funding pipelines and project development</li>
            <li>Build relationships with emerging contractors and market players</li>
            <li>Prepare workforce for specialized infrastructure technologies and training</li>
          </ul>
        </div>
      </div>
    </div>

    <div class="citations">
      <h2>📚 Complete Source Citations & References</h2>

      <div class="citation-category">
        <h3>Primary Industry Sources</h3>
        <ul class="citation-list">
          <li><a href="https://undergroundinfrastructure.com/news/2025/june/azuria-water-solutions-acquires-bld-services-to-expand-pipeline-rehab-capabilities" target="_blank">Underground Construction - Azuria Water Solutions Acquisition Analysis</a></li>
          <li><a href="https://www.bldup.com/posts/level-10-taking-shape-at-cipriani-residences" target="_blank">BLDUP - Level 10 Development Project Details</a></li>
          <li><a href="https://www.rtands.com/track-construction/track-structure/bridges-tunnels/nj-transit-and-state-officials-celebrate-groundbreaking-of-next-phase-of-raritan-river-bridge-construction/" target="_blank">Railway Track and Structures - NJ Transit Bridge Project</a></li>
          <li><a href="https://trenchlesstechnology.com/" target="_blank">Trenchless Technology Magazine - Industry News</a></li>
          <li><a href="https://globaltrenchlessnews.com/news/" target="_blank">Global Trenchless News - Market Updates</a></li>
        </ul>
      </div>

      <div class="citation-category">
        <h3>Labor Intelligence Platform</h3>
        <ul class="citation-list">
          <li><a href="https://henjii.com" target="_blank">Henjii (Bulldozer Insights) - Labor Union Intelligence Platform</a></li>
          <li><a href="https://henjii.com/democrats-unite-to-strengthen-infrastructure-and-support-union-jobs/" target="_blank">Henjii - Democrats Unite Infrastructure Analysis</a></li>
          <li><a href="https://henjii.com/%f0%9f%9a%a7-bridge-bid-botch-10m-costly-mistake-spurs-union-scrutiny/" target="_blank">Henjii - Bridge Bid Controversy Report</a></li>
        </ul>
      </div>

      <div class="citation-category">
        <h3>Government & Municipal Sources</h3>
        <ul class="citation-list">
          <li><a href="https://patch.com/new-jersey/westfield/60-roads-be-repaved-westfield-2025" target="_blank">Patch - Westfield Municipal Paving Contracts</a></li>
          <li><a href="https://www.capemaycity.com/ConstructionProjects" target="_blank">City of Cape May - Construction Project Awards</a></li>
          <li><a href="https://www.nj.gov/governor/news/news/562025/approved/20250630d.shtml" target="_blank">NJ Governor's Office - Budget and Infrastructure Funding</a></li>
          <li><a href="https://www.roi-nj.com/2025/06/25/transportation/n-j-officials-break-ground-on-next-phase-of-raritan-river-bridge/" target="_blank">ROI-NJ - Raritan River Bridge Groundbreaking</a></li>
        </ul>
      </div>

      <div class="citation-category">
        <h3>Legal & Financial Sources</h3>
        <ul class="citation-list">
          <li><a href="https://www.cahill.com/news/firm-news" target="_blank">Cahill Gordon & Reindel LLP - Corporate Financing News</a></li>
          <li><a href="https://www.dailygazette.com/hv360/hudson-dock-replacement/article_067aef54-43b6-11ef-9ebe-07734db4d1df.html" target="_blank">Daily Gazette - A. Colarusso Legal Victory</a></li>
          <li><a href="https://www.timesunion.com/hudsonvalley/news/article/hudson-democratic-primary-winner-20391829.php" target="_blank">Times Union - Hudson Political Developments</a></li>
        </ul>
      </div>

      <div class="citation-category">
        <h3>Industry Trade Publications</h3>
        <ul class="citation-list">
          <li><a href="https://www.northjersey.com/story/news/politics/elections/2025/06/28/nj-governor-election-who-is-winning-labor-union-endorsements-2025/84355764007/" target="_blank">North Jersey - Labor Union Political Endorsements</a></li>
          <li><a href="https://www.roi-nj.com/category/roi-influencers/union-leaders/" target="_blank">ROI-NJ - Union Leadership Profiles</a></li>
          <li><a href="https://www.mcaa.org/news/government-affairs-update-2025-06-30/" target="_blank">MCAA - Government Affairs Updates</a></li>
        </ul>
      </div>
    </div>

    <div class="footer">
      <p><strong>Report Compiled:</strong> July 2, 2025 | <strong>Research Period:</strong> June 25 - July 2, 2025</p>
      <p><strong>Methodology:</strong> Multi-source intelligence gathering including industry publications, government records, legal filings, and specialized labor intelligence platforms</p>
      <p><strong>Confidentiality:</strong> This report contains strategic intelligence for IUOE Local 825 organizing activities</p>
    </div>
  </div>
</body>

</html>
</file>

<file path="src/components/chat/ChatInput.tsx">
import { useRef, useEffect, useState } from "react";
import { Search, Send, ArrowRight } from "lucide-react";
import { Button } from "@/components/ui/button";
import { Textarea } from "@/components/ui/textarea";
import { PresetOption } from "./types";

interface ChatInputProps {
  input: string;
  setInput: (value: string) => void;
  onSend: (message?: string) => void;
  isLoading: boolean;
  isExpanded: boolean;
  filteredOptions: PresetOption[];
  onOptionSelect: (option: PresetOption) => void;
  isOpen: boolean;
}

export const ChatInput = ({ 
  input, 
  setInput, 
  onSend, 
  isLoading, 
  isExpanded, 
  filteredOptions, 
  onOptionSelect,
  isOpen 
}: ChatInputProps) => {
  const textareaRef = useRef<HTMLTextAreaElement>(null);
  const [keyboardHeight, setKeyboardHeight] = useState(0);

  useEffect(() => {
    if (isOpen && !isExpanded && textareaRef.current) {
      setTimeout(() => {
        textareaRef.current?.focus();
      }, 200);
    }
  }, [isOpen, isExpanded]);

  useEffect(() => {
    // Handle keyboard height on mobile
    const handleResize = () => {
      if (window.visualViewport) {
        const heightDiff = window.innerHeight - window.visualViewport.height;
        setKeyboardHeight(heightDiff > 150 ? heightDiff : 0);
      }
    };

    if (window.visualViewport) {
      window.visualViewport.addEventListener('resize', handleResize);
      return () => window.visualViewport?.removeEventListener('resize', handleResize);
    }
  }, []);

  const handleKeyDown = (e: React.KeyboardEvent<HTMLTextAreaElement>) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      if (input.trim() && !isLoading) {
        onSend();
      }
    }
  };

  const handleInputChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {
    setInput(e.target.value);
  };

  const handleSendClick = () => {
    if (input.trim() && !isLoading) {
      onSend();
    }
  };

  return (
    <div 
      className="px-4 sm:px-6 py-4 bg-white border-t border-gray-100"
      style={{
        paddingBottom: keyboardHeight > 0 ? '16px' : '16px',
        transform: keyboardHeight > 0 ? `translateY(-${Math.min(keyboardHeight, 200)}px)` : 'none',
        transition: 'transform 0.3s ease-out'
      }}
    >
      <div className="flex gap-2 sm:gap-3 items-end">
        <div className="flex-1 relative">
          <div className="absolute left-3 top-1/2 transform -translate-y-1/2 z-10 pointer-events-none">
            <Search className="h-4 w-4 text-gray-400" />
          </div>
          <Textarea
            ref={textareaRef}
            value={input}
            onChange={handleInputChange}
            onKeyDown={handleKeyDown}
            placeholder="ask a question…"
            className="w-full min-h-[48px] max-h-24 pl-10 pr-4 py-3 resize-none border-gray-200 rounded-lg focus:border-[#5A7FFF] focus:ring-1 focus:ring-[#5A7FFF] transition-all duration-200 text-sm bg-white text-gray-900 placeholder:text-gray-500"
            disabled={isLoading}
            rows={1}
            style={{ fontSize: '16px' }} // Prevents zoom on iOS
          />
        </div>
        <Button
          onClick={handleSendClick}
          disabled={!input.trim() || isLoading}
          className="bg-[#5A7FFF] hover:bg-[#4A6FEF] h-12 w-12 rounded-lg p-0 transition-all duration-200 hover:scale-105 disabled:opacity-50 flex-shrink-0 flex items-center justify-center"
          type="button"
        >
          <Send className="h-4 w-4" />
        </Button>
      </div>
      
      {/* Preset Options - Only show when not expanded and no keyboard */}
      {!isExpanded && filteredOptions.length > 0 && keyboardHeight === 0 && (
        <div className="mt-4 space-y-2">
          {filteredOptions.map((option) => (
            <button
              key={option.id}
              onClick={() => onOptionSelect(option)}
              className="w-full flex items-center gap-3 p-3 rounded-lg border border-gray-200 hover:border-[#5A7FFF] hover:bg-blue-50 transition-all duration-200 text-left group"
              type="button"
            >
              <div className="text-gray-600 group-hover:text-[#5A7FFF] flex-shrink-0">
                {option.icon}
              </div>
              <div className="flex-1 min-w-0">
                <h4 className="text-sm font-medium text-gray-900 group-hover:text-[#5A7FFF] truncate">
                  {option.title}
                </h4>
                <p className="text-xs text-gray-500 group-hover:text-blue-700 line-clamp-2">
                  {option.description}
                </p>
              </div>
              <ArrowRight className="h-4 w-4 text-gray-400 group-hover:text-[#5A7FFF] flex-shrink-0" />
            </button>
          ))}
        </div>
      )}
      
      {/* Footer - Only show when no keyboard */}
      {!isExpanded && keyboardHeight === 0 && (
        <p className="text-xs text-gray-500 mt-3 text-center">
          Powered by Local 825 Intelligence • For union organizing support
        </p>
      )}
    </div>
  );
};
</file>

<file path="src/components/chat/MarkdownRenderer.tsx">
import ReactMarkdown from 'react-markdown';

interface MarkdownRendererProps {
  content: string;
}

export const MarkdownRenderer = ({ content }: MarkdownRendererProps) => (
  <ReactMarkdown
    components={{
      a: ({ href, children }) => (
        <a 
          href={href} 
          target="_blank" 
          rel="noopener noreferrer"
          className="text-[#1e73be] hover:text-[#336699] underline font-medium"
        >
          {children}
        </a>
      ),
      img: ({ src, alt }) => (
        <img 
          src={src} 
          alt={alt} 
          className="max-w-full h-auto rounded-lg mt-2 mb-2"
          loading="lazy"
        />
      ),
      p: ({ children }) => (
        <p className="mb-2 last:mb-0">{children}</p>
      ),
      ul: ({ children }) => (
        <ul className="list-disc list-inside mb-2 ml-2">{children}</ul>
      ),
      ol: ({ children }) => (
        <ol className="list-decimal list-inside mb-2 ml-2">{children}</ol>
      ),
      li: ({ children }) => (
        <li className="mb-1">{children}</li>
      ),
      code: ({ children, className }) => {
        const isInline = !className;
        return isInline ? (
          <code className="bg-gray-100 px-1 py-0.5 rounded text-sm font-mono">
            {children}
          </code>
        ) : (
          <pre className="bg-gray-100 p-3 rounded-lg overflow-x-auto mb-2">
            <code className="text-sm font-mono">{children}</code>
          </pre>
        );
      },
      blockquote: ({ children }) => (
        <blockquote className="border-l-4 border-[#1e73be] pl-4 italic mb-2 text-gray-600">
          {children}
        </blockquote>
      ),
      h1: ({ children }) => (
        <h1 className="text-xl font-bold mb-2 text-[#1e73be]">{children}</h1>
      ),
      h2: ({ children }) => (
        <h2 className="text-lg font-bold mb-2 text-[#1e73be]">{children}</h2>
      ),
      h3: ({ children }) => (
        <h3 className="text-md font-bold mb-2 text-[#1e73be]">{children}</h3>
      ),
    }}
  >
    {content}
  </ReactMarkdown>
);
</file>

<file path="src/components/chat/presetOptions.tsx">
import React from "react";
import { ArrowRight, BarChart3, Settings, Plus } from "lucide-react";
import { PresetOption } from "./types";

export const presetOptions: PresetOption[] = [
  {
    id: "organizing",
    icon: <ArrowRight className="h-4 w-4" />,
    title: "Organizing Strategies",
    description: "Get advice on union organizing tactics and approaches",
    prompt: "What are the best strategies for organizing workers in my industry?"
  },
  {
    id: "contractors",
    icon: <BarChart3 className="h-4 w-4" />,
    title: "Contractor Intelligence",
    description: "Research contractors and their labor practices",
    prompt: "Help me research a contractor's labor history and practices"
  },
  {
    id: "negotiations",
    icon: <Settings className="h-4 w-4" />,
    title: "Negotiation Support",
    description: "Assistance with contract negotiations and tactics",
    prompt: "What should I know about negotiating with management?"
  },
  {
    id: "rights",
    icon: <Plus className="h-4 w-4" />,
    title: "Worker Rights",
    description: "Information about worker rights and protections",
    prompt: "What are my rights as a union member and worker?"
  }
];
</file>

<file path="src/components/chat/types.ts">
export interface Message {
  id: string;
  text: string;
  isUser: boolean;
  timestamp: Date;
}

export interface PresetOption {
  id: string;
  icon: React.ReactNode;
  title: string;
  description: string;
  prompt: string;
}
</file>

<file path="src/components/feed/FilterSection.tsx">
import { Badge } from "@/components/ui/badge";

interface FilterOption {
  label: string;
  value: string;
}

interface FilterSectionProps {
  availableFilters: FilterOption[];
  activeFilters: string[];
  toggleFilter: (filterValue: string) => void;
}

export default function FilterSection({
  availableFilters,
  activeFilters,
  toggleFilter,
}: FilterSectionProps) {
  return (
    <div className="space-y-4">
      <div>
        <h4 className="text-sm font-medium mb-3">Topics</h4>
        <div className="flex flex-wrap gap-2">
          {availableFilters.map((filter) => (
            <Badge
              key={filter.value}
              variant={activeFilters.includes(filter.value) ? "default" : "outline"}
              className="cursor-pointer hover:bg-primary/10 transition-colors"
              onClick={() => toggleFilter(filter.value)}
            >
              {filter.label}
            </Badge>
          ))}
        </div>
      </div>
    </div>
  );
}
</file>

<file path="src/components/feed/LoadingState.tsx">
import { Card, CardContent } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { RefreshCw, Search } from "lucide-react";

export default function LoadingState() {
  return (
    <div className="text-center py-16">
      <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-primary mx-auto mb-4"></div>
      <p className="text-muted-foreground">Loading intelligence...</p>
    </div>
  );
}
</file>

<file path="src/components/feed/NewsSourcesList.tsx">
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { useNewsSources } from "@/hooks/useNewsSources";
import { Loader2, Building2, Rss } from "lucide-react";

export default function NewsSourcesList() {
  const { sources, loading, error } = useNewsSources();

  if (loading) {
    return (
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Rss className="h-5 w-5" />
            Active Bulldozer Feeds
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="flex items-center justify-center py-8">
            <Loader2 className="h-6 w-6 animate-spin" />
          </div>
        </CardContent>
      </Card>
    );
  }

  if (error) {
    return (
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Rss className="h-5 w-5" />
            Active Bulldozer Feeds
          </CardTitle>
        </CardHeader>
        <CardContent>
          <p className="text-red-500">Error loading feeds: {error}</p>
        </CardContent>
      </Card>
    );
  }

  const companyFeeds = sources.filter(source => 
    source.company_names && source.company_names.length > 0
  );

  const generalFeeds = sources.filter(source => 
    !source.company_names || source.company_names.length === 0
  );

  return (
    <div className="space-y-6">
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Building2 className="h-5 w-5" />
            Company-Specific Feeds ({companyFeeds.length})
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="space-y-4">
            {companyFeeds.map((source) => (
              <div key={source.id} className="border rounded-lg p-4">
                <div className="flex items-start justify-between mb-2">
                  <h3 className="font-semibold">{source.name}</h3>
                  <Badge variant="secondary">Company Feed</Badge>
                </div>
                {source.description && (
                  <p className="text-sm text-muted-foreground mb-2">{source.description}</p>
                )}
                <div className="flex flex-wrap gap-1 mb-2">
                  {source.company_names?.map((company, index) => (
                    <Badge key={index} variant="outline" className="text-xs">
                      {company}
                    </Badge>
                  ))}
                </div>
                <p className="text-xs text-muted-foreground font-mono">
                  {source.rss_url}
                </p>
              </div>
            ))}
            {companyFeeds.length === 0 && (
              <p className="text-muted-foreground">No company-specific feeds configured.</p>
            )}
          </div>
        </CardContent>
      </Card>

      {generalFeeds.length > 0 && (
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Rss className="h-5 w-5" />
              General News Feeds ({generalFeeds.length}) - Should be removed
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="space-y-4">
              {generalFeeds.map((source) => (
                <div key={source.id} className="border rounded-lg p-4 bg-yellow-50">
                  <div className="flex items-start justify-between mb-2">
                    <h3 className="font-semibold">{source.name}</h3>
                    <Badge variant="destructive">General Feed</Badge>
                  </div>
                  {source.description && (
                    <p className="text-sm text-muted-foreground mb-2">{source.description}</p>
                  )}
                  <p className="text-xs text-muted-foreground font-mono">
                    {source.rss_url}
                  </p>
                </div>
              ))}
            </div>
          </CardContent>
        </Card>
      )}

      <Card>
        <CardContent className="pt-6">
          <div className="text-sm text-muted-foreground">
            <p><strong>Company Feeds:</strong> These are Google News RSS feeds that search for specific company names in NY/NJ. They provide targeted news about companies that Local 825 tracks.</p>
            <p className="mt-2"><strong>General Feeds:</strong> These pull from general news sources and should be removed to focus only on company-specific content.</p>
          </div>
        </CardContent>
      </Card>
    </div>
  );
}
</file>

<file path="src/components/onboarding/GoalsStep.tsx">
import { Label } from "@/components/ui/label";
import { Button } from "@/components/ui/button";
import { Check } from "lucide-react";

interface GoalsStepProps {
  value: string[];
  onChange: (value: string[]) => void;
}

const goals = [
  "Increase membership",
  "Improve working conditions",
  "Secure better wages",
  "Enhance benefits",
  "Address workplace safety",
  "Strengthen contract language",
  "Research competitor practices",
  "Track company financial health",
  "Monitor compliance issues",
  "Build community support"
];

export default function GoalsStep({ value, onChange }: GoalsStepProps) {
  const toggleGoal = (goal: string) => {
    if (value.includes(goal)) {
      onChange(value.filter(g => g !== goal));
    } else {
      onChange([...value, goal]);
    }
  };

  return (
    <div className="space-y-6">
      <div>
        <h3 className="text-2xl font-semibold mb-3">What are your key goals? (Select up to 3)</h3>
        <p className="text-muted-foreground">
          Select up to 3 priorities to help us focus on what matters most to you.
        </p>
      </div>
      
      <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mt-6">
        {goals.map((goal) => (
          <Button
            key={goal}
            type="button"
            variant={value.includes(goal) ? "default" : "outline"}
            className={`h-auto py-4 px-6 flex justify-between items-center ${
              value.includes(goal) ? "border-primary shadow-sm" : ""
            }`}
            onClick={() => {
              if (value.includes(goal) || value.length < 3) {
                toggleGoal(goal);
              }
            }}
            disabled={!value.includes(goal) && value.length >= 3}
          >
            <span>{goal}</span>
            {value.includes(goal) && <Check className="h-4 w-4 ml-2" />}
          </Button>
        ))}
      </div>
      
      <p className="text-sm text-muted-foreground mt-4">
        Selected: {value.length}/3
      </p>
    </div>
  );
}
</file>

<file path="src/components/onboarding/IndustryStep.tsx">
import { useState } from "react";
import { Label } from "@/components/ui/label";
import { Button } from "@/components/ui/button";
import { Check } from "lucide-react";

interface IndustryStepProps {
  value: string;
  onChange: (value: string) => void;
}

const industries = [
  "Manufacturing",
  "Healthcare",
  "Education",
  "Retail",
  "Technology",
  "Public Sector",
  "Transportation",
  "Construction",
  "Hospitality",
  "Other"
];

export default function IndustryStep({ value, onChange }: IndustryStepProps) {
  return (
    <div className="space-y-6">
      <div>
        <h3 className="text-2xl font-semibold mb-3">What industry are you organizing in?</h3>
        <p className="text-muted-foreground">
          This helps us tailor relevant company insights for your sector.
        </p>
      </div>
      
      <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mt-6">
        {industries.map((industry) => (
          <Button
            key={industry}
            type="button"
            variant={value === industry ? "default" : "outline"}
            className={`h-auto py-4 px-6 flex justify-between items-center ${
              value === industry ? "border-primary shadow-sm" : ""
            }`}
            onClick={() => onChange(industry)}
          >
            <span>{industry}</span>
            {value === industry && <Check className="h-4 w-4 ml-2" />}
          </Button>
        ))}
      </div>
    </div>
  );
}
</file>

<file path="src/components/onboarding/OrganizationSizeStep.tsx">
import { Label } from "@/components/ui/label";
import { Button } from "@/components/ui/button";
import { Check } from "lucide-react";

interface OrganizationSizeStepProps {
  value: string;
  onChange: (value: string) => void;
}

const sizes = [
  "1-10 employees",
  "11-50 employees",
  "51-200 employees",
  "201-500 employees",
  "501-1000 employees",
  "1001+ employees"
];

export default function OrganizationSizeStep({ value, onChange }: OrganizationSizeStepProps) {
  return (
    <div className="space-y-6">
      <div>
        <h3 className="text-2xl font-semibold mb-3">How large is the organization you're focusing on?</h3>
        <p className="text-muted-foreground">
          This helps us personalize our analytics and outreach recommendations.
        </p>
      </div>
      
      <div className="grid grid-cols-1 gap-3 mt-6">
        {sizes.map((size) => (
          <Button
            key={size}
            type="button"
            variant={value === size ? "default" : "outline"}
            className={`h-auto py-3 px-6 flex justify-between items-center ${
              value === size ? "border-primary shadow-sm" : ""
            }`}
            onClick={() => onChange(size)}
          >
            <span>{size}</span>
            {value === size && <Check className="h-4 w-4 ml-2" />}
          </Button>
        ))}
      </div>
    </div>
  );
}
</file>

<file path="src/components/onboarding/PriorityStep.tsx">
import { Label } from "@/components/ui/label";
import { Button } from "@/components/ui/button";
import { Check } from "lucide-react";

interface PriorityStepProps {
  value: string;
  onChange: (value: string) => void;
}

const priorities = [
  "Contract Negotiations",
  "New Member Recruitment",
  "Workplace Violations",
  "Employer Research",
  "Communications",
  "Industry Trends",
  "Legal Compliance",
  "Member Education"
];

export default function PriorityStep({ value, onChange }: PriorityStepProps) {
  return (
    <div className="space-y-6">
      <div>
        <h3 className="text-2xl font-semibold mb-3">What is your top priority right now?</h3>
        <p className="text-muted-foreground">
          This helps us highlight the most relevant features and insights for you.
        </p>
      </div>
      
      <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mt-6">
        {priorities.map((priority) => (
          <Button
            key={priority}
            type="button"
            variant={value === priority ? "default" : "outline"}
            className={`h-auto py-4 px-6 flex justify-between items-center ${
              value === priority ? "border-primary shadow-sm" : ""
            }`}
            onClick={() => onChange(priority)}
          >
            <span>{priority}</span>
            {value === priority && <Check className="h-4 w-4 ml-2" />}
          </Button>
        ))}
      </div>
    </div>
  );
}
</file>

<file path="src/components/onboarding/RoleStep.tsx">
import { Label } from "@/components/ui/label";
import { Button } from "@/components/ui/button";
import { Check } from "lucide-react";

interface RoleStepProps {
  value: string;
  onChange: (value: string) => void;
}

const roles = [
  "Union Organizer",
  "Shop Steward",
  "Union Representative",
  "Labor Researcher",
  "Union Officer",
  "Employee/Worker",
  "Consultant",
  "Other"
];

export default function RoleStep({ value, onChange }: RoleStepProps) {
  return (
    <div className="space-y-6">
      <div>
        <h3 className="text-2xl font-semibold mb-3">What is your role in the organizing effort?</h3>
        <p className="text-muted-foreground">
          We'll customize your dashboard based on your specific responsibilities.
        </p>
      </div>
      
      <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mt-6">
        {roles.map((role) => (
          <Button
            key={role}
            type="button"
            variant={value === role ? "default" : "outline"}
            className={`h-auto py-4 px-6 flex justify-between items-center ${
              value === role ? "border-primary shadow-sm" : ""
            }`}
            onClick={() => onChange(role)}
          >
            <span>{role}</span>
            {value === role && <Check className="h-4 w-4 ml-2" />}
          </Button>
        ))}
      </div>
    </div>
  );
}
</file>

<file path="src/components/ui/accordion.tsx">
import * as React from "react"
import * as AccordionPrimitive from "@radix-ui/react-accordion"
import { ChevronDown } from "lucide-react"

import { cn } from "@/lib/utils"

const Accordion = AccordionPrimitive.Root

const AccordionItem = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>
>(({ className, ...props }, ref) => (
  <AccordionPrimitive.Item
    ref={ref}
    className={cn("border-b", className)}
    {...props}
  />
))
AccordionItem.displayName = "AccordionItem"

const AccordionTrigger = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Header className="flex">
    <AccordionPrimitive.Trigger
      ref={ref}
      className={cn(
        "flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180",
        className
      )}
      {...props}
    >
      {children}
      <ChevronDown className="h-4 w-4 shrink-0 transition-transform duration-200" />
    </AccordionPrimitive.Trigger>
  </AccordionPrimitive.Header>
))
AccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName

const AccordionContent = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Content
    ref={ref}
    className="overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down"
    {...props}
  >
    <div className={cn("pb-4 pt-0", className)}>{children}</div>
  </AccordionPrimitive.Content>
))

AccordionContent.displayName = AccordionPrimitive.Content.displayName

export { Accordion, AccordionItem, AccordionTrigger, AccordionContent }
</file>

<file path="src/components/ui/alert-dialog.tsx">
import * as React from "react"
import * as AlertDialogPrimitive from "@radix-ui/react-alert-dialog"

import { cn } from "@/lib/utils"
import { buttonVariants } from "@/components/ui/button"

const AlertDialog = AlertDialogPrimitive.Root

const AlertDialogTrigger = AlertDialogPrimitive.Trigger

const AlertDialogPortal = AlertDialogPrimitive.Portal

const AlertDialogOverlay = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Overlay
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
    ref={ref}
  />
))
AlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName

const AlertDialogContent = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>
>(({ className, ...props }, ref) => (
  <AlertDialogPortal>
    <AlertDialogOverlay />
    <AlertDialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      {...props}
    />
  </AlertDialogPortal>
))
AlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName

const AlertDialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-2 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
AlertDialogHeader.displayName = "AlertDialogHeader"

const AlertDialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
AlertDialogFooter.displayName = "AlertDialogFooter"

const AlertDialogTitle = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Title
    ref={ref}
    className={cn("text-lg font-semibold", className)}
    {...props}
  />
))
AlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName

const AlertDialogDescription = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
AlertDialogDescription.displayName =
  AlertDialogPrimitive.Description.displayName

const AlertDialogAction = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Action>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Action
    ref={ref}
    className={cn(buttonVariants(), className)}
    {...props}
  />
))
AlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName

const AlertDialogCancel = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Cancel
    ref={ref}
    className={cn(
      buttonVariants({ variant: "outline" }),
      "mt-2 sm:mt-0",
      className
    )}
    {...props}
  />
))
AlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName

export {
  AlertDialog,
  AlertDialogPortal,
  AlertDialogOverlay,
  AlertDialogTrigger,
  AlertDialogContent,
  AlertDialogHeader,
  AlertDialogFooter,
  AlertDialogTitle,
  AlertDialogDescription,
  AlertDialogAction,
  AlertDialogCancel,
}
</file>

<file path="src/components/ui/alert.tsx">
import * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const alertVariants = cva(
  "relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground",
  {
    variants: {
      variant: {
        default: "bg-background text-foreground",
        destructive:
          "border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

const Alert = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>
>(({ className, variant, ...props }, ref) => (
  <div
    ref={ref}
    role="alert"
    className={cn(alertVariants({ variant }), className)}
    {...props}
  />
))
Alert.displayName = "Alert"

const AlertTitle = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLHeadingElement>
>(({ className, ...props }, ref) => (
  <h5
    ref={ref}
    className={cn("mb-1 font-medium leading-none tracking-tight", className)}
    {...props}
  />
))
AlertTitle.displayName = "AlertTitle"

const AlertDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("text-sm [&_p]:leading-relaxed", className)}
    {...props}
  />
))
AlertDescription.displayName = "AlertDescription"

export { Alert, AlertTitle, AlertDescription }
</file>

<file path="src/components/ui/aspect-ratio.tsx">
import * as AspectRatioPrimitive from "@radix-ui/react-aspect-ratio"

const AspectRatio = AspectRatioPrimitive.Root

export { AspectRatio }
</file>

<file path="src/components/ui/avatar.tsx">
import * as React from "react"
import * as AvatarPrimitive from "@radix-ui/react-avatar"

import { cn } from "@/lib/utils"

const Avatar = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Root
    ref={ref}
    className={cn(
      "relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full",
      className
    )}
    {...props}
  />
))
Avatar.displayName = AvatarPrimitive.Root.displayName

const AvatarImage = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Image>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Image
    ref={ref}
    className={cn("aspect-square h-full w-full", className)}
    {...props}
  />
))
AvatarImage.displayName = AvatarPrimitive.Image.displayName

const AvatarFallback = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Fallback>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Fallback
    ref={ref}
    className={cn(
      "flex h-full w-full items-center justify-center rounded-full bg-muted",
      className
    )}
    {...props}
  />
))
AvatarFallback.displayName = AvatarPrimitive.Fallback.displayName

export { Avatar, AvatarImage, AvatarFallback }
</file>

<file path="src/components/ui/badge.tsx">
import * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const badgeVariants = cva(
  "inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2",
  {
    variants: {
      variant: {
        default:
          "border-transparent bg-primary text-primary-foreground hover:bg-primary/80",
        secondary:
          "border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80",
        destructive:
          "border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80",
        outline: "text-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

export interface BadgeProps
  extends React.HTMLAttributes<HTMLDivElement>,
    VariantProps<typeof badgeVariants> {}

function Badge({ className, variant, ...props }: BadgeProps) {
  return (
    <div className={cn(badgeVariants({ variant }), className)} {...props} />
  )
}

export { Badge, badgeVariants }
</file>

<file path="src/components/ui/breadcrumb.tsx">
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { ChevronRight, MoreHorizontal } from "lucide-react"

import { cn } from "@/lib/utils"

const Breadcrumb = React.forwardRef<
  HTMLElement,
  React.ComponentPropsWithoutRef<"nav"> & {
    separator?: React.ReactNode
  }
>(({ ...props }, ref) => <nav ref={ref} aria-label="breadcrumb" {...props} />)
Breadcrumb.displayName = "Breadcrumb"

const BreadcrumbList = React.forwardRef<
  HTMLOListElement,
  React.ComponentPropsWithoutRef<"ol">
>(({ className, ...props }, ref) => (
  <ol
    ref={ref}
    className={cn(
      "flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5",
      className
    )}
    {...props}
  />
))
BreadcrumbList.displayName = "BreadcrumbList"

const BreadcrumbItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentPropsWithoutRef<"li">
>(({ className, ...props }, ref) => (
  <li
    ref={ref}
    className={cn("inline-flex items-center gap-1.5", className)}
    {...props}
  />
))
BreadcrumbItem.displayName = "BreadcrumbItem"

const BreadcrumbLink = React.forwardRef<
  HTMLAnchorElement,
  React.ComponentPropsWithoutRef<"a"> & {
    asChild?: boolean
  }
>(({ asChild, className, ...props }, ref) => {
  const Comp = asChild ? Slot : "a"

  return (
    <Comp
      ref={ref}
      className={cn("transition-colors hover:text-foreground", className)}
      {...props}
    />
  )
})
BreadcrumbLink.displayName = "BreadcrumbLink"

const BreadcrumbPage = React.forwardRef<
  HTMLSpanElement,
  React.ComponentPropsWithoutRef<"span">
>(({ className, ...props }, ref) => (
  <span
    ref={ref}
    role="link"
    aria-disabled="true"
    aria-current="page"
    className={cn("font-normal text-foreground", className)}
    {...props}
  />
))
BreadcrumbPage.displayName = "BreadcrumbPage"

const BreadcrumbSeparator = ({
  children,
  className,
  ...props
}: React.ComponentProps<"li">) => (
  <li
    role="presentation"
    aria-hidden="true"
    className={cn("[&>svg]:size-3.5", className)}
    {...props}
  >
    {children ?? <ChevronRight />}
  </li>
)
BreadcrumbSeparator.displayName = "BreadcrumbSeparator"

const BreadcrumbEllipsis = ({
  className,
  ...props
}: React.ComponentProps<"span">) => (
  <span
    role="presentation"
    aria-hidden="true"
    className={cn("flex h-9 w-9 items-center justify-center", className)}
    {...props}
  >
    <MoreHorizontal className="h-4 w-4" />
    <span className="sr-only">More</span>
  </span>
)
BreadcrumbEllipsis.displayName = "BreadcrumbElipssis"

export {
  Breadcrumb,
  BreadcrumbList,
  BreadcrumbItem,
  BreadcrumbLink,
  BreadcrumbPage,
  BreadcrumbSeparator,
  BreadcrumbEllipsis,
}
</file>

<file path="src/components/ui/button.tsx">
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const buttonVariants = cva(
  "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
  {
    variants: {
      variant: {
        default: "bg-primary text-primary-foreground hover:bg-primary/90",
        destructive:
          "bg-destructive text-destructive-foreground hover:bg-destructive/90",
        outline:
          "border border-input bg-background hover:bg-accent hover:text-accent-foreground",
        secondary:
          "bg-secondary text-secondary-foreground hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-10 px-4 py-2",
        sm: "h-9 rounded-md px-3",
        lg: "h-11 rounded-md px-8",
        icon: "h-10 w-10",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : "button"
    return (
      <Comp
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        {...props}
      />
    )
  }
)
Button.displayName = "Button"

export { Button, buttonVariants }
</file>

<file path="src/components/ui/calendar.tsx">
import * as React from "react";
import { ChevronLeft, ChevronRight } from "lucide-react";
import { DayPicker } from "react-day-picker";

import { cn } from "@/lib/utils";
import { buttonVariants } from "@/components/ui/button";

export type CalendarProps = React.ComponentProps<typeof DayPicker>;

function Calendar({
  className,
  classNames,
  showOutsideDays = true,
  ...props
}: CalendarProps) {
  return (
    <DayPicker
      showOutsideDays={showOutsideDays}
      className={cn("p-3", className)}
      classNames={{
        months: "flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0",
        month: "space-y-4",
        caption: "flex justify-center pt-1 relative items-center",
        caption_label: "text-sm font-medium",
        nav: "space-x-1 flex items-center",
        nav_button: cn(
          buttonVariants({ variant: "outline" }),
          "h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100"
        ),
        nav_button_previous: "absolute left-1",
        nav_button_next: "absolute right-1",
        table: "w-full border-collapse space-y-1",
        head_row: "flex",
        head_cell:
          "text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]",
        row: "flex w-full mt-2",
        cell: "h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20",
        day: cn(
          buttonVariants({ variant: "ghost" }),
          "h-9 w-9 p-0 font-normal aria-selected:opacity-100"
        ),
        day_range_end: "day-range-end",
        day_selected:
          "bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground",
        day_today: "bg-accent text-accent-foreground",
        day_outside:
          "day-outside text-muted-foreground opacity-50 aria-selected:bg-accent/50 aria-selected:text-muted-foreground aria-selected:opacity-30",
        day_disabled: "text-muted-foreground opacity-50",
        day_range_middle:
          "aria-selected:bg-accent aria-selected:text-accent-foreground",
        day_hidden: "invisible",
        ...classNames,
      }}
      components={{
        IconLeft: ({ ..._props }) => <ChevronLeft className="h-4 w-4" />,
        IconRight: ({ ..._props }) => <ChevronRight className="h-4 w-4" />,
      }}
      {...props}
    />
  );
}
Calendar.displayName = "Calendar";

export { Calendar };
</file>

<file path="src/components/ui/card.tsx">
import * as React from "react"

import { cn } from "@/lib/utils"

const Card = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "rounded-lg border bg-card text-card-foreground shadow-sm",
      className
    )}
    {...props}
  />
))
Card.displayName = "Card"

const CardHeader = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex flex-col space-y-1.5 p-6", className)}
    {...props}
  />
))
CardHeader.displayName = "CardHeader"

const CardTitle = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLHeadingElement>
>(({ className, ...props }, ref) => (
  <h3
    ref={ref}
    className={cn(
      "text-2xl font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
CardTitle.displayName = "CardTitle"

const CardDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => (
  <p
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
CardDescription.displayName = "CardDescription"

const CardContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />
))
CardContent.displayName = "CardContent"

const CardFooter = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex items-center p-6 pt-0", className)}
    {...props}
  />
))
CardFooter.displayName = "CardFooter"

export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }
</file>

<file path="src/components/ui/carousel.tsx">
import * as React from "react"
import useEmblaCarousel, {
  type UseEmblaCarouselType,
} from "embla-carousel-react"
import { ArrowLeft, ArrowRight } from "lucide-react"

import { cn } from "@/lib/utils"
import { Button } from "@/components/ui/button"

type CarouselApi = UseEmblaCarouselType[1]
type UseCarouselParameters = Parameters<typeof useEmblaCarousel>
type CarouselOptions = UseCarouselParameters[0]
type CarouselPlugin = UseCarouselParameters[1]

type CarouselProps = {
  opts?: CarouselOptions
  plugins?: CarouselPlugin
  orientation?: "horizontal" | "vertical"
  setApi?: (api: CarouselApi) => void
}

type CarouselContextProps = {
  carouselRef: ReturnType<typeof useEmblaCarousel>[0]
  api: ReturnType<typeof useEmblaCarousel>[1]
  scrollPrev: () => void
  scrollNext: () => void
  canScrollPrev: boolean
  canScrollNext: boolean
} & CarouselProps

const CarouselContext = React.createContext<CarouselContextProps | null>(null)

function useCarousel() {
  const context = React.useContext(CarouselContext)

  if (!context) {
    throw new Error("useCarousel must be used within a <Carousel />")
  }

  return context
}

const Carousel = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement> & CarouselProps
>(
  (
    {
      orientation = "horizontal",
      opts,
      setApi,
      plugins,
      className,
      children,
      ...props
    },
    ref
  ) => {
    const [carouselRef, api] = useEmblaCarousel(
      {
        ...opts,
        axis: orientation === "horizontal" ? "x" : "y",
      },
      plugins
    )
    const [canScrollPrev, setCanScrollPrev] = React.useState(false)
    const [canScrollNext, setCanScrollNext] = React.useState(false)

    const onSelect = React.useCallback((api: CarouselApi) => {
      if (!api) {
        return
      }

      setCanScrollPrev(api.canScrollPrev())
      setCanScrollNext(api.canScrollNext())
    }, [])

    const scrollPrev = React.useCallback(() => {
      api?.scrollPrev()
    }, [api])

    const scrollNext = React.useCallback(() => {
      api?.scrollNext()
    }, [api])

    const handleKeyDown = React.useCallback(
      (event: React.KeyboardEvent<HTMLDivElement>) => {
        if (event.key === "ArrowLeft") {
          event.preventDefault()
          scrollPrev()
        } else if (event.key === "ArrowRight") {
          event.preventDefault()
          scrollNext()
        }
      },
      [scrollPrev, scrollNext]
    )

    React.useEffect(() => {
      if (!api || !setApi) {
        return
      }

      setApi(api)
    }, [api, setApi])

    React.useEffect(() => {
      if (!api) {
        return
      }

      onSelect(api)
      api.on("reInit", onSelect)
      api.on("select", onSelect)

      return () => {
        api?.off("select", onSelect)
      }
    }, [api, onSelect])

    return (
      <CarouselContext.Provider
        value={{
          carouselRef,
          api: api,
          opts,
          orientation:
            orientation || (opts?.axis === "y" ? "vertical" : "horizontal"),
          scrollPrev,
          scrollNext,
          canScrollPrev,
          canScrollNext,
        }}
      >
        <div
          ref={ref}
          onKeyDownCapture={handleKeyDown}
          className={cn("relative", className)}
          role="region"
          aria-roledescription="carousel"
          {...props}
        >
          {children}
        </div>
      </CarouselContext.Provider>
    )
  }
)
Carousel.displayName = "Carousel"

const CarouselContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const { carouselRef, orientation } = useCarousel()

  return (
    <div ref={carouselRef} className="overflow-hidden">
      <div
        ref={ref}
        className={cn(
          "flex",
          orientation === "horizontal" ? "-ml-4" : "-mt-4 flex-col",
          className
        )}
        {...props}
      />
    </div>
  )
})
CarouselContent.displayName = "CarouselContent"

const CarouselItem = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const { orientation } = useCarousel()

  return (
    <div
      ref={ref}
      role="group"
      aria-roledescription="slide"
      className={cn(
        "min-w-0 shrink-0 grow-0 basis-full",
        orientation === "horizontal" ? "pl-4" : "pt-4",
        className
      )}
      {...props}
    />
  )
})
CarouselItem.displayName = "CarouselItem"

const CarouselPrevious = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<typeof Button>
>(({ className, variant = "outline", size = "icon", ...props }, ref) => {
  const { orientation, scrollPrev, canScrollPrev } = useCarousel()

  return (
    <Button
      ref={ref}
      variant={variant}
      size={size}
      className={cn(
        "absolute  h-8 w-8 rounded-full",
        orientation === "horizontal"
          ? "-left-12 top-1/2 -translate-y-1/2"
          : "-top-12 left-1/2 -translate-x-1/2 rotate-90",
        className
      )}
      disabled={!canScrollPrev}
      onClick={scrollPrev}
      {...props}
    >
      <ArrowLeft className="h-4 w-4" />
      <span className="sr-only">Previous slide</span>
    </Button>
  )
})
CarouselPrevious.displayName = "CarouselPrevious"

const CarouselNext = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<typeof Button>
>(({ className, variant = "outline", size = "icon", ...props }, ref) => {
  const { orientation, scrollNext, canScrollNext } = useCarousel()

  return (
    <Button
      ref={ref}
      variant={variant}
      size={size}
      className={cn(
        "absolute h-8 w-8 rounded-full",
        orientation === "horizontal"
          ? "-right-12 top-1/2 -translate-y-1/2"
          : "-bottom-12 left-1/2 -translate-x-1/2 rotate-90",
        className
      )}
      disabled={!canScrollNext}
      onClick={scrollNext}
      {...props}
    >
      <ArrowRight className="h-4 w-4" />
      <span className="sr-only">Next slide</span>
    </Button>
  )
})
CarouselNext.displayName = "CarouselNext"

export {
  type CarouselApi,
  Carousel,
  CarouselContent,
  CarouselItem,
  CarouselPrevious,
  CarouselNext,
}
</file>

<file path="src/components/ui/chart.tsx">
import * as React from "react"
import * as RechartsPrimitive from "recharts"

import { cn } from "@/lib/utils"

// Format: { THEME_NAME: CSS_SELECTOR }
const THEMES = { light: "", dark: ".dark" } as const

export type ChartConfig = {
  [k in string]: {
    label?: React.ReactNode
    icon?: React.ComponentType
  } & (
    | { color?: string; theme?: never }
    | { color?: never; theme: Record<keyof typeof THEMES, string> }
  )
}

type ChartContextProps = {
  config: ChartConfig
}

const ChartContext = React.createContext<ChartContextProps | null>(null)

function useChart() {
  const context = React.useContext(ChartContext)

  if (!context) {
    throw new Error("useChart must be used within a <ChartContainer />")
  }

  return context
}

const ChartContainer = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    config: ChartConfig
    children: React.ComponentProps<
      typeof RechartsPrimitive.ResponsiveContainer
    >["children"]
  }
>(({ id, className, children, config, ...props }, ref) => {
  const uniqueId = React.useId()
  const chartId = `chart-${id || uniqueId.replace(/:/g, "")}`

  return (
    <ChartContext.Provider value={{ config }}>
      <div
        data-chart={chartId}
        ref={ref}
        className={cn(
          "flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none",
          className
        )}
        {...props}
      >
        <ChartStyle id={chartId} config={config} />
        <RechartsPrimitive.ResponsiveContainer>
          {children}
        </RechartsPrimitive.ResponsiveContainer>
      </div>
    </ChartContext.Provider>
  )
})
ChartContainer.displayName = "Chart"

const ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {
  const colorConfig = Object.entries(config).filter(
    ([_, config]) => config.theme || config.color
  )

  if (!colorConfig.length) {
    return null
  }

  return (
    <style
      dangerouslySetInnerHTML={{
        __html: Object.entries(THEMES)
          .map(
            ([theme, prefix]) => `
${prefix} [data-chart=${id}] {
${colorConfig
  .map(([key, itemConfig]) => {
    const color =
      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||
      itemConfig.color
    return color ? `  --color-${key}: ${color};` : null
  })
  .join("\n")}
}
`
          )
          .join("\n"),
      }}
    />
  )
}

const ChartTooltip = RechartsPrimitive.Tooltip

const ChartTooltipContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &
    React.ComponentProps<"div"> & {
      hideLabel?: boolean
      hideIndicator?: boolean
      indicator?: "line" | "dot" | "dashed"
      nameKey?: string
      labelKey?: string
    }
>(
  (
    {
      active,
      payload,
      className,
      indicator = "dot",
      hideLabel = false,
      hideIndicator = false,
      label,
      labelFormatter,
      labelClassName,
      formatter,
      color,
      nameKey,
      labelKey,
    },
    ref
  ) => {
    const { config } = useChart()

    const tooltipLabel = React.useMemo(() => {
      if (hideLabel || !payload?.length) {
        return null
      }

      const [item] = payload
      const key = `${labelKey || item.dataKey || item.name || "value"}`
      const itemConfig = getPayloadConfigFromPayload(config, item, key)
      const value =
        !labelKey && typeof label === "string"
          ? config[label as keyof typeof config]?.label || label
          : itemConfig?.label

      if (labelFormatter) {
        return (
          <div className={cn("font-medium", labelClassName)}>
            {labelFormatter(value, payload)}
          </div>
        )
      }

      if (!value) {
        return null
      }

      return <div className={cn("font-medium", labelClassName)}>{value}</div>
    }, [
      label,
      labelFormatter,
      payload,
      hideLabel,
      labelClassName,
      config,
      labelKey,
    ])

    if (!active || !payload?.length) {
      return null
    }

    const nestLabel = payload.length === 1 && indicator !== "dot"

    return (
      <div
        ref={ref}
        className={cn(
          "grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl",
          className
        )}
      >
        {!nestLabel ? tooltipLabel : null}
        <div className="grid gap-1.5">
          {payload.map((item, index) => {
            const key = `${nameKey || item.name || item.dataKey || "value"}`
            const itemConfig = getPayloadConfigFromPayload(config, item, key)
            const indicatorColor = color || item.payload.fill || item.color

            return (
              <div
                key={item.dataKey}
                className={cn(
                  "flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground",
                  indicator === "dot" && "items-center"
                )}
              >
                {formatter && item?.value !== undefined && item.name ? (
                  formatter(item.value, item.name, item, index, item.payload)
                ) : (
                  <>
                    {itemConfig?.icon ? (
                      <itemConfig.icon />
                    ) : (
                      !hideIndicator && (
                        <div
                          className={cn(
                            "shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]",
                            {
                              "h-2.5 w-2.5": indicator === "dot",
                              "w-1": indicator === "line",
                              "w-0 border-[1.5px] border-dashed bg-transparent":
                                indicator === "dashed",
                              "my-0.5": nestLabel && indicator === "dashed",
                            }
                          )}
                          style={
                            {
                              "--color-bg": indicatorColor,
                              "--color-border": indicatorColor,
                            } as React.CSSProperties
                          }
                        />
                      )
                    )}
                    <div
                      className={cn(
                        "flex flex-1 justify-between leading-none",
                        nestLabel ? "items-end" : "items-center"
                      )}
                    >
                      <div className="grid gap-1.5">
                        {nestLabel ? tooltipLabel : null}
                        <span className="text-muted-foreground">
                          {itemConfig?.label || item.name}
                        </span>
                      </div>
                      {item.value && (
                        <span className="font-mono font-medium tabular-nums text-foreground">
                          {item.value.toLocaleString()}
                        </span>
                      )}
                    </div>
                  </>
                )}
              </div>
            )
          })}
        </div>
      </div>
    )
  }
)
ChartTooltipContent.displayName = "ChartTooltip"

const ChartLegend = RechartsPrimitive.Legend

const ChartLegendContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> &
    Pick<RechartsPrimitive.LegendProps, "payload" | "verticalAlign"> & {
      hideIcon?: boolean
      nameKey?: string
    }
>(
  (
    { className, hideIcon = false, payload, verticalAlign = "bottom", nameKey },
    ref
  ) => {
    const { config } = useChart()

    if (!payload?.length) {
      return null
    }

    return (
      <div
        ref={ref}
        className={cn(
          "flex items-center justify-center gap-4",
          verticalAlign === "top" ? "pb-3" : "pt-3",
          className
        )}
      >
        {payload.map((item) => {
          const key = `${nameKey || item.dataKey || "value"}`
          const itemConfig = getPayloadConfigFromPayload(config, item, key)

          return (
            <div
              key={item.value}
              className={cn(
                "flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground"
              )}
            >
              {itemConfig?.icon && !hideIcon ? (
                <itemConfig.icon />
              ) : (
                <div
                  className="h-2 w-2 shrink-0 rounded-[2px]"
                  style={{
                    backgroundColor: item.color,
                  }}
                />
              )}
              {itemConfig?.label}
            </div>
          )
        })}
      </div>
    )
  }
)
ChartLegendContent.displayName = "ChartLegend"

// Helper to extract item config from a payload.
function getPayloadConfigFromPayload(
  config: ChartConfig,
  payload: unknown,
  key: string
) {
  if (typeof payload !== "object" || payload === null) {
    return undefined
  }

  const payloadPayload =
    "payload" in payload &&
    typeof payload.payload === "object" &&
    payload.payload !== null
      ? payload.payload
      : undefined

  let configLabelKey: string = key

  if (
    key in payload &&
    typeof payload[key as keyof typeof payload] === "string"
  ) {
    configLabelKey = payload[key as keyof typeof payload] as string
  } else if (
    payloadPayload &&
    key in payloadPayload &&
    typeof payloadPayload[key as keyof typeof payloadPayload] === "string"
  ) {
    configLabelKey = payloadPayload[
      key as keyof typeof payloadPayload
    ] as string
  }

  return configLabelKey in config
    ? config[configLabelKey]
    : config[key as keyof typeof config]
}

export {
  ChartContainer,
  ChartTooltip,
  ChartTooltipContent,
  ChartLegend,
  ChartLegendContent,
  ChartStyle,
}
</file>

<file path="src/components/ui/checkbox.tsx">
import * as React from "react"
import * as CheckboxPrimitive from "@radix-ui/react-checkbox"
import { Check } from "lucide-react"

import { cn } from "@/lib/utils"

const Checkbox = React.forwardRef<
  React.ElementRef<typeof CheckboxPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>
>(({ className, ...props }, ref) => (
  <CheckboxPrimitive.Root
    ref={ref}
    className={cn(
      "peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground",
      className
    )}
    {...props}
  >
    <CheckboxPrimitive.Indicator
      className={cn("flex items-center justify-center text-current")}
    >
      <Check className="h-4 w-4" />
    </CheckboxPrimitive.Indicator>
  </CheckboxPrimitive.Root>
))
Checkbox.displayName = CheckboxPrimitive.Root.displayName

export { Checkbox }
</file>

<file path="src/components/ui/collapsible.tsx">
import * as CollapsiblePrimitive from "@radix-ui/react-collapsible"

const Collapsible = CollapsiblePrimitive.Root

const CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger

const CollapsibleContent = CollapsiblePrimitive.CollapsibleContent

export { Collapsible, CollapsibleTrigger, CollapsibleContent }
</file>

<file path="src/components/ui/command.tsx">
import * as React from "react"
import { type DialogProps } from "@radix-ui/react-dialog"
import { Command as CommandPrimitive } from "cmdk"
import { Search } from "lucide-react"

import { cn } from "@/lib/utils"
import { Dialog, DialogContent } from "@/components/ui/dialog"

const Command = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive>
>(({ className, ...props }, ref) => (
  <CommandPrimitive
    ref={ref}
    className={cn(
      "flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground",
      className
    )}
    {...props}
  />
))
Command.displayName = CommandPrimitive.displayName

interface CommandDialogProps extends DialogProps {}

const CommandDialog = ({ children, ...props }: CommandDialogProps) => {
  return (
    <Dialog {...props}>
      <DialogContent className="overflow-hidden p-0 shadow-lg">
        <Command className="[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5">
          {children}
        </Command>
      </DialogContent>
    </Dialog>
  )
}

const CommandInput = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Input>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>
>(({ className, ...props }, ref) => (
  <div className="flex items-center border-b px-3" cmdk-input-wrapper="">
    <CommandPrimitive.Input
      ref={ref}
      className={cn(
        "flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50",
        className
      )}
      {...props}
    />
  </div>
))

CommandInput.displayName = CommandPrimitive.Input.displayName

const CommandList = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.List
    ref={ref}
    className={cn("max-h-[300px] overflow-y-auto overflow-x-hidden", className)}
    {...props}
  />
))

CommandList.displayName = CommandPrimitive.List.displayName

const CommandEmpty = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Empty>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>
>((props, ref) => (
  <CommandPrimitive.Empty
    ref={ref}
    className="py-6 text-center text-sm"
    {...props}
  />
))

CommandEmpty.displayName = CommandPrimitive.Empty.displayName

const CommandGroup = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Group>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Group
    ref={ref}
    className={cn(
      "overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground",
      className
    )}
    {...props}
  />
))

CommandGroup.displayName = CommandPrimitive.Group.displayName

const CommandSeparator = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 h-px bg-border", className)}
    {...props}
  />
))
CommandSeparator.displayName = CommandPrimitive.Separator.displayName

const CommandItem = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50",
      className
    )}
    {...props}
  />
))

CommandItem.displayName = CommandPrimitive.Item.displayName

const CommandShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn(
        "ml-auto text-xs tracking-widest text-muted-foreground",
        className
      )}
      {...props}
    />
  )
}
CommandShortcut.displayName = "CommandShortcut"

export {
  Command,
  CommandDialog,
  CommandInput,
  CommandList,
  CommandEmpty,
  CommandGroup,
  CommandItem,
  CommandShortcut,
  CommandSeparator,
}
</file>

<file path="src/components/ui/context-menu.tsx">
import * as React from "react"
import * as ContextMenuPrimitive from "@radix-ui/react-context-menu"
import { Check, ChevronRight, Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const ContextMenu = ContextMenuPrimitive.Root

const ContextMenuTrigger = ContextMenuPrimitive.Trigger

const ContextMenuGroup = ContextMenuPrimitive.Group

const ContextMenuPortal = ContextMenuPrimitive.Portal

const ContextMenuSub = ContextMenuPrimitive.Sub

const ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup

const ContextMenuSubTrigger = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <ContextMenuPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto h-4 w-4" />
  </ContextMenuPrimitive.SubTrigger>
))
ContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName

const ContextMenuSubContent = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <ContextMenuPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
ContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName

const ContextMenuContent = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>
>(({ className, ...props }, ref) => (
  <ContextMenuPrimitive.Portal>
    <ContextMenuPrimitive.Content
      ref={ref}
      className={cn(
        "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  </ContextMenuPrimitive.Portal>
))
ContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName

const ContextMenuItem = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <ContextMenuPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
ContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName

const ContextMenuCheckboxItem = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <ContextMenuPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <ContextMenuPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </ContextMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </ContextMenuPrimitive.CheckboxItem>
))
ContextMenuCheckboxItem.displayName =
  ContextMenuPrimitive.CheckboxItem.displayName

const ContextMenuRadioItem = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <ContextMenuPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <ContextMenuPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </ContextMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </ContextMenuPrimitive.RadioItem>
))
ContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName

const ContextMenuLabel = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <ContextMenuPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold text-foreground",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
ContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName

const ContextMenuSeparator = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <ContextMenuPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-border", className)}
    {...props}
  />
))
ContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName

const ContextMenuShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn(
        "ml-auto text-xs tracking-widest text-muted-foreground",
        className
      )}
      {...props}
    />
  )
}
ContextMenuShortcut.displayName = "ContextMenuShortcut"

export {
  ContextMenu,
  ContextMenuTrigger,
  ContextMenuContent,
  ContextMenuItem,
  ContextMenuCheckboxItem,
  ContextMenuRadioItem,
  ContextMenuLabel,
  ContextMenuSeparator,
  ContextMenuShortcut,
  ContextMenuGroup,
  ContextMenuPortal,
  ContextMenuSub,
  ContextMenuSubContent,
  ContextMenuSubTrigger,
  ContextMenuRadioGroup,
}
</file>

<file path="src/components/ui/dialog.tsx">
import * as React from "react"
import * as DialogPrimitive from "@radix-ui/react-dialog"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const Dialog = DialogPrimitive.Root

const DialogTrigger = DialogPrimitive.Trigger

const DialogPortal = DialogPrimitive.Portal

const DialogClose = DialogPrimitive.Close

const DialogOverlay = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Overlay
    ref={ref}
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
  />
))
DialogOverlay.displayName = DialogPrimitive.Overlay.displayName

const DialogContent = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <DialogPortal>
    <DialogOverlay />
    <DialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      {...props}
    >
      {children}
      <DialogPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </DialogPrimitive.Close>
    </DialogPrimitive.Content>
  </DialogPortal>
))
DialogContent.displayName = DialogPrimitive.Content.displayName

const DialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-1.5 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
DialogHeader.displayName = "DialogHeader"

const DialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
DialogFooter.displayName = "DialogFooter"

const DialogTitle = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Title
    ref={ref}
    className={cn(
      "text-lg font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
DialogTitle.displayName = DialogPrimitive.Title.displayName

const DialogDescription = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
DialogDescription.displayName = DialogPrimitive.Description.displayName

export {
  Dialog,
  DialogPortal,
  DialogOverlay,
  DialogClose,
  DialogTrigger,
  DialogContent,
  DialogHeader,
  DialogFooter,
  DialogTitle,
  DialogDescription,
}
</file>

<file path="src/components/ui/drawer.tsx">
import * as React from "react"
import { Drawer as DrawerPrimitive } from "vaul"

import { cn } from "@/lib/utils"

const Drawer = ({
  shouldScaleBackground = true,
  ...props
}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (
  <DrawerPrimitive.Root
    shouldScaleBackground={shouldScaleBackground}
    {...props}
  />
)
Drawer.displayName = "Drawer"

const DrawerTrigger = DrawerPrimitive.Trigger

const DrawerPortal = DrawerPrimitive.Portal

const DrawerClose = DrawerPrimitive.Close

const DrawerOverlay = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <DrawerPrimitive.Overlay
    ref={ref}
    className={cn("fixed inset-0 z-50 bg-black/80", className)}
    {...props}
  />
))
DrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName

const DrawerContent = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <DrawerPortal>
    <DrawerOverlay />
    <DrawerPrimitive.Content
      ref={ref}
      className={cn(
        "fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background",
        className
      )}
      {...props}
    >
      <div className="mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted" />
      {children}
    </DrawerPrimitive.Content>
  </DrawerPortal>
))
DrawerContent.displayName = "DrawerContent"

const DrawerHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn("grid gap-1.5 p-4 text-center sm:text-left", className)}
    {...props}
  />
)
DrawerHeader.displayName = "DrawerHeader"

const DrawerFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn("mt-auto flex flex-col gap-2 p-4", className)}
    {...props}
  />
)
DrawerFooter.displayName = "DrawerFooter"

const DrawerTitle = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>
>(({ className, ...props }, ref) => (
  <DrawerPrimitive.Title
    ref={ref}
    className={cn(
      "text-lg font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
DrawerTitle.displayName = DrawerPrimitive.Title.displayName

const DrawerDescription = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>
>(({ className, ...props }, ref) => (
  <DrawerPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
DrawerDescription.displayName = DrawerPrimitive.Description.displayName

export {
  Drawer,
  DrawerPortal,
  DrawerOverlay,
  DrawerTrigger,
  DrawerClose,
  DrawerContent,
  DrawerHeader,
  DrawerFooter,
  DrawerTitle,
  DrawerDescription,
}
</file>

<file path="src/components/ui/dropdown-menu.tsx">
import * as React from "react"
import * as DropdownMenuPrimitive from "@radix-ui/react-dropdown-menu"
import { Check, ChevronRight, Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const DropdownMenu = DropdownMenuPrimitive.Root

const DropdownMenuTrigger = DropdownMenuPrimitive.Trigger

const DropdownMenuGroup = DropdownMenuPrimitive.Group

const DropdownMenuPortal = DropdownMenuPrimitive.Portal

const DropdownMenuSub = DropdownMenuPrimitive.Sub

const DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup

const DropdownMenuSubTrigger = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <DropdownMenuPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto h-4 w-4" />
  </DropdownMenuPrimitive.SubTrigger>
))
DropdownMenuSubTrigger.displayName =
  DropdownMenuPrimitive.SubTrigger.displayName

const DropdownMenuSubContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
DropdownMenuSubContent.displayName =
  DropdownMenuPrimitive.SubContent.displayName

const DropdownMenuContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <DropdownMenuPrimitive.Portal>
    <DropdownMenuPrimitive.Content
      ref={ref}
      sideOffset={sideOffset}
      className={cn(
        "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  </DropdownMenuPrimitive.Portal>
))
DropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName

const DropdownMenuItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
DropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName

const DropdownMenuCheckboxItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <DropdownMenuPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.CheckboxItem>
))
DropdownMenuCheckboxItem.displayName =
  DropdownMenuPrimitive.CheckboxItem.displayName

const DropdownMenuRadioItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <DropdownMenuPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.RadioItem>
))
DropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName

const DropdownMenuLabel = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
DropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName

const DropdownMenuSeparator = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
DropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName

const DropdownMenuShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn("ml-auto text-xs tracking-widest opacity-60", className)}
      {...props}
    />
  )
}
DropdownMenuShortcut.displayName = "DropdownMenuShortcut"

export {
  DropdownMenu,
  DropdownMenuTrigger,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuCheckboxItem,
  DropdownMenuRadioItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuShortcut,
  DropdownMenuGroup,
  DropdownMenuPortal,
  DropdownMenuSub,
  DropdownMenuSubContent,
  DropdownMenuSubTrigger,
  DropdownMenuRadioGroup,
}
</file>

<file path="src/components/ui/form.tsx">
import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { Slot } from "@radix-ui/react-slot"
import {
  Controller,
  ControllerProps,
  FieldPath,
  FieldValues,
  FormProvider,
  useFormContext,
} from "react-hook-form"

import { cn } from "@/lib/utils"
import { Label } from "@/components/ui/label"

const Form = FormProvider

type FormFieldContextValue<
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>
> = {
  name: TName
}

const FormFieldContext = React.createContext<FormFieldContextValue>(
  {} as FormFieldContextValue
)

const FormField = <
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>
>({
  ...props
}: ControllerProps<TFieldValues, TName>) => {
  return (
    <FormFieldContext.Provider value={{ name: props.name }}>
      <Controller {...props} />
    </FormFieldContext.Provider>
  )
}

const useFormField = () => {
  const fieldContext = React.useContext(FormFieldContext)
  const itemContext = React.useContext(FormItemContext)
  const { getFieldState, formState } = useFormContext()

  const fieldState = getFieldState(fieldContext.name, formState)

  if (!fieldContext) {
    throw new Error("useFormField should be used within <FormField>")
  }

  const { id } = itemContext

  return {
    id,
    name: fieldContext.name,
    formItemId: `${id}-form-item`,
    formDescriptionId: `${id}-form-item-description`,
    formMessageId: `${id}-form-item-message`,
    ...fieldState,
  }
}

type FormItemContextValue = {
  id: string
}

const FormItemContext = React.createContext<FormItemContextValue>(
  {} as FormItemContextValue
)

const FormItem = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const id = React.useId()

  return (
    <FormItemContext.Provider value={{ id }}>
      <div ref={ref} className={cn("space-y-2", className)} {...props} />
    </FormItemContext.Provider>
  )
})
FormItem.displayName = "FormItem"

const FormLabel = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>
>(({ className, ...props }, ref) => {
  const { error, formItemId } = useFormField()

  return (
    <Label
      ref={ref}
      className={cn(error && "text-destructive", className)}
      htmlFor={formItemId}
      {...props}
    />
  )
})
FormLabel.displayName = "FormLabel"

const FormControl = React.forwardRef<
  React.ElementRef<typeof Slot>,
  React.ComponentPropsWithoutRef<typeof Slot>
>(({ ...props }, ref) => {
  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()

  return (
    <Slot
      ref={ref}
      id={formItemId}
      aria-describedby={
        !error
          ? `${formDescriptionId}`
          : `${formDescriptionId} ${formMessageId}`
      }
      aria-invalid={!!error}
      {...props}
    />
  )
})
FormControl.displayName = "FormControl"

const FormDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => {
  const { formDescriptionId } = useFormField()

  return (
    <p
      ref={ref}
      id={formDescriptionId}
      className={cn("text-sm text-muted-foreground", className)}
      {...props}
    />
  )
})
FormDescription.displayName = "FormDescription"

const FormMessage = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, children, ...props }, ref) => {
  const { error, formMessageId } = useFormField()
  const body = error ? String(error?.message) : children

  if (!body) {
    return null
  }

  return (
    <p
      ref={ref}
      id={formMessageId}
      className={cn("text-sm font-medium text-destructive", className)}
      {...props}
    >
      {body}
    </p>
  )
})
FormMessage.displayName = "FormMessage"

export {
  useFormField,
  Form,
  FormItem,
  FormLabel,
  FormControl,
  FormDescription,
  FormMessage,
  FormField,
}
</file>

<file path="src/components/ui/hover-card.tsx">
import * as React from "react"
import * as HoverCardPrimitive from "@radix-ui/react-hover-card"

import { cn } from "@/lib/utils"

const HoverCard = HoverCardPrimitive.Root

const HoverCardTrigger = HoverCardPrimitive.Trigger

const HoverCardContent = React.forwardRef<
  React.ElementRef<typeof HoverCardPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>
>(({ className, align = "center", sideOffset = 4, ...props }, ref) => (
  <HoverCardPrimitive.Content
    ref={ref}
    align={align}
    sideOffset={sideOffset}
    className={cn(
      "z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
HoverCardContent.displayName = HoverCardPrimitive.Content.displayName

export { HoverCard, HoverCardTrigger, HoverCardContent }
</file>

<file path="src/components/ui/input-otp.tsx">
import * as React from "react"
import { OTPInput, OTPInputContext } from "input-otp"
import { Dot } from "lucide-react"

import { cn } from "@/lib/utils"

const InputOTP = React.forwardRef<
  React.ElementRef<typeof OTPInput>,
  React.ComponentPropsWithoutRef<typeof OTPInput>
>(({ className, containerClassName, ...props }, ref) => (
  <OTPInput
    ref={ref}
    containerClassName={cn(
      "flex items-center gap-2 has-[:disabled]:opacity-50",
      containerClassName
    )}
    className={cn("disabled:cursor-not-allowed", className)}
    {...props}
  />
))
InputOTP.displayName = "InputOTP"

const InputOTPGroup = React.forwardRef<
  React.ElementRef<"div">,
  React.ComponentPropsWithoutRef<"div">
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("flex items-center", className)} {...props} />
))
InputOTPGroup.displayName = "InputOTPGroup"

const InputOTPSlot = React.forwardRef<
  React.ElementRef<"div">,
  React.ComponentPropsWithoutRef<"div"> & { index: number }
>(({ index, className, ...props }, ref) => {
  const inputOTPContext = React.useContext(OTPInputContext)
  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]

  return (
    <div
      ref={ref}
      className={cn(
        "relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md",
        isActive && "z-10 ring-2 ring-ring ring-offset-background",
        className
      )}
      {...props}
    >
      {char}
      {hasFakeCaret && (
        <div className="pointer-events-none absolute inset-0 flex items-center justify-center">
          <div className="h-4 w-px animate-caret-blink bg-foreground duration-1000" />
        </div>
      )}
    </div>
  )
})
InputOTPSlot.displayName = "InputOTPSlot"

const InputOTPSeparator = React.forwardRef<
  React.ElementRef<"div">,
  React.ComponentPropsWithoutRef<"div">
>(({ ...props }, ref) => (
  <div ref={ref} role="separator" {...props}>
    <Dot />
  </div>
))
InputOTPSeparator.displayName = "InputOTPSeparator"

export { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }
</file>

<file path="src/components/ui/input.tsx">
import * as React from "react"

import { cn } from "@/lib/utils"

const Input = React.forwardRef<HTMLInputElement, React.ComponentProps<"input">>(
  ({ className, type, ...props }, ref) => {
    return (
      <input
        type={type}
        className={cn(
          "flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
          className
        )}
        ref={ref}
        {...props}
      />
    )
  }
)
Input.displayName = "Input"

export { Input }
</file>

<file path="src/components/ui/label.tsx">
import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const labelVariants = cva(
  "text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
)

const Label = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &
    VariantProps<typeof labelVariants>
>(({ className, ...props }, ref) => (
  <LabelPrimitive.Root
    ref={ref}
    className={cn(labelVariants(), className)}
    {...props}
  />
))
Label.displayName = LabelPrimitive.Root.displayName

export { Label }
</file>

<file path="src/components/ui/menubar.tsx">
import * as React from "react"
import * as MenubarPrimitive from "@radix-ui/react-menubar"
import { Check, ChevronRight, Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const MenubarMenu = MenubarPrimitive.Menu

const MenubarGroup = MenubarPrimitive.Group

const MenubarPortal = MenubarPrimitive.Portal

const MenubarSub = MenubarPrimitive.Sub

const MenubarRadioGroup = MenubarPrimitive.RadioGroup

const Menubar = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.Root
    ref={ref}
    className={cn(
      "flex h-10 items-center space-x-1 rounded-md border bg-background p-1",
      className
    )}
    {...props}
  />
))
Menubar.displayName = MenubarPrimitive.Root.displayName

const MenubarTrigger = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.Trigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground",
      className
    )}
    {...props}
  />
))
MenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName

const MenubarSubTrigger = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <MenubarPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto h-4 w-4" />
  </MenubarPrimitive.SubTrigger>
))
MenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName

const MenubarSubContent = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
MenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName

const MenubarContent = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>
>(
  (
    { className, align = "start", alignOffset = -4, sideOffset = 8, ...props },
    ref
  ) => (
    <MenubarPrimitive.Portal>
      <MenubarPrimitive.Content
        ref={ref}
        align={align}
        alignOffset={alignOffset}
        sideOffset={sideOffset}
        className={cn(
          "z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
          className
        )}
        {...props}
      />
    </MenubarPrimitive.Portal>
  )
)
MenubarContent.displayName = MenubarPrimitive.Content.displayName

const MenubarItem = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <MenubarPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
MenubarItem.displayName = MenubarPrimitive.Item.displayName

const MenubarCheckboxItem = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <MenubarPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <MenubarPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </MenubarPrimitive.ItemIndicator>
    </span>
    {children}
  </MenubarPrimitive.CheckboxItem>
))
MenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName

const MenubarRadioItem = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <MenubarPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <MenubarPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </MenubarPrimitive.ItemIndicator>
    </span>
    {children}
  </MenubarPrimitive.RadioItem>
))
MenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName

const MenubarLabel = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <MenubarPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
MenubarLabel.displayName = MenubarPrimitive.Label.displayName

const MenubarSeparator = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
MenubarSeparator.displayName = MenubarPrimitive.Separator.displayName

const MenubarShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn(
        "ml-auto text-xs tracking-widest text-muted-foreground",
        className
      )}
      {...props}
    />
  )
}
MenubarShortcut.displayname = "MenubarShortcut"

export {
  Menubar,
  MenubarMenu,
  MenubarTrigger,
  MenubarContent,
  MenubarItem,
  MenubarSeparator,
  MenubarLabel,
  MenubarCheckboxItem,
  MenubarRadioGroup,
  MenubarRadioItem,
  MenubarPortal,
  MenubarSubContent,
  MenubarSubTrigger,
  MenubarGroup,
  MenubarSub,
  MenubarShortcut,
}
</file>

<file path="src/components/ui/navigation-menu.tsx">
import * as React from "react"
import * as NavigationMenuPrimitive from "@radix-ui/react-navigation-menu"
import { cva } from "class-variance-authority"
import { ChevronDown } from "lucide-react"

import { cn } from "@/lib/utils"

const NavigationMenu = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>
>(({ className, children, ...props }, ref) => (
  <NavigationMenuPrimitive.Root
    ref={ref}
    className={cn(
      "relative z-10 flex max-w-max flex-1 items-center justify-center",
      className
    )}
    {...props}
  >
    {children}
    <NavigationMenuViewport />
  </NavigationMenuPrimitive.Root>
))
NavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName

const NavigationMenuList = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.List
    ref={ref}
    className={cn(
      "group flex flex-1 list-none items-center justify-center space-x-1",
      className
    )}
    {...props}
  />
))
NavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName

const NavigationMenuItem = NavigationMenuPrimitive.Item

const navigationMenuTriggerStyle = cva(
  "group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[active]:bg-accent/50 data-[state=open]:bg-accent/50"
)

const NavigationMenuTrigger = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <NavigationMenuPrimitive.Trigger
    ref={ref}
    className={cn(navigationMenuTriggerStyle(), "group", className)}
    {...props}
  >
    {children}{" "}
    <ChevronDown
      className="relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180"
      aria-hidden="true"
    />
  </NavigationMenuPrimitive.Trigger>
))
NavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName

const NavigationMenuContent = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.Content
    ref={ref}
    className={cn(
      "left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto ",
      className
    )}
    {...props}
  />
))
NavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName

const NavigationMenuLink = NavigationMenuPrimitive.Link

const NavigationMenuViewport = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>
>(({ className, ...props }, ref) => (
  <div className={cn("absolute left-0 top-full flex justify-center")}>
    <NavigationMenuPrimitive.Viewport
      className={cn(
        "origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]",
        className
      )}
      ref={ref}
      {...props}
    />
  </div>
))
NavigationMenuViewport.displayName =
  NavigationMenuPrimitive.Viewport.displayName

const NavigationMenuIndicator = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.Indicator
    ref={ref}
    className={cn(
      "top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in",
      className
    )}
    {...props}
  >
    <div className="relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md" />
  </NavigationMenuPrimitive.Indicator>
))
NavigationMenuIndicator.displayName =
  NavigationMenuPrimitive.Indicator.displayName

export {
  navigationMenuTriggerStyle,
  NavigationMenu,
  NavigationMenuList,
  NavigationMenuItem,
  NavigationMenuContent,
  NavigationMenuTrigger,
  NavigationMenuLink,
  NavigationMenuIndicator,
  NavigationMenuViewport,
}
</file>

<file path="src/components/ui/pagination.tsx">
import * as React from "react"
import { ChevronLeft, ChevronRight, MoreHorizontal } from "lucide-react"

import { cn } from "@/lib/utils"
import { ButtonProps, buttonVariants } from "@/components/ui/button"

const Pagination = ({ className, ...props }: React.ComponentProps<"nav">) => (
  <nav
    role="navigation"
    aria-label="pagination"
    className={cn("mx-auto flex w-full justify-center", className)}
    {...props}
  />
)
Pagination.displayName = "Pagination"

const PaginationContent = React.forwardRef<
  HTMLUListElement,
  React.ComponentProps<"ul">
>(({ className, ...props }, ref) => (
  <ul
    ref={ref}
    className={cn("flex flex-row items-center gap-1", className)}
    {...props}
  />
))
PaginationContent.displayName = "PaginationContent"

const PaginationItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentProps<"li">
>(({ className, ...props }, ref) => (
  <li ref={ref} className={cn("", className)} {...props} />
))
PaginationItem.displayName = "PaginationItem"

type PaginationLinkProps = {
  isActive?: boolean
} & Pick<ButtonProps, "size"> &
  React.ComponentProps<"a">

const PaginationLink = ({
  className,
  isActive,
  size = "icon",
  ...props
}: PaginationLinkProps) => (
  <a
    aria-current={isActive ? "page" : undefined}
    className={cn(
      buttonVariants({
        variant: isActive ? "outline" : "ghost",
        size,
      }),
      className
    )}
    {...props}
  />
)
PaginationLink.displayName = "PaginationLink"

const PaginationPrevious = ({
  className,
  ...props
}: React.ComponentProps<typeof PaginationLink>) => (
  <PaginationLink
    aria-label="Go to previous page"
    size="default"
    className={cn("gap-1 pl-2.5", className)}
    {...props}
  >
    <ChevronLeft className="h-4 w-4" />
    <span>Previous</span>
  </PaginationLink>
)
PaginationPrevious.displayName = "PaginationPrevious"

const PaginationNext = ({
  className,
  ...props
}: React.ComponentProps<typeof PaginationLink>) => (
  <PaginationLink
    aria-label="Go to next page"
    size="default"
    className={cn("gap-1 pr-2.5", className)}
    {...props}
  >
    <span>Next</span>
    <ChevronRight className="h-4 w-4" />
  </PaginationLink>
)
PaginationNext.displayName = "PaginationNext"

const PaginationEllipsis = ({
  className,
  ...props
}: React.ComponentProps<"span">) => (
  <span
    aria-hidden
    className={cn("flex h-9 w-9 items-center justify-center", className)}
    {...props}
  >
    <MoreHorizontal className="h-4 w-4" />
    <span className="sr-only">More pages</span>
  </span>
)
PaginationEllipsis.displayName = "PaginationEllipsis"

export {
  Pagination,
  PaginationContent,
  PaginationEllipsis,
  PaginationItem,
  PaginationLink,
  PaginationNext,
  PaginationPrevious,
}
</file>

<file path="src/components/ui/popover.tsx">
import * as React from "react"
import * as PopoverPrimitive from "@radix-ui/react-popover"

import { cn } from "@/lib/utils"

const Popover = PopoverPrimitive.Root

const PopoverTrigger = PopoverPrimitive.Trigger

const PopoverContent = React.forwardRef<
  React.ElementRef<typeof PopoverPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>
>(({ className, align = "center", sideOffset = 4, ...props }, ref) => (
  <PopoverPrimitive.Portal>
    <PopoverPrimitive.Content
      ref={ref}
      align={align}
      sideOffset={sideOffset}
      className={cn(
        "z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  </PopoverPrimitive.Portal>
))
PopoverContent.displayName = PopoverPrimitive.Content.displayName

export { Popover, PopoverTrigger, PopoverContent }
</file>

<file path="src/components/ui/progress.tsx">
import * as React from "react"
import * as ProgressPrimitive from "@radix-ui/react-progress"

import { cn } from "@/lib/utils"

const Progress = React.forwardRef<
  React.ElementRef<typeof ProgressPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>
>(({ className, value, ...props }, ref) => (
  <ProgressPrimitive.Root
    ref={ref}
    className={cn(
      "relative h-4 w-full overflow-hidden rounded-full bg-secondary",
      className
    )}
    {...props}
  >
    <ProgressPrimitive.Indicator
      className="h-full w-full flex-1 bg-primary transition-all"
      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}
    />
  </ProgressPrimitive.Root>
))
Progress.displayName = ProgressPrimitive.Root.displayName

export { Progress }
</file>

<file path="src/components/ui/radio-group.tsx">
import * as React from "react"
import * as RadioGroupPrimitive from "@radix-ui/react-radio-group"
import { Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const RadioGroup = React.forwardRef<
  React.ElementRef<typeof RadioGroupPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>
>(({ className, ...props }, ref) => {
  return (
    <RadioGroupPrimitive.Root
      className={cn("grid gap-2", className)}
      {...props}
      ref={ref}
    />
  )
})
RadioGroup.displayName = RadioGroupPrimitive.Root.displayName

const RadioGroupItem = React.forwardRef<
  React.ElementRef<typeof RadioGroupPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>
>(({ className, ...props }, ref) => {
  return (
    <RadioGroupPrimitive.Item
      ref={ref}
      className={cn(
        "aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
        className
      )}
      {...props}
    >
      <RadioGroupPrimitive.Indicator className="flex items-center justify-center">
        <Circle className="h-2.5 w-2.5 fill-current text-current" />
      </RadioGroupPrimitive.Indicator>
    </RadioGroupPrimitive.Item>
  )
})
RadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName

export { RadioGroup, RadioGroupItem }
</file>

<file path="src/components/ui/resizable.tsx">
import { GripVertical } from "lucide-react"
import * as ResizablePrimitive from "react-resizable-panels"

import { cn } from "@/lib/utils"

const ResizablePanelGroup = ({
  className,
  ...props
}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (
  <ResizablePrimitive.PanelGroup
    className={cn(
      "flex h-full w-full data-[panel-group-direction=vertical]:flex-col",
      className
    )}
    {...props}
  />
)

const ResizablePanel = ResizablePrimitive.Panel

const ResizableHandle = ({
  withHandle,
  className,
  ...props
}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {
  withHandle?: boolean
}) => (
  <ResizablePrimitive.PanelResizeHandle
    className={cn(
      "relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90",
      className
    )}
    {...props}
  >
    {withHandle && (
      <div className="z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border">
        <GripVertical className="h-2.5 w-2.5" />
      </div>
    )}
  </ResizablePrimitive.PanelResizeHandle>
)

export { ResizablePanelGroup, ResizablePanel, ResizableHandle }
</file>

<file path="src/components/ui/scroll-area.tsx">
import * as React from "react"
import * as ScrollAreaPrimitive from "@radix-ui/react-scroll-area"

import { cn } from "@/lib/utils"

const ScrollArea = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>
>(({ className, children, ...props }, ref) => (
  <ScrollAreaPrimitive.Root
    ref={ref}
    className={cn("relative overflow-hidden", className)}
    {...props}
  >
    <ScrollAreaPrimitive.Viewport className="h-full w-full rounded-[inherit]">
      {children}
    </ScrollAreaPrimitive.Viewport>
    <ScrollBar />
    <ScrollAreaPrimitive.Corner />
  </ScrollAreaPrimitive.Root>
))
ScrollArea.displayName = ScrollAreaPrimitive.Root.displayName

const ScrollBar = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>
>(({ className, orientation = "vertical", ...props }, ref) => (
  <ScrollAreaPrimitive.ScrollAreaScrollbar
    ref={ref}
    orientation={orientation}
    className={cn(
      "flex touch-none select-none transition-colors",
      orientation === "vertical" &&
        "h-full w-2.5 border-l border-l-transparent p-[1px]",
      orientation === "horizontal" &&
        "h-2.5 flex-col border-t border-t-transparent p-[1px]",
      className
    )}
    {...props}
  >
    <ScrollAreaPrimitive.ScrollAreaThumb className="relative flex-1 rounded-full bg-border" />
  </ScrollAreaPrimitive.ScrollAreaScrollbar>
))
ScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName

export { ScrollArea, ScrollBar }
</file>

<file path="src/components/ui/separator.tsx">
import * as React from "react"
import * as SeparatorPrimitive from "@radix-ui/react-separator"

import { cn } from "@/lib/utils"

const Separator = React.forwardRef<
  React.ElementRef<typeof SeparatorPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>
>(
  (
    { className, orientation = "horizontal", decorative = true, ...props },
    ref
  ) => (
    <SeparatorPrimitive.Root
      ref={ref}
      decorative={decorative}
      orientation={orientation}
      className={cn(
        "shrink-0 bg-border",
        orientation === "horizontal" ? "h-[1px] w-full" : "h-full w-[1px]",
        className
      )}
      {...props}
    />
  )
)
Separator.displayName = SeparatorPrimitive.Root.displayName

export { Separator }
</file>

<file path="src/components/ui/sheet.tsx">
import * as SheetPrimitive from "@radix-ui/react-dialog"
import { cva, type VariantProps } from "class-variance-authority"
import { X } from "lucide-react"
import * as React from "react"

import { cn } from "@/lib/utils"

const Sheet = SheetPrimitive.Root

const SheetTrigger = SheetPrimitive.Trigger

const SheetClose = SheetPrimitive.Close

const SheetPortal = SheetPrimitive.Portal

const SheetOverlay = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Overlay
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
    ref={ref}
  />
))
SheetOverlay.displayName = SheetPrimitive.Overlay.displayName

const sheetVariants = cva(
  "fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500",
  {
    variants: {
      side: {
        top: "inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top",
        bottom:
          "inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom",
        left: "inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm",
        right:
          "inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm",
      },
    },
    defaultVariants: {
      side: "right",
    },
  }
)

interface SheetContentProps
  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,
  VariantProps<typeof sheetVariants> { }

const SheetContent = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Content>,
  SheetContentProps
>(({ side = "right", className, children, ...props }, ref) => (
  <SheetPortal>
    <SheetOverlay />
    <SheetPrimitive.Content
      ref={ref}
      className={cn(sheetVariants({ side }), className)}
      {...props}
    >
      {children}
      <SheetPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </SheetPrimitive.Close>
    </SheetPrimitive.Content>
  </SheetPortal>
))
SheetContent.displayName = SheetPrimitive.Content.displayName

const SheetHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-2 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
SheetHeader.displayName = "SheetHeader"

const SheetFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
SheetFooter.displayName = "SheetFooter"

const SheetTitle = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Title
    ref={ref}
    className={cn("text-lg font-semibold text-foreground", className)}
    {...props}
  />
))
SheetTitle.displayName = SheetPrimitive.Title.displayName

const SheetDescription = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
SheetDescription.displayName = SheetPrimitive.Description.displayName

export {
  Sheet, SheetClose,
  SheetContent, SheetDescription, SheetFooter, SheetHeader, SheetOverlay, SheetPortal, SheetTitle, SheetTrigger
}
</file>

<file path="src/components/ui/sidebar.tsx">
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { VariantProps, cva } from "class-variance-authority"
import { PanelLeft } from "lucide-react"

import { useIsMobile } from "@/hooks/use-mobile"
import { cn } from "@/lib/utils"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Separator } from "@/components/ui/separator"
import { Sheet, SheetContent } from "@/components/ui/sheet"
import { Skeleton } from "@/components/ui/skeleton"
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "@/components/ui/tooltip"

const SIDEBAR_COOKIE_NAME = "sidebar:state"
const SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7
const SIDEBAR_WIDTH = "16rem"
const SIDEBAR_WIDTH_MOBILE = "18rem"
const SIDEBAR_WIDTH_ICON = "3rem"
const SIDEBAR_KEYBOARD_SHORTCUT = "b"

type SidebarContext = {
  state: "expanded" | "collapsed"
  open: boolean
  setOpen: (open: boolean) => void
  openMobile: boolean
  setOpenMobile: (open: boolean) => void
  isMobile: boolean
  toggleSidebar: () => void
}

const SidebarContext = React.createContext<SidebarContext | null>(null)

function useSidebar() {
  const context = React.useContext(SidebarContext)
  if (!context) {
    throw new Error("useSidebar must be used within a SidebarProvider.")
  }

  return context
}

const SidebarProvider = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    defaultOpen?: boolean
    open?: boolean
    onOpenChange?: (open: boolean) => void
  }
>(
  (
    {
      defaultOpen = true,
      open: openProp,
      onOpenChange: setOpenProp,
      className,
      style,
      children,
      ...props
    },
    ref
  ) => {
    const isMobile = useIsMobile()
    const [openMobile, setOpenMobile] = React.useState(false)

    // This is the internal state of the sidebar.
    // We use openProp and setOpenProp for control from outside the component.
    const [_open, _setOpen] = React.useState(defaultOpen)
    const open = openProp ?? _open
    const setOpen = React.useCallback(
      (value: boolean | ((value: boolean) => boolean)) => {
        const openState = typeof value === "function" ? value(open) : value
        if (setOpenProp) {
          setOpenProp(openState)
        } else {
          _setOpen(openState)
        }

        // This sets the cookie to keep the sidebar state.
        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`
      },
      [setOpenProp, open]
    )

    // Helper to toggle the sidebar.
    const toggleSidebar = React.useCallback(() => {
      return isMobile
        ? setOpenMobile((open) => !open)
        : setOpen((open) => !open)
    }, [isMobile, setOpen, setOpenMobile])

    // Adds a keyboard shortcut to toggle the sidebar.
    React.useEffect(() => {
      const handleKeyDown = (event: KeyboardEvent) => {
        if (
          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&
          (event.metaKey || event.ctrlKey)
        ) {
          event.preventDefault()
          toggleSidebar()
        }
      }

      window.addEventListener("keydown", handleKeyDown)
      return () => window.removeEventListener("keydown", handleKeyDown)
    }, [toggleSidebar])

    // We add a state so that we can do data-state="expanded" or "collapsed".
    // This makes it easier to style the sidebar with Tailwind classes.
    const state = open ? "expanded" : "collapsed"

    const contextValue = React.useMemo<SidebarContext>(
      () => ({
        state,
        open,
        setOpen,
        isMobile,
        openMobile,
        setOpenMobile,
        toggleSidebar,
      }),
      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]
    )

    return (
      <SidebarContext.Provider value={contextValue}>
        <TooltipProvider delayDuration={0}>
          <div
            style={
              {
                "--sidebar-width": SIDEBAR_WIDTH,
                "--sidebar-width-icon": SIDEBAR_WIDTH_ICON,
                ...style,
              } as React.CSSProperties
            }
            className={cn(
              "group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar",
              className
            )}
            ref={ref}
            {...props}
          >
            {children}
          </div>
        </TooltipProvider>
      </SidebarContext.Provider>
    )
  }
)
SidebarProvider.displayName = "SidebarProvider"

const Sidebar = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    side?: "left" | "right"
    variant?: "sidebar" | "floating" | "inset"
    collapsible?: "offcanvas" | "icon" | "none"
  }
>(
  (
    {
      side = "left",
      variant = "sidebar",
      collapsible = "offcanvas",
      className,
      children,
      ...props
    },
    ref
  ) => {
    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()

    if (collapsible === "none") {
      return (
        <div
          className={cn(
            "flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground",
            className
          )}
          ref={ref}
          {...props}
        >
          {children}
        </div>
      )
    }

    if (isMobile) {
      return (
        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>
          <SheetContent
            data-sidebar="sidebar"
            data-mobile="true"
            className="w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden"
            style={
              {
                "--sidebar-width": SIDEBAR_WIDTH_MOBILE,
              } as React.CSSProperties
            }
            side={side}
          >
            <div className="flex h-full w-full flex-col">{children}</div>
          </SheetContent>
        </Sheet>
      )
    }

    return (
      <div
        ref={ref}
        className="group peer hidden md:block text-sidebar-foreground"
        data-state={state}
        data-collapsible={state === "collapsed" ? collapsible : ""}
        data-variant={variant}
        data-side={side}
      >
        {/* This is what handles the sidebar gap on desktop */}
        <div
          className={cn(
            "duration-200 relative h-svh w-[--sidebar-width] bg-transparent transition-[width] ease-linear",
            "group-data-[collapsible=offcanvas]:w-0",
            "group-data-[side=right]:rotate-180",
            variant === "floating" || variant === "inset"
              ? "group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]"
              : "group-data-[collapsible=icon]:w-[--sidebar-width-icon]"
          )}
        />
        <div
          className={cn(
            "duration-200 fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] ease-linear md:flex",
            side === "left"
              ? "left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]"
              : "right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]",
            // Adjust the padding for floating and inset variants.
            variant === "floating" || variant === "inset"
              ? "p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]"
              : "group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l",
            className
          )}
          {...props}
        >
          <div
            data-sidebar="sidebar"
            className="flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow"
          >
            {children}
          </div>
        </div>
      </div>
    )
  }
)
Sidebar.displayName = "Sidebar"

const SidebarTrigger = React.forwardRef<
  React.ElementRef<typeof Button>,
  React.ComponentProps<typeof Button>
>(({ className, onClick, ...props }, ref) => {
  const { toggleSidebar } = useSidebar()

  return (
    <Button
      ref={ref}
      data-sidebar="trigger"
      variant="ghost"
      size="icon"
      className={cn("h-7 w-7", className)}
      onClick={(event) => {
        onClick?.(event)
        toggleSidebar()
      }}
      {...props}
    >
      <PanelLeft />
      <span className="sr-only">Toggle Sidebar</span>
    </Button>
  )
})
SidebarTrigger.displayName = "SidebarTrigger"

const SidebarRail = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button">
>(({ className, ...props }, ref) => {
  const { toggleSidebar } = useSidebar()

  return (
    <button
      ref={ref}
      data-sidebar="rail"
      aria-label="Toggle Sidebar"
      tabIndex={-1}
      onClick={toggleSidebar}
      title="Toggle Sidebar"
      className={cn(
        "absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex",
        "[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize",
        "[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize",
        "group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar",
        "[[data-side=left][data-collapsible=offcanvas]_&]:-right-2",
        "[[data-side=right][data-collapsible=offcanvas]_&]:-left-2",
        className
      )}
      {...props}
    />
  )
})
SidebarRail.displayName = "SidebarRail"

const SidebarInset = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"main">
>(({ className, ...props }, ref) => {
  return (
    <main
      ref={ref}
      className={cn(
        "relative flex min-h-svh flex-1 flex-col bg-background",
        "peer-data-[variant=inset]:min-h-[calc(100svh-theme(spacing.4))] md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow",
        className
      )}
      {...props}
    />
  )
})
SidebarInset.displayName = "SidebarInset"

const SidebarInput = React.forwardRef<
  React.ElementRef<typeof Input>,
  React.ComponentProps<typeof Input>
>(({ className, ...props }, ref) => {
  return (
    <Input
      ref={ref}
      data-sidebar="input"
      className={cn(
        "h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring",
        className
      )}
      {...props}
    />
  )
})
SidebarInput.displayName = "SidebarInput"

const SidebarHeader = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="header"
      className={cn("flex flex-col gap-2 p-2", className)}
      {...props}
    />
  )
})
SidebarHeader.displayName = "SidebarHeader"

const SidebarFooter = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="footer"
      className={cn("flex flex-col gap-2 p-2", className)}
      {...props}
    />
  )
})
SidebarFooter.displayName = "SidebarFooter"

const SidebarSeparator = React.forwardRef<
  React.ElementRef<typeof Separator>,
  React.ComponentProps<typeof Separator>
>(({ className, ...props }, ref) => {
  return (
    <Separator
      ref={ref}
      data-sidebar="separator"
      className={cn("mx-2 w-auto bg-sidebar-border", className)}
      {...props}
    />
  )
})
SidebarSeparator.displayName = "SidebarSeparator"

const SidebarContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="content"
      className={cn(
        "flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden",
        className
      )}
      {...props}
    />
  )
})
SidebarContent.displayName = "SidebarContent"

const SidebarGroup = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="group"
      className={cn("relative flex w-full min-w-0 flex-col p-2", className)}
      {...props}
    />
  )
})
SidebarGroup.displayName = "SidebarGroup"

const SidebarGroupLabel = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & { asChild?: boolean }
>(({ className, asChild = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "div"

  return (
    <Comp
      ref={ref}
      data-sidebar="group-label"
      className={cn(
        "duration-200 flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opa] ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0",
        "group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0",
        className
      )}
      {...props}
    />
  )
})
SidebarGroupLabel.displayName = "SidebarGroupLabel"

const SidebarGroupAction = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button"> & { asChild?: boolean }
>(({ className, asChild = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "button"

  return (
    <Comp
      ref={ref}
      data-sidebar="group-action"
      className={cn(
        "absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0",
        // Increases the hit area of the button on mobile.
        "after:absolute after:-inset-2 after:md:hidden",
        "group-data-[collapsible=icon]:hidden",
        className
      )}
      {...props}
    />
  )
})
SidebarGroupAction.displayName = "SidebarGroupAction"

const SidebarGroupContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    data-sidebar="group-content"
    className={cn("w-full text-sm", className)}
    {...props}
  />
))
SidebarGroupContent.displayName = "SidebarGroupContent"

const SidebarMenu = React.forwardRef<
  HTMLUListElement,
  React.ComponentProps<"ul">
>(({ className, ...props }, ref) => (
  <ul
    ref={ref}
    data-sidebar="menu"
    className={cn("flex w-full min-w-0 flex-col gap-1", className)}
    {...props}
  />
))
SidebarMenu.displayName = "SidebarMenu"

const SidebarMenuItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentProps<"li">
>(({ className, ...props }, ref) => (
  <li
    ref={ref}
    data-sidebar="menu-item"
    className={cn("group/menu-item relative", className)}
    {...props}
  />
))
SidebarMenuItem.displayName = "SidebarMenuItem"

const sidebarMenuButtonVariants = cva(
  "peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0",
  {
    variants: {
      variant: {
        default: "hover:bg-sidebar-accent hover:text-sidebar-accent-foreground",
        outline:
          "bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]",
      },
      size: {
        default: "h-8 text-sm",
        sm: "h-7 text-xs",
        lg: "h-12 text-sm group-data-[collapsible=icon]:!p-0",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

const SidebarMenuButton = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button"> & {
    asChild?: boolean
    isActive?: boolean
    tooltip?: string | React.ComponentProps<typeof TooltipContent>
  } & VariantProps<typeof sidebarMenuButtonVariants>
>(
  (
    {
      asChild = false,
      isActive = false,
      variant = "default",
      size = "default",
      tooltip,
      className,
      ...props
    },
    ref
  ) => {
    const Comp = asChild ? Slot : "button"
    const { isMobile, state } = useSidebar()

    const button = (
      <Comp
        ref={ref}
        data-sidebar="menu-button"
        data-size={size}
        data-active={isActive}
        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}
        {...props}
      />
    )

    if (!tooltip) {
      return button
    }

    if (typeof tooltip === "string") {
      tooltip = {
        children: tooltip,
      }
    }

    return (
      <Tooltip>
        <TooltipTrigger asChild>{button}</TooltipTrigger>
        <TooltipContent
          side="right"
          align="center"
          hidden={state !== "collapsed" || isMobile}
          {...tooltip}
        />
      </Tooltip>
    )
  }
)
SidebarMenuButton.displayName = "SidebarMenuButton"

const SidebarMenuAction = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button"> & {
    asChild?: boolean
    showOnHover?: boolean
  }
>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "button"

  return (
    <Comp
      ref={ref}
      data-sidebar="menu-action"
      className={cn(
        "absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0",
        // Increases the hit area of the button on mobile.
        "after:absolute after:-inset-2 after:md:hidden",
        "peer-data-[size=sm]/menu-button:top-1",
        "peer-data-[size=default]/menu-button:top-1.5",
        "peer-data-[size=lg]/menu-button:top-2.5",
        "group-data-[collapsible=icon]:hidden",
        showOnHover &&
          "group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0",
        className
      )}
      {...props}
    />
  )
})
SidebarMenuAction.displayName = "SidebarMenuAction"

const SidebarMenuBadge = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    data-sidebar="menu-badge"
    className={cn(
      "absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground select-none pointer-events-none",
      "peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground",
      "peer-data-[size=sm]/menu-button:top-1",
      "peer-data-[size=default]/menu-button:top-1.5",
      "peer-data-[size=lg]/menu-button:top-2.5",
      "group-data-[collapsible=icon]:hidden",
      className
    )}
    {...props}
  />
))
SidebarMenuBadge.displayName = "SidebarMenuBadge"

const SidebarMenuSkeleton = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    showIcon?: boolean
  }
>(({ className, showIcon = false, ...props }, ref) => {
  // Random width between 50 to 90%.
  const width = React.useMemo(() => {
    return `${Math.floor(Math.random() * 40) + 50}%`
  }, [])

  return (
    <div
      ref={ref}
      data-sidebar="menu-skeleton"
      className={cn("rounded-md h-8 flex gap-2 px-2 items-center", className)}
      {...props}
    >
      {showIcon && (
        <Skeleton
          className="size-4 rounded-md"
          data-sidebar="menu-skeleton-icon"
        />
      )}
      <Skeleton
        className="h-4 flex-1 max-w-[--skeleton-width]"
        data-sidebar="menu-skeleton-text"
        style={
          {
            "--skeleton-width": width,
          } as React.CSSProperties
        }
      />
    </div>
  )
})
SidebarMenuSkeleton.displayName = "SidebarMenuSkeleton"

const SidebarMenuSub = React.forwardRef<
  HTMLUListElement,
  React.ComponentProps<"ul">
>(({ className, ...props }, ref) => (
  <ul
    ref={ref}
    data-sidebar="menu-sub"
    className={cn(
      "mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5",
      "group-data-[collapsible=icon]:hidden",
      className
    )}
    {...props}
  />
))
SidebarMenuSub.displayName = "SidebarMenuSub"

const SidebarMenuSubItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentProps<"li">
>(({ ...props }, ref) => <li ref={ref} {...props} />)
SidebarMenuSubItem.displayName = "SidebarMenuSubItem"

const SidebarMenuSubButton = React.forwardRef<
  HTMLAnchorElement,
  React.ComponentProps<"a"> & {
    asChild?: boolean
    size?: "sm" | "md"
    isActive?: boolean
  }
>(({ asChild = false, size = "md", isActive, className, ...props }, ref) => {
  const Comp = asChild ? Slot : "a"

  return (
    <Comp
      ref={ref}
      data-sidebar="menu-sub-button"
      data-size={size}
      data-active={isActive}
      className={cn(
        "flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground",
        "data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground",
        size === "sm" && "text-xs",
        size === "md" && "text-sm",
        "group-data-[collapsible=icon]:hidden",
        className
      )}
      {...props}
    />
  )
})
SidebarMenuSubButton.displayName = "SidebarMenuSubButton"

export {
  Sidebar,
  SidebarContent,
  SidebarFooter,
  SidebarGroup,
  SidebarGroupAction,
  SidebarGroupContent,
  SidebarGroupLabel,
  SidebarHeader,
  SidebarInput,
  SidebarInset,
  SidebarMenu,
  SidebarMenuAction,
  SidebarMenuBadge,
  SidebarMenuButton,
  SidebarMenuItem,
  SidebarMenuSkeleton,
  SidebarMenuSub,
  SidebarMenuSubButton,
  SidebarMenuSubItem,
  SidebarProvider,
  SidebarRail,
  SidebarSeparator,
  SidebarTrigger,
  useSidebar,
}
</file>

<file path="src/components/ui/skeleton.tsx">
import { cn } from "@/lib/utils"

function Skeleton({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) {
  return (
    <div
      className={cn("animate-pulse rounded-md bg-muted", className)}
      {...props}
    />
  )
}

export { Skeleton }
</file>

<file path="src/components/ui/slider.tsx">
import * as React from "react"
import * as SliderPrimitive from "@radix-ui/react-slider"

import { cn } from "@/lib/utils"

const Slider = React.forwardRef<
  React.ElementRef<typeof SliderPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>
>(({ className, ...props }, ref) => (
  <SliderPrimitive.Root
    ref={ref}
    className={cn(
      "relative flex w-full touch-none select-none items-center",
      className
    )}
    {...props}
  >
    <SliderPrimitive.Track className="relative h-2 w-full grow overflow-hidden rounded-full bg-secondary">
      <SliderPrimitive.Range className="absolute h-full bg-primary" />
    </SliderPrimitive.Track>
    <SliderPrimitive.Thumb className="block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50" />
  </SliderPrimitive.Root>
))
Slider.displayName = SliderPrimitive.Root.displayName

export { Slider }
</file>

<file path="src/components/ui/sonner.tsx">
import { useTheme } from "next-themes"
import { Toaster as Sonner, toast } from "sonner"

type ToasterProps = React.ComponentProps<typeof Sonner>

const Toaster = ({ ...props }: ToasterProps) => {
  const { theme = "system" } = useTheme()

  return (
    <Sonner
      theme={theme as ToasterProps["theme"]}
      className="toaster group"
      toastOptions={{
        classNames: {
          toast:
            "group toast group-[.toaster]:bg-background group-[.toaster]:text-foreground group-[.toaster]:border-border group-[.toaster]:shadow-lg",
          description: "group-[.toast]:text-muted-foreground",
          actionButton:
            "group-[.toast]:bg-primary group-[.toast]:text-primary-foreground",
          cancelButton:
            "group-[.toast]:bg-muted group-[.toast]:text-muted-foreground",
        },
      }}
      {...props}
    />
  )
}

export { Toaster, toast }
</file>

<file path="src/components/ui/switch.tsx">
import * as React from "react"
import * as SwitchPrimitives from "@radix-ui/react-switch"

import { cn } from "@/lib/utils"

const Switch = React.forwardRef<
  React.ElementRef<typeof SwitchPrimitives.Root>,
  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>
>(({ className, ...props }, ref) => (
  <SwitchPrimitives.Root
    className={cn(
      "peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input",
      className
    )}
    {...props}
    ref={ref}
  >
    <SwitchPrimitives.Thumb
      className={cn(
        "pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0"
      )}
    />
  </SwitchPrimitives.Root>
))
Switch.displayName = SwitchPrimitives.Root.displayName

export { Switch }
</file>

<file path="src/components/ui/table.tsx">
import * as React from "react"

import { cn } from "@/lib/utils"

const Table = React.forwardRef<
  HTMLTableElement,
  React.HTMLAttributes<HTMLTableElement>
>(({ className, ...props }, ref) => (
  <div className="relative w-full overflow-auto">
    <table
      ref={ref}
      className={cn("w-full caption-bottom text-sm", className)}
      {...props}
    />
  </div>
))
Table.displayName = "Table"

const TableHeader = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <thead ref={ref} className={cn("[&_tr]:border-b", className)} {...props} />
))
TableHeader.displayName = "TableHeader"

const TableBody = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <tbody
    ref={ref}
    className={cn("[&_tr:last-child]:border-0", className)}
    {...props}
  />
))
TableBody.displayName = "TableBody"

const TableFooter = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <tfoot
    ref={ref}
    className={cn(
      "border-t bg-muted/50 font-medium [&>tr]:last:border-b-0",
      className
    )}
    {...props}
  />
))
TableFooter.displayName = "TableFooter"

const TableRow = React.forwardRef<
  HTMLTableRowElement,
  React.HTMLAttributes<HTMLTableRowElement>
>(({ className, ...props }, ref) => (
  <tr
    ref={ref}
    className={cn(
      "border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted",
      className
    )}
    {...props}
  />
))
TableRow.displayName = "TableRow"

const TableHead = React.forwardRef<
  HTMLTableCellElement,
  React.ThHTMLAttributes<HTMLTableCellElement>
>(({ className, ...props }, ref) => (
  <th
    ref={ref}
    className={cn(
      "h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0",
      className
    )}
    {...props}
  />
))
TableHead.displayName = "TableHead"

const TableCell = React.forwardRef<
  HTMLTableCellElement,
  React.TdHTMLAttributes<HTMLTableCellElement>
>(({ className, ...props }, ref) => (
  <td
    ref={ref}
    className={cn("p-4 align-middle [&:has([role=checkbox])]:pr-0", className)}
    {...props}
  />
))
TableCell.displayName = "TableCell"

const TableCaption = React.forwardRef<
  HTMLTableCaptionElement,
  React.HTMLAttributes<HTMLTableCaptionElement>
>(({ className, ...props }, ref) => (
  <caption
    ref={ref}
    className={cn("mt-4 text-sm text-muted-foreground", className)}
    {...props}
  />
))
TableCaption.displayName = "TableCaption"

export {
  Table,
  TableHeader,
  TableBody,
  TableFooter,
  TableHead,
  TableRow,
  TableCell,
  TableCaption,
}
</file>

<file path="src/components/ui/tabs.tsx">
import * as React from "react"
import * as TabsPrimitive from "@radix-ui/react-tabs"

import { cn } from "@/lib/utils"

const Tabs = TabsPrimitive.Root

const TabsList = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.List
    ref={ref}
    className={cn(
      "inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground",
      className
    )}
    {...props}
  />
))
TabsList.displayName = TabsPrimitive.List.displayName

const TabsTrigger = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Trigger
    ref={ref}
    className={cn(
      "inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm",
      className
    )}
    {...props}
  />
))
TabsTrigger.displayName = TabsPrimitive.Trigger.displayName

const TabsContent = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Content
    ref={ref}
    className={cn(
      "mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2",
      className
    )}
    {...props}
  />
))
TabsContent.displayName = TabsPrimitive.Content.displayName

export { Tabs, TabsList, TabsTrigger, TabsContent }
</file>

<file path="src/components/ui/toast.tsx">
import * as React from "react"
import * as ToastPrimitives from "@radix-ui/react-toast"
import { cva, type VariantProps } from "class-variance-authority"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const ToastProvider = ToastPrimitives.Provider

const ToastViewport = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Viewport>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Viewport
    ref={ref}
    className={cn(
      "fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]",
      className
    )}
    {...props}
  />
))
ToastViewport.displayName = ToastPrimitives.Viewport.displayName

const toastVariants = cva(
  "group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full",
  {
    variants: {
      variant: {
        default: "border bg-background text-foreground",
        destructive:
          "destructive group border-destructive bg-destructive text-destructive-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

const Toast = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Root>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &
    VariantProps<typeof toastVariants>
>(({ className, variant, ...props }, ref) => {
  return (
    <ToastPrimitives.Root
      ref={ref}
      className={cn(toastVariants({ variant }), className)}
      {...props}
    />
  )
})
Toast.displayName = ToastPrimitives.Root.displayName

const ToastAction = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Action>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Action
    ref={ref}
    className={cn(
      "inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive",
      className
    )}
    {...props}
  />
))
ToastAction.displayName = ToastPrimitives.Action.displayName

const ToastClose = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Close>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Close
    ref={ref}
    className={cn(
      "absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600",
      className
    )}
    toast-close=""
    {...props}
  >
    <X className="h-4 w-4" />
  </ToastPrimitives.Close>
))
ToastClose.displayName = ToastPrimitives.Close.displayName

const ToastTitle = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Title>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Title
    ref={ref}
    className={cn("text-sm font-semibold", className)}
    {...props}
  />
))
ToastTitle.displayName = ToastPrimitives.Title.displayName

const ToastDescription = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Description>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Description
    ref={ref}
    className={cn("text-sm opacity-90", className)}
    {...props}
  />
))
ToastDescription.displayName = ToastPrimitives.Description.displayName

type ToastProps = React.ComponentPropsWithoutRef<typeof Toast>

type ToastActionElement = React.ReactElement<typeof ToastAction>

export {
  type ToastProps,
  type ToastActionElement,
  ToastProvider,
  ToastViewport,
  Toast,
  ToastTitle,
  ToastDescription,
  ToastClose,
  ToastAction,
}
</file>

<file path="src/components/ui/toaster.tsx">
import { useToast } from "@/hooks/use-toast"
import {
  Toast,
  ToastClose,
  ToastDescription,
  ToastProvider,
  ToastTitle,
  ToastViewport,
} from "@/components/ui/toast"

export function Toaster() {
  const { toasts } = useToast()

  return (
    <ToastProvider>
      {toasts.map(function ({ id, title, description, action, ...props }) {
        return (
          <Toast key={id} {...props}>
            <div className="grid gap-1">
              {title && <ToastTitle>{title}</ToastTitle>}
              {description && (
                <ToastDescription>{description}</ToastDescription>
              )}
            </div>
            {action}
            <ToastClose />
          </Toast>
        )
      })}
      <ToastViewport />
    </ToastProvider>
  )
}
</file>

<file path="src/components/ui/toggle-group.tsx">
import * as React from "react"
import * as ToggleGroupPrimitive from "@radix-ui/react-toggle-group"
import { type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"
import { toggleVariants } from "@/components/ui/toggle"

const ToggleGroupContext = React.createContext<
  VariantProps<typeof toggleVariants>
>({
  size: "default",
  variant: "default",
})

const ToggleGroup = React.forwardRef<
  React.ElementRef<typeof ToggleGroupPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &
    VariantProps<typeof toggleVariants>
>(({ className, variant, size, children, ...props }, ref) => (
  <ToggleGroupPrimitive.Root
    ref={ref}
    className={cn("flex items-center justify-center gap-1", className)}
    {...props}
  >
    <ToggleGroupContext.Provider value={{ variant, size }}>
      {children}
    </ToggleGroupContext.Provider>
  </ToggleGroupPrimitive.Root>
))

ToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName

const ToggleGroupItem = React.forwardRef<
  React.ElementRef<typeof ToggleGroupPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &
    VariantProps<typeof toggleVariants>
>(({ className, children, variant, size, ...props }, ref) => {
  const context = React.useContext(ToggleGroupContext)

  return (
    <ToggleGroupPrimitive.Item
      ref={ref}
      className={cn(
        toggleVariants({
          variant: context.variant || variant,
          size: context.size || size,
        }),
        className
      )}
      {...props}
    >
      {children}
    </ToggleGroupPrimitive.Item>
  )
})

ToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName

export { ToggleGroup, ToggleGroupItem }
</file>

<file path="src/components/ui/toggle.tsx">
import * as React from "react"
import * as TogglePrimitive from "@radix-ui/react-toggle"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const toggleVariants = cva(
  "inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground",
  {
    variants: {
      variant: {
        default: "bg-transparent",
        outline:
          "border border-input bg-transparent hover:bg-accent hover:text-accent-foreground",
      },
      size: {
        default: "h-10 px-3",
        sm: "h-9 px-2.5",
        lg: "h-11 px-5",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

const Toggle = React.forwardRef<
  React.ElementRef<typeof TogglePrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &
    VariantProps<typeof toggleVariants>
>(({ className, variant, size, ...props }, ref) => (
  <TogglePrimitive.Root
    ref={ref}
    className={cn(toggleVariants({ variant, size, className }))}
    {...props}
  />
))

Toggle.displayName = TogglePrimitive.Root.displayName

export { Toggle, toggleVariants }
</file>

<file path="src/components/ui/tooltip.tsx">
import * as React from "react"
import * as TooltipPrimitive from "@radix-ui/react-tooltip"

import { cn } from "@/lib/utils"

const TooltipProvider = TooltipPrimitive.Provider

const Tooltip = TooltipPrimitive.Root

const TooltipTrigger = TooltipPrimitive.Trigger

const TooltipContent = React.forwardRef<
  React.ElementRef<typeof TooltipPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <TooltipPrimitive.Content
    ref={ref}
    sideOffset={sideOffset}
    className={cn(
      "z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
TooltipContent.displayName = TooltipPrimitive.Content.displayName

export { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }
</file>

<file path="src/components/ui/use-toast.ts">
import { useToast, toast } from "@/hooks/use-toast";

export { useToast, toast };
</file>

<file path="src/components/AdminAuth.tsx">
import { useState } from "react";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";

interface AdminAuthProps {
  onAuthenticated: () => void;
}

export default function AdminAuth({ onAuthenticated }: AdminAuthProps) {
  const [password, setPassword] = useState("");
  const [error, setError] = useState("");
  const [loading, setLoading] = useState(false);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setLoading(true);
    setError("");

    // Simple password check - in production, this should be more secure
    if (password === "local825admin") {
      localStorage.setItem("adminAuthenticated", "true");
      onAuthenticated();
    } else {
      setError("Invalid password");
    }
    
    setLoading(false);
  };

  return (
    <div className="min-h-screen flex items-center justify-center bg-background p-4">
      <Card className="w-full max-w-md">
        <CardHeader>
          <CardTitle>Admin Access</CardTitle>
          <CardDescription>Enter the admin password to continue</CardDescription>
        </CardHeader>
        <CardContent>
          <form onSubmit={handleSubmit} className="space-y-4">
            <div>
              <Input
                type="password"
                placeholder="Enter admin password"
                value={password}
                onChange={(e) => setPassword(e.target.value)}
                className="w-full"
              />
            </div>
            {error && (
              <p className="text-sm text-destructive">{error}</p>
            )}
            <Button type="submit" className="w-full" disabled={loading}>
              {loading ? "Authenticating..." : "Access Admin Panel"}
            </Button>
          </form>
        </CardContent>
      </Card>
    </div>
  );
}
</file>

<file path="src/components/BenefitCard.tsx">
import { Benefit } from "@/lib/benefits";
import { motion } from "framer-motion";

interface BenefitCardProps {
  benefit: Benefit;
  delay?: number;
}

export default function BenefitCard({ benefit, delay = 0 }: BenefitCardProps) {
  return (
    <motion.div
      initial={{ opacity: 0, y: 10 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ duration: 0.5, delay }}
      className="glass rounded-2xl p-6 backdrop-blur-lg dark:bg-slate-800/50 bg-white/70 shadow-lg"
    >
      <h3 className="text-xl font-semibold mb-2">{benefit.title}</h3>
      <p className="text-muted-foreground">{benefit.description}</p>
    </motion.div>
  );
}
</file>

<file path="src/components/CommandBar.tsx">
import { useState, useEffect, forwardRef, useImperativeHandle } from "react";
import { useNavigate } from "react-router-dom";
import { Command, CommandInput, CommandList, CommandEmpty, CommandGroup, CommandItem } from "@/components/ui/command";
import { Dialog, DialogContent } from "@/components/ui/dialog";
import { Search } from "lucide-react";

interface Company {
  id: string;
  name: string;
  fullName?: string;
  ticker?: string;
  exchange?: string;
  logo?: string;
}

interface CommandBarProps {
  isOpen: boolean;
  setIsOpen: (open: boolean) => void;
}

export interface CommandBarRef {
  openCommandBar: () => void;
}

const CommandBar = forwardRef<CommandBarRef, CommandBarProps>(({ isOpen, setIsOpen }, ref) => {
  const [search, setSearch] = useState("");
  const navigate = useNavigate();
  
  useImperativeHandle(ref, () => ({
    openCommandBar: () => setIsOpen(true)
  }));
  
  // Recent and popular companies examples
  const recentCompanies: Company[] = [
    { id: "1", name: "SHOP", fullName: "Shopify Inc", exchange: "Nasdaq", logo: "https://logo.clearbit.com/shopify.com" },
    { id: "2", name: "MSFT", fullName: "Microsoft Corporation", exchange: "Nasdaq", logo: "https://logo.clearbit.com/microsoft.com" },
    { id: "3", name: "NVDA", fullName: "NVIDIA Corp", exchange: "Nasdaq", logo: "https://logo.clearbit.com/nvidia.com" },
  ];
  
  const popularCompanies: Company[] = [
    { id: "4", name: "F", fullName: "Ford Motor Co.", exchange: "NYSE", logo: "https://logo.clearbit.com/ford.com" },
    { id: "5", name: "TSLA", fullName: "Tesla Inc", exchange: "Nasdaq", logo: "https://logo.clearbit.com/tesla.com" },
  ];

  // Toggle the command dialog with keyboard shortcut
  useEffect(() => {
    const down = (e: KeyboardEvent) => {
      if (e.key === "k" && (e.metaKey || e.ctrlKey)) {
        e.preventDefault();
        setIsOpen(!isOpen);
      }
    };
    
    document.addEventListener("keydown", down);
    return () => document.removeEventListener("keydown", down);
  }, [isOpen, setIsOpen]);

  // Handle company selection
  const handleSelectCompany = (company: Company) => {
    console.log("Selected company:", company);
    setIsOpen(false);
    navigate("/companies");
  };

  return (
    <Dialog open={isOpen} onOpenChange={setIsOpen}>
      <DialogContent className="sm:max-w-[850px] p-0 gap-0 bg-[#111111] border-[#333333] text-white">
        <Command className="rounded-lg border-0 shadow-md bg-[#111111]">
          <div className="flex items-center border-b border-[#333333] px-3 py-3">
            <div className="bg-[#222222] rounded-full p-1 mr-2">
              <Search className="h-4 w-4 text-[#777777]" />
            </div>
            <CommandInput 
              placeholder="Search companies" 
              className="h-10 text-white placeholder:text-[#777777] bg-transparent"
              value={search}
              onValueChange={setSearch}
            />
            <kbd className="hidden md:inline-flex ml-auto gap-1 text-xs bg-[#222222] text-[#999999] px-1.5 py-0.5 rounded border border-[#444444]">
              <span className="text-xs">⌘</span>K
            </kbd>
          </div>
          <CommandList className="max-h-[400px] overflow-y-auto p-2 scrollbar-none bg-[#111111]">
            <CommandEmpty className="py-6 text-[#777777]">
              No companies found.
            </CommandEmpty>
            
            <CommandGroup heading="Recent searches" className="text-[#777777] text-sm pb-2">
              {recentCompanies.map((company) => (
                <CommandItem 
                  key={company.id} 
                  className="flex items-center justify-between py-3 px-2 cursor-pointer hover:bg-[#222222] rounded-md transition-colors"
                  onSelect={() => handleSelectCompany(company)}
                >
                  <div className="flex items-center gap-3">
                    {company.logo ? (
                      <img 
                        src={company.logo} 
                        alt={company.name} 
                        className="h-6 w-6 rounded-full bg-[#222222]" 
                      />
                    ) : (
                      <div className="h-6 w-6 rounded-full bg-[#222222] flex items-center justify-center">
                        <span className="text-xs">{company.name.charAt(0)}</span>
                      </div>
                    )}
                    <div className="flex gap-2 items-center">
                      <span className="font-medium">{company.name}</span>
                      <span className="text-[#777777]">{company.fullName}</span>
                    </div>
                  </div>
                  <div className="bg-[#222222] text-[#999999] text-xs py-0.5 px-2 rounded-md">
                    {company.exchange}
                  </div>
                </CommandItem>
              ))}
            </CommandGroup>
            
            <CommandGroup heading="Popular" className="text-[#777777] text-sm pt-4 pb-2">
              {popularCompanies.map((company) => (
                <CommandItem 
                  key={company.id} 
                  className="flex items-center justify-between py-3 px-2 cursor-pointer hover:bg-[#222222] rounded-md transition-colors"
                  onSelect={() => handleSelectCompany(company)}
                >
                  <div className="flex items-center gap-3">
                    {company.logo ? (
                      <img 
                        src={company.logo} 
                        alt={company.name} 
                        className="h-6 w-6 rounded-full bg-[#222222]" 
                      />
                    ) : (
                      <div className="h-6 w-6 rounded-full bg-[#222222] flex items-center justify-center">
                        <span className="text-xs">{company.name.charAt(0)}</span>
                      </div>
                    )}
                    <div className="flex gap-2 items-center">
                      <span className="font-medium">{company.name}</span>
                      <span className="text-[#777777]">{company.fullName}</span>
                    </div>
                  </div>
                  <div className="bg-[#222222] text-[#999999] text-xs py-0.5 px-2 rounded-md">
                    {company.exchange}
                  </div>
                </CommandItem>
              ))}
            </CommandGroup>
          </CommandList>
        </Command>
      </DialogContent>
    </Dialog>
  );
});

CommandBar.displayName = "CommandBar";

export default CommandBar;
</file>

<file path="src/components/CompanyMetrics.tsx">
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Building2, TrendingUp, Users, MapPin, ArrowRight } from "lucide-react";
import { Link } from "react-router-dom";

export default function CompanyMetrics() {
  return (
    <div className="space-y-6">
      <div>
        <h2 className="text-2xl font-bold mb-2">Company Metrics</h2>
        <p className="text-muted-foreground">
          Track key statistics and information about construction companies in your area. 
          This overview shows you which companies are being monitored, how many active feeds 
          you have running, and your geographic focus areas for intelligence gathering.
        </p>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Total Companies</CardTitle>
            <Building2 className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">30</div>
            <p className="text-xs text-muted-foreground">
              Actively tracked companies
            </p>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Active Feeds</CardTitle>
            <TrendingUp className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">30</div>
            <p className="text-xs text-muted-foreground">
              Bulldozer feeds syncing
            </p>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Coverage Area</CardTitle>
            <MapPin className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">NY/NJ</div>
            <p className="text-xs text-muted-foreground">
              Primary focus regions
            </p>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Target Audience</CardTitle>
            <Users className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">IUOE</div>
            <p className="text-xs text-muted-foreground">
              Operating Engineers Local 825
            </p>
          </CardContent>
        </Card>
      </div>

      <Card>
        <CardHeader>
          <div className="flex items-center justify-between">
            <div>
              <CardTitle>Tracked Companies</CardTitle>
              <p className="text-sm text-muted-foreground mt-1">
                Construction companies currently being monitored for labor union news, job postings, 
                and industry insights. These companies are automatically scanned for relevant updates.
              </p>
            </div>
            <Button asChild className="flex items-center gap-2">
              <Link to="/companies">
                Manage Companies
                <ArrowRight className="h-4 w-4" />
              </Link>
            </Button>
          </div>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
            {[
              "ValveTek Utility Services Inc",
              "Esposito Construction LLC",
              "JA Neary Corp",
              "Think Pavers",
              "Insituform Technologies LLC",
              "Kyle Conti Construction",
              "Roy Rock",
              "NJG Outdoor Management LLC",
              "Krutis Excavating",
              "Joe Maggio Construction",
              "A-Tech Services",
              "Stilo Paving & Excavating",
              "GMP Construction",
              "Caravella Construction",
              "Royce Construction",
              "A Colarusso & Son",
              "Boyce Excavating",
              "Arold Construction",
              "J Mullen & Son",
              "Hydrovac Construction",
              "Precision Pipeline Solutions",
              "Ward Pavements Inc",
              "Pro-Site Work",
              "Whispering Pines Construction",
              "Cioffi Services",
              "Sullivan Construction Group",
              "D&L Paving",
              "Lakeside Construction",
              "Harrington Construction",
              "Rosario Contracting Corp",
              "William J Guarini Inc"
            ].map((company, index) => (
              <div key={index} className="flex items-center space-x-2 p-2 rounded-lg bg-muted/50">
                <Building2 className="h-4 w-4 text-muted-foreground" />
                <span className="text-sm">{company}</span>
              </div>
            ))}
          </div>
          
          <div className="mt-6 p-4 bg-gradient-to-r from-primary/5 to-primary/10 rounded-lg border border-primary/20">
            <div className="flex items-center justify-between">
              <div>
                <h3 className="font-semibold text-primary">Need to manage your companies?</h3>
                <p className="text-sm text-muted-foreground mt-1">
                  Set priorities, request new companies, and organize your tracking preferences.
                </p>
              </div>
              <Button asChild variant="outline" className="border-primary/20 hover:bg-primary/10">
                <Link to="/companies" className="flex items-center gap-2">
                  Full Management
                  <ArrowRight className="h-4 w-4" />
                </Link>
              </Button>
            </div>
          </div>
        </CardContent>
      </Card>
    </div>
  );
}
</file>

<file path="src/components/CompanySelector.tsx">
import { useState, useEffect } from "react";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { Command, CommandEmpty, CommandGroup, CommandInput, CommandItem, CommandList } from "@/components/ui/command";
import { Popover, PopoverContent, PopoverTrigger } from "@/components/ui/popover";
import { Check, ChevronsUpDown, Plus } from "lucide-react";
import { cn } from "@/lib/utils";
import { useMainCompanies } from "@/hooks/useMainCompanies";
import { useNewsSourceCompanies } from "@/hooks/useNewsSourceCompanies";

interface Company {
  id: string;
  name: string;
  address?: string;
  type: 'main' | 'news_source' | 'custom';
}

interface CompanySelectorProps {
  value: string;
  address: string;
  onValueChange: (name: string, address: string) => void;
  onAddCustom: () => void;
}

export default function CompanySelector({ value, address, onValueChange, onAddCustom }: CompanySelectorProps) {
  const [open, setOpen] = useState(false);
  const [companies, setCompanies] = useState<Company[]>([]);
  
  const { companies: mainCompanies, loading: mainLoading } = useMainCompanies();
  const { companies: newsSourceCompanies, loading: newsLoading } = useNewsSourceCompanies();

  useEffect(() => {
    const allCompanies: Company[] = [
      ...mainCompanies.map(c => ({
        id: c.id,
        name: c.name,
        address: c.description || '',
        type: 'main' as const
      })),
      ...newsSourceCompanies.map(c => ({
        id: c.id,
        name: c.name,
        address: '',
        type: 'news_source' as const
      }))
    ];

    // Remove duplicates based on name (case insensitive)
    const uniqueCompanies = allCompanies.filter((company, index, arr) => 
      arr.findIndex(c => c.name.toLowerCase() === company.name.toLowerCase()) === index
    );

    // Sort alphabetically
    uniqueCompanies.sort((a, b) => a.name.localeCompare(b.name));
    
    setCompanies(uniqueCompanies);
  }, [mainCompanies, newsSourceCompanies]);

  const handleSelect = (company: Company) => {
    onValueChange(company.name, company.address || '');
    setOpen(false);
  };

  return (
    <div className="space-y-2">
      <Popover open={open} onOpenChange={setOpen}>
        <PopoverTrigger asChild>
          <Button
            variant="outline"
            role="combobox"
            aria-expanded={open}
            className="w-full justify-between"
          >
            {value || "Select a company or add new..."}
            <ChevronsUpDown className="ml-2 h-4 w-4 shrink-0 opacity-50" />
          </Button>
        </PopoverTrigger>
        <PopoverContent className="w-full p-0">
          <Command>
            <CommandInput placeholder="Search companies..." />
            <CommandList>
              <CommandEmpty>
                <div className="p-2 text-center">
                  <p className="text-sm text-muted-foreground mb-2">No companies found</p>
                  <Button 
                    variant="outline" 
                    size="sm" 
                    onClick={() => {
                      setOpen(false);
                      onAddCustom();
                    }}
                    className="gap-2"
                  >
                    <Plus className="h-4 w-4" />
                    Add New Company
                  </Button>
                </div>
              </CommandEmpty>
              
              <CommandGroup heading="Available Companies">
                {companies.map((company) => (
                  <CommandItem
                    key={company.id}
                    value={company.name}
                    onSelect={() => handleSelect(company)}
                    className="flex items-center justify-between"
                  >
                    <div className="flex flex-col">
                      <span>{company.name}</span>
                      {company.address && (
                        <span className="text-xs text-muted-foreground">{company.address}</span>
                      )}
                    </div>
                    <div className="flex items-center gap-2">
                      <span className="text-xs bg-secondary px-1.5 py-0.5 rounded">
                        {company.type === 'main' ? 'Main' : 'News'}
                      </span>
                      <Check
                        className={cn(
                          "h-4 w-4",
                          value === company.name ? "opacity-100" : "opacity-0"
                        )}
                      />
                    </div>
                  </CommandItem>
                ))}
              </CommandGroup>
              
              <CommandGroup>
                <CommandItem
                  onSelect={() => {
                    setOpen(false);
                    onAddCustom();
                  }}
                  className="bg-muted/50 font-medium"
                >
                  <Plus className="mr-2 h-4 w-4" />
                  Add New Custom Company
                </CommandItem>
              </CommandGroup>
            </CommandList>
          </Command>
        </PopoverContent>
      </Popover>
      
      {(mainLoading || newsLoading) && (
        <p className="text-xs text-muted-foreground">Loading companies...</p>
      )}
    </div>
  );
}
</file>

<file path="src/components/CustomCompanyForm.tsx">
import { useState } from "react";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Button } from "@/components/ui/button";
import { DialogHeader, DialogTitle, DialogFooter } from "@/components/ui/dialog";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Company } from "@/hooks/useTrackedCompanies";

interface CustomCompanyFormProps {
  onSubmit: (company: { name: string; address: string; priority: Company['priority'] }) => void;
  onCancel: () => void;
}

export default function CustomCompanyForm({ onSubmit, onCancel }: CustomCompanyFormProps) {
  const [companyName, setCompanyName] = useState("");
  const [companyAddress, setCompanyAddress] = useState("");
  const [companyPriority, setCompanyPriority] = useState<Company["priority"]>("interested");

  const handleSubmit = () => {
    if (!companyName.trim()) return;
    
    onSubmit({
      name: companyName,
      address: companyAddress,
      priority: companyPriority,
    });
  };

  return (
    <>
      <DialogHeader>
        <DialogTitle>Add New Custom Company</DialogTitle>
      </DialogHeader>
      <div className="space-y-4 py-4">
        <div className="space-y-2">
          <Label htmlFor="company-name">Company Name</Label>
          <Input
            id="company-name"
            placeholder="Enter company name"
            value={companyName}
            onChange={(e) => setCompanyName(e.target.value)}
          />
        </div>
        
        <div className="space-y-2">
          <Label htmlFor="company-address">Company Address (optional)</Label>
          <Input
            id="company-address"
            placeholder="Enter company address"
            value={companyAddress}
            onChange={(e) => setCompanyAddress(e.target.value)}
          />
        </div>
        
        <div className="space-y-2">
          <Label>Priority</Label>
          <Select value={companyPriority} onValueChange={(value) => setCompanyPriority(value as Company['priority'])}>
            <SelectTrigger>
              <SelectValue placeholder="Select priority" />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="low">Low</SelectItem>
              <SelectItem value="interested">Interested</SelectItem>
              <SelectItem value="high">High</SelectItem>
              <SelectItem value="do_not_work">Do Not Work</SelectItem>
              <SelectItem value="agreement_ended">Agreement Ended</SelectItem>
            </SelectContent>
          </Select>
        </div>
      </div>
      <DialogFooter>
        <Button variant="outline" onClick={onCancel}>Cancel</Button>
        <Button onClick={handleSubmit} disabled={!companyName.trim()}>Add Company</Button>
      </DialogFooter>
    </>
  );
}
</file>

<file path="src/components/DataPointsTabs.tsx">
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Building2, Rss } from "lucide-react";
import CompanyMetrics from "@/components/CompanyMetrics";
import BulldozerFeeds from "@/components/BulldozerFeeds";

export default function DataPointsTabs() {
  return (
    <Tabs defaultValue="company" className="w-full">
      <TabsList className="grid w-full grid-cols-1 sm:grid-cols-2 h-auto sm:h-12 gap-1 sm:gap-0 p-1 bg-gray-100/80 dark:bg-gray-800/50 backdrop-blur-sm rounded-2xl">
        <TabsTrigger 
          value="company" 
          className="flex items-center justify-center gap-2 text-sm sm:text-base py-4 sm:py-2 px-3 min-h-[52px] sm:min-h-0 rounded-xl data-[state=active]:bg-white data-[state=active]:shadow-sm dark:data-[state=active]:bg-gray-700 transition-all duration-200"
        >
          <Building2 className="h-4 w-4 sm:h-5 sm:w-5 flex-shrink-0" />
          <span className="font-medium">Companies</span>
        </TabsTrigger>
        <TabsTrigger 
          value="feeds" 
          className="flex items-center justify-center gap-2 text-sm sm:text-base py-4 sm:py-2 px-3 min-h-[52px] sm:min-h-0 rounded-xl data-[state=active]:bg-white data-[state=active]:shadow-sm dark:data-[state=active]:bg-gray-700 transition-all duration-200"
        >
          <Rss className="h-4 w-4 sm:h-5 sm:w-5 flex-shrink-0" />
          <span className="font-medium">Feeds</span>
        </TabsTrigger>
      </TabsList>
      
      <TabsContent value="company" className="mt-6 sm:mt-8">
        <CompanyMetrics />
      </TabsContent>
      
      <TabsContent value="feeds" className="mt-6 sm:mt-8">
        <BulldozerFeeds />
      </TabsContent>
    </Tabs>
  );
}
</file>

<file path="src/components/FadingBenefits.tsx">
import { useState, useEffect } from "react";
import { Benefit, benefits } from "@/lib/benefits";
import { motion, AnimatePresence } from "framer-motion";

export default function FadingBenefits() {
  const [currentIndex, setCurrentIndex] = useState(0);
  const [currentBenefit, setCurrentBenefit] = useState<Benefit | null>(
    benefits.length > 0 ? benefits[0] : null
  );
  
  useEffect(() => {
    if (benefits.length === 0) return;
    
    const interval = setInterval(() => {
      setCurrentIndex((prevIndex) => {
        const nextIndex = (prevIndex + 1) % benefits.length;
        return nextIndex;
      });
    }, 5000);
    
    return () => clearInterval(interval);
  }, []);
  
  useEffect(() => {
    if (benefits.length > 0) {
      setCurrentBenefit(benefits[currentIndex]);
    }
  }, [currentIndex]);
  
  // Don't render anything if there are no benefits
  if (benefits.length === 0 || !currentBenefit) {
    return null;
  }
  
  return (
    <div className="h-[120px] relative">
      <AnimatePresence mode="wait">
        <motion.div
          key={currentBenefit.id}
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          exit={{ opacity: 0, y: -20 }}
          transition={{ duration: 0.5 }}
          className="glass rounded-xl p-4 text-center"
        >
          <h3 className="text-lg font-semibold mb-1">{currentBenefit.title}</h3>
          <p className="text-sm text-muted-foreground">{currentBenefit.description}</p>
        </motion.div>
      </AnimatePresence>
      
      <div className="flex justify-center space-x-1 mt-3">
        {benefits.map((benefit, idx) => (
          <button
            key={benefit.id}
            onClick={() => setCurrentIndex(idx)}
            className={`h-1.5 rounded-full transition-all duration-300 ${
              idx === currentIndex ? "w-4 bg-primary" : "w-1.5 bg-muted"
            }`}
            aria-label={`View benefit ${benefit.title}`}
          />
        ))}
      </div>
    </div>
  );
}
</file>

<file path="src/components/ImportResearchModal.tsx">
import { useState, useRef } from "react";
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter } from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Upload, FileText, X, Loader2 } from "lucide-react";
import { toast } from "sonner";

interface ImportResearchModalProps {
  isOpen: boolean;
  onClose: () => void;
  onImport: (companyName: string, reportContent: string) => Promise<any>;
  importing: boolean;
}

export default function ImportResearchModal({ 
  isOpen, 
  onClose, 
  onImport, 
  importing 
}: ImportResearchModalProps) {
  const [companyName, setCompanyName] = useState("");
  const [reportContent, setReportContent] = useState("");
  const [activeTab, setActiveTab] = useState("text");
  const fileInputRef = useRef<HTMLInputElement>(null);

  const handleFileUpload = (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (!file) return;

    // Check file type
    if (!file.name.endsWith('.txt') && !file.name.endsWith('.md')) {
      toast.error('Please upload a .txt or .md file');
      return;
    }

    // Check file size (max 1MB)
    if (file.size > 1024 * 1024) {
      toast.error('File size must be less than 1MB');
      return;
    }

    const reader = new FileReader();
    reader.onload = (e) => {
      const content = e.target?.result as string;
      setReportContent(content);
      
      // Try to extract company name from filename
      const fileName = file.name.replace(/\.(txt|md)$/i, '');
      if (!companyName) {
        setCompanyName(fileName);
      }
      
      toast.success('File uploaded successfully');
    };
    reader.readAsText(file);
  };

  const handleImport = async () => {
    if (!companyName.trim()) {
      toast.error('Please enter a company name');
      return;
    }

    if (!reportContent.trim()) {
      toast.error('Please provide report content');
      return;
    }

    const result = await onImport(companyName.trim(), reportContent.trim());
    if (result) {
      handleClose();
    }
  };

  const handleClose = () => {
    setCompanyName("");
    setReportContent("");
    setActiveTab("text");
    if (fileInputRef.current) {
      fileInputRef.current.value = "";
    }
    onClose();
  };

  const handlePaste = (e: React.ClipboardEvent) => {
    const pastedText = e.clipboardData.getData('text');
    if (pastedText) {
      setReportContent(prev => prev + pastedText);
    }
  };

  return (
    <Dialog open={isOpen} onOpenChange={handleClose}>
      <DialogContent className="max-w-4xl max-h-[90vh] overflow-y-auto">
        <DialogHeader>
          <DialogTitle className="flex items-center gap-2">
            <FileText className="h-5 w-5" />
            Import Company Research Report
          </DialogTitle>
        </DialogHeader>

        <div className="space-y-6">
          {/* Company Name Input */}
          <div className="space-y-2">
            <Label htmlFor="company-name">Company Name *</Label>
            <Input
              id="company-name"
              placeholder="Enter company name (e.g., D & L Paving Contractors, Inc.)"
              value={companyName}
              onChange={(e) => setCompanyName(e.target.value)}
              disabled={importing}
            />
          </div>

          {/* Import Method Tabs */}
          <Tabs value={activeTab} onValueChange={setActiveTab}>
            <TabsList className="grid w-full grid-cols-2">
              <TabsTrigger value="text">Text Input</TabsTrigger>
              <TabsTrigger value="file">File Upload</TabsTrigger>
            </TabsList>

            <TabsContent value="text" className="space-y-4">
              <div className="space-y-2">
                <Label htmlFor="report-content">Report Content *</Label>
                <Textarea
                  id="report-content"
                  placeholder="Paste your company research report here..."
                  value={reportContent}
                  onChange={(e) => setReportContent(e.target.value)}
                  onPaste={handlePaste}
                  disabled={importing}
                  className="min-h-[400px] font-mono text-sm"
                />
                <p className="text-xs text-muted-foreground">
                  You can paste your report content here. The AI will process and format it properly.
                </p>
              </div>
            </TabsContent>

            <TabsContent value="file" className="space-y-4">
              <div className="space-y-2">
                <Label>Upload Report File</Label>
                <div className="border-2 border-dashed border-gray-300 dark:border-gray-600 rounded-lg p-6 text-center">
                  <Upload className="h-8 w-8 text-gray-400 mx-auto mb-2" />
                  <p className="text-sm text-gray-600 dark:text-gray-400 mb-2">
                    Upload a .txt or .md file containing your research report
                  </p>
                  <Button
                    variant="outline"
                    onClick={() => fileInputRef.current?.click()}
                    disabled={importing}
                  >
                    Choose File
                  </Button>
                  <input
                    ref={fileInputRef}
                    type="file"
                    accept=".txt,.md"
                    onChange={handleFileUpload}
                    className="hidden"
                  />
                </div>
                {reportContent && (
                  <div className="space-y-2">
                    <Label>File Content Preview</Label>
                    <Textarea
                      value={reportContent}
                      onChange={(e) => setReportContent(e.target.value)}
                      disabled={importing}
                      className="min-h-[200px] font-mono text-sm"
                    />
                  </div>
                )}
              </div>
            </TabsContent>
          </Tabs>

          {/* Instructions */}
          <div className="bg-blue-50 dark:bg-blue-900/20 border border-blue-200 dark:border-blue-800 rounded-lg p-4">
            <h4 className="font-medium text-blue-900 dark:text-blue-100 mb-2">
              Import Instructions
            </h4>
            <ul className="text-sm text-blue-800 dark:text-blue-200 space-y-1">
              <li>• The AI will process and enhance your report to ensure proper formatting</li>
              <li>• All original information will be preserved and enhanced</li>
              <li>• Missing sections will be added if needed</li>
              <li>• The report will be formatted for Local 825 union intelligence</li>
              <li>• If a report already exists for this company, it will be updated</li>
            </ul>
          </div>
        </div>

        <DialogFooter>
          <Button variant="outline" onClick={handleClose} disabled={importing}>
            Cancel
          </Button>
          <Button 
            onClick={handleImport} 
            disabled={importing || !companyName.trim() || !reportContent.trim()}
          >
            {importing ? (
              <>
                <Loader2 className="h-4 w-4 mr-2 animate-spin" />
                Processing...
              </>
            ) : (
              <>
                <FileText className="h-4 w-4 mr-2" />
                Import Report
              </>
            )}
          </Button>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  );
}
</file>

<file path="src/components/ProtectedRoute.tsx">
import { ReactNode } from 'react';
import { Navigate } from 'react-router-dom';
import { useAuth } from '@/contexts/AuthContext';

interface ProtectedRouteProps {
  children: ReactNode;
}

export default function ProtectedRoute({ children }: ProtectedRouteProps) {
  const { user, loading } = useAuth();

  if (loading) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="animate-spin rounded-full h-32 w-32 border-b-2 border-primary"></div>
      </div>
    );
  }

  if (!user) {
    return <Navigate to="/auth" replace />;
  }

  return <>{children}</>;
}
</file>

<file path="src/contexts/AuthContext.tsx">
import { createContext, useContext, useState, useEffect, ReactNode } from "react";
import { supabase } from "@/integrations/supabase/client";
import { Session, User } from "@supabase/supabase-js";

interface UserProfile {
  id: string;
  username: string | null;
  avatar_url: string | null;
  onboarding_completed: boolean | null;
  industry: string | null;
  organization_size: string | null;
  role: string | null;
  priority: string | null;
  goals: string[] | null;
}

interface AuthContextType {
  session: Session | null;
  user: User | null;
  profile: UserProfile | null;
  loading: boolean;
  signOut: () => Promise<void>;
  logout: () => Promise<void>;
  refreshProfile: () => Promise<void>;
}

const AuthContext = createContext<AuthContextType | undefined>(undefined);

export function AuthProvider({ children }: { children: ReactNode }) {
  const [session, setSession] = useState<Session | null>(null);
  const [user, setUser] = useState<User | null>(null);
  const [profile, setProfile] = useState<UserProfile | null>(null);
  const [loading, setLoading] = useState(true);

  // Helper function to clean up auth state
  const cleanupAuthState = () => {
    localStorage.removeItem('supabase.auth.token');
    Object.keys(localStorage).forEach((key) => {
      if (key.startsWith('supabase.auth.') || key.includes('sb-')) {
        localStorage.removeItem(key);
      }
    });
    Object.keys(sessionStorage || {}).forEach((key) => {
      if (key.startsWith('supabase.auth.') || key.includes('sb-')) {
        sessionStorage.removeItem(key);
      }
    });
  };

  // Fetch user profile data from profiles table
  const fetchProfile = async (userId: string) => {
    try {
      const { data, error } = await supabase
        .from("profiles")
        .select("id, username, avatar_url, onboarding_completed, industry, organization_size, role, priority, goals")
        .eq("id", userId)
        .single();
      
      if (error) {
        console.error("Error fetching profile:", error);
        return null;
      }
      
      // Convert goals from JSON to string array if needed
      if (data) {
        return {
          ...data,
          goals: Array.isArray(data.goals) ? data.goals : data.goals ? [data.goals.toString()] : null
        } as UserProfile;
      }
      
      return null;
    } catch (error) {
      console.error("Error fetching profile:", error);
      return null;
    }
  };

  // Function to refresh profile data
  const refreshProfile = async () => {
    if (user) {
      const profileData = await fetchProfile(user.id);
      if (profileData) setProfile(profileData);
    }
  };

  useEffect(() => {
    let mounted = true;

    const initializeAuth = async () => {
      try {
        // First, set up the auth state listener
        const { data: { subscription } } = supabase.auth.onAuthStateChange(
          async (event, session) => {
            console.log('Auth state change:', event, session?.user?.id);
            
            if (!mounted) return;

            setSession(session);
            setUser(session?.user ?? null);
            
            if (session?.user) {
              // Use setTimeout to prevent potential deadlocks
              setTimeout(async () => {
                if (mounted) {
                  const profileData = await fetchProfile(session.user.id);
                  if (profileData && mounted) {
                    setProfile(profileData);
                  }
                  if (mounted) {
                    setLoading(false);
                  }
                }
              }, 0);
            } else {
              setProfile(null);
              if (mounted) {
                setLoading(false);
              }
            }
          }
        );

        // Then check for existing session
        const { data: { session }, error } = await supabase.auth.getSession();
        
        if (error) {
          console.error('Session check error:', error);
          cleanupAuthState();
        }
        
        if (mounted) {
          setSession(session);
          setUser(session?.user ?? null);
          
          if (session?.user) {
            const profileData = await fetchProfile(session.user.id);
            if (profileData) {
              setProfile(profileData);
            }
          }
          
          setLoading(false);
        }

        return () => {
          subscription.unsubscribe();
        };
      } catch (error) {
        console.error('Auth initialization error:', error);
        if (mounted) {
          cleanupAuthState();
          setSession(null);
          setUser(null);
          setProfile(null);
          setLoading(false);
        }
      }
    };

    const cleanup = initializeAuth();

    return () => {
      mounted = false;
      cleanup.then((unsubscribe) => unsubscribe && unsubscribe());
    };
  }, []);

  const signOut = async () => {
    setLoading(true);
    try {
      // First clean up auth state
      cleanupAuthState();
      
      // Then sign out
      await supabase.auth.signOut({ scope: 'global' });
      
      // Reset state
      setUser(null);
      setSession(null);
      setProfile(null);
      
      // Force page reload to ensure clean state
      setTimeout(() => {
        window.location.href = '/auth';
      }, 100);
    } catch (error) {
      console.error("Error signing out:", error);
    } finally {
      setLoading(false);
    }
  };

  // Alias for backward compatibility
  const logout = signOut;

  return (
    <AuthContext.Provider value={{ 
      session, 
      user, 
      profile, 
      loading, 
      signOut,
      logout, 
      refreshProfile 
    }}>
      {children}
    </AuthContext.Provider>
  );
}

export function useAuth() {
  const context = useContext(AuthContext);
  if (context === undefined) {
    throw new Error("useAuth must be used within an AuthProvider");
  }
  return context;
}
</file>

<file path="src/hooks/use-mobile.tsx">
import * as React from "react"

const MOBILE_BREAKPOINT = 768

export function useIsMobile() {
  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)

  React.useEffect(() => {
    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)
    const onChange = () => {
      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)
    }
    mql.addEventListener("change", onChange)
    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)
    return () => mql.removeEventListener("change", onChange)
  }, [])

  return !!isMobile
}
</file>

<file path="src/hooks/use-toast.ts">
import * as React from "react"

import type {
  ToastActionElement,
  ToastProps,
} from "@/components/ui/toast"

const TOAST_LIMIT = 1
const TOAST_REMOVE_DELAY = 1000000

type ToasterToast = ToastProps & {
  id: string
  title?: React.ReactNode
  description?: React.ReactNode
  action?: ToastActionElement
}

const actionTypes = {
  ADD_TOAST: "ADD_TOAST",
  UPDATE_TOAST: "UPDATE_TOAST",
  DISMISS_TOAST: "DISMISS_TOAST",
  REMOVE_TOAST: "REMOVE_TOAST",
} as const

let count = 0

function genId() {
  count = (count + 1) % Number.MAX_SAFE_INTEGER
  return count.toString()
}

type ActionType = typeof actionTypes

type Action =
  | {
      type: ActionType["ADD_TOAST"]
      toast: ToasterToast
    }
  | {
      type: ActionType["UPDATE_TOAST"]
      toast: Partial<ToasterToast>
    }
  | {
      type: ActionType["DISMISS_TOAST"]
      toastId?: ToasterToast["id"]
    }
  | {
      type: ActionType["REMOVE_TOAST"]
      toastId?: ToasterToast["id"]
    }

interface State {
  toasts: ToasterToast[]
}

const toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()

const addToRemoveQueue = (toastId: string) => {
  if (toastTimeouts.has(toastId)) {
    return
  }

  const timeout = setTimeout(() => {
    toastTimeouts.delete(toastId)
    dispatch({
      type: "REMOVE_TOAST",
      toastId: toastId,
    })
  }, TOAST_REMOVE_DELAY)

  toastTimeouts.set(toastId, timeout)
}

export const reducer = (state: State, action: Action): State => {
  switch (action.type) {
    case "ADD_TOAST":
      return {
        ...state,
        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),
      }

    case "UPDATE_TOAST":
      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === action.toast.id ? { ...t, ...action.toast } : t
        ),
      }

    case "DISMISS_TOAST": {
      const { toastId } = action

      // ! Side effects ! - This could be extracted into a dismissToast() action,
      // but I'll keep it here for simplicity
      if (toastId) {
        addToRemoveQueue(toastId)
      } else {
        state.toasts.forEach((toast) => {
          addToRemoveQueue(toast.id)
        })
      }

      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === toastId || toastId === undefined
            ? {
                ...t,
                open: false,
              }
            : t
        ),
      }
    }
    case "REMOVE_TOAST":
      if (action.toastId === undefined) {
        return {
          ...state,
          toasts: [],
        }
      }
      return {
        ...state,
        toasts: state.toasts.filter((t) => t.id !== action.toastId),
      }
  }
}

const listeners: Array<(state: State) => void> = []

let memoryState: State = { toasts: [] }

function dispatch(action: Action) {
  memoryState = reducer(memoryState, action)
  listeners.forEach((listener) => {
    listener(memoryState)
  })
}

type Toast = Omit<ToasterToast, "id">

function toast({ ...props }: Toast) {
  const id = genId()

  const update = (props: ToasterToast) =>
    dispatch({
      type: "UPDATE_TOAST",
      toast: { ...props, id },
    })
  const dismiss = () => dispatch({ type: "DISMISS_TOAST", toastId: id })

  dispatch({
    type: "ADD_TOAST",
    toast: {
      ...props,
      id,
      open: true,
      onOpenChange: (open) => {
        if (!open) dismiss()
      },
    },
  })

  return {
    id: id,
    dismiss,
    update,
  }
}

function useToast() {
  const [state, setState] = React.useState<State>(memoryState)

  React.useEffect(() => {
    listeners.push(setState)
    return () => {
      const index = listeners.indexOf(setState)
      if (index > -1) {
        listeners.splice(index, 1)
      }
    }
  }, [state])

  return {
    ...state,
    toast,
    dismiss: (toastId?: string) => dispatch({ type: "DISMISS_TOAST", toastId }),
  }
}

export { useToast, toast }
</file>

<file path="src/hooks/useCompanyRequests.ts">
import { useState, useEffect } from "react";
import { supabase } from "@/integrations/supabase/client";
import { useAuth } from "@/contexts/AuthContext";
import { toast } from "sonner";

export type CompanyRequest = {
  id: string;
  user_id: string;
  company_name: string;
  company_address?: string;
  reason?: string;
  status: "pending" | "approved" | "rejected";
  created_at: string;
  updated_at: string;
  reviewed_by?: string;
  reviewed_at?: string;
};

export function useCompanyRequests() {
  const { user } = useAuth();
  const [requests, setRequests] = useState<CompanyRequest[]>([]);
  const [loading, setLoading] = useState(true);

  // Fetch company requests from Supabase
  const fetchRequests = async () => {
    if (!user) {
      setRequests([]);
      setLoading(false);
      return;
    }

    try {
      const { data, error } = await supabase
        .from('company_requests')
        .select('*')
        .eq('user_id', user.id)
        .order('created_at', { ascending: false });

      if (error) {
        console.error('Error fetching company requests:', error);
        toast.error('Failed to load company requests');
        return;
      }

      // Type assertion to ensure proper typing from Supabase
      const typedData = (data || []).map(item => ({
        ...item,
        status: item.status as "pending" | "approved" | "rejected"
      })) as CompanyRequest[];

      setRequests(typedData);
    } catch (error) {
      console.error('Error fetching company requests:', error);
      toast.error('Failed to load company requests');
    } finally {
      setLoading(false);
    }
  };

  // Submit new company request
  const submitRequest = async (request: {
    company_name: string;
    company_address?: string;
    reason?: string;
  }) => {
    if (!user) {
      toast.error('You must be logged in to submit company requests');
      return false;
    }

    try {
      const { data, error } = await supabase
        .from('company_requests')
        .insert({
          user_id: user.id,
          company_name: request.company_name,
          company_address: request.company_address,
          reason: request.reason,
        })
        .select()
        .single();

      if (error) {
        console.error('Error submitting company request:', error);
        toast.error('Failed to submit company request');
        return false;
      }

      // Send webhook to n8n
      try {
        const { error: webhookError } = await supabase.functions.invoke('send-company-request-webhook', {
          body: {
            user_email: user.email,
            company_name: request.company_name,
            company_address: request.company_address,
            reason: request.reason,
            request_id: data.id,
          },
        });

        if (webhookError) {
          console.error('Webhook error:', webhookError);
          // Don't fail the request if webhook fails
        }
      } catch (webhookError) {
        console.error('Error sending webhook:', webhookError);
        // Don't fail the request if webhook fails
      }

      // Type assertion for the new data
      const typedNewData = {
        ...data,
        status: data.status as "pending" | "approved" | "rejected"
      } as CompanyRequest;

      setRequests([typedNewData, ...requests]);
      toast.success(`Company request submitted for ${request.company_name}`);
      return true;
    } catch (error) {
      console.error('Error submitting company request:', error);
      toast.error('Failed to submit company request');
      return false;
    }
  };

  // Delete company request
  const deleteRequest = async (requestId: string) => {
    if (!user) {
      toast.error('You must be logged in to delete company requests');
      return false;
    }

    try {
      const { error } = await supabase
        .from('company_requests')
        .delete()
        .eq('id', requestId)
        .eq('user_id', user.id);

      if (error) {
        console.error('Error deleting company request:', error);
        toast.error('Failed to delete company request');
        return false;
      }

      setRequests(requests.filter(request => request.id !== requestId));
      toast.success('Company request deleted successfully');
      return true;
    } catch (error) {
      console.error('Error deleting company request:', error);
      toast.error('Failed to delete company request');
      return false;
    }
  };

  useEffect(() => {
    fetchRequests();
  }, [user]);

  return {
    requests,
    loading,
    submitRequest,
    deleteRequest,
    refetch: fetchRequests,
  };
}
</file>

<file path="src/hooks/useTrackedCompanies.ts">
import { useState, useEffect } from "react";
import { supabase } from "@/integrations/supabase/client";
import { useAuth } from "@/contexts/AuthContext";
import { toast } from "sonner";

export type Company = {
  id: string;
  name: string;
  address?: string;
  priority: "low" | "interested" | "high" | "do_not_work" | "agreement_ended";
  created_at: string;
  updated_at: string;
  user_id: string;
  main_company_id?: string;
  is_main_company: boolean;
};

export function useTrackedCompanies() {
  const { user } = useAuth();
  const [companies, setCompanies] = useState<Company[]>([]);
  const [loading, setLoading] = useState(true);

  // Fetch companies from Supabase
  const fetchCompanies = async () => {
    if (!user) {
      setCompanies([]);
      setLoading(false);
      return;
    }

    try {
      const { data, error } = await supabase
        .from('tracked_companies')
        .select(`
          *,
          main_companies (
            id,
            name,
            description,
            is_active
          )
        `)
        .eq('user_id', user.id);

      if (error) {
        console.error('Error fetching companies:', error);
        toast.error('Failed to load companies');
        return;
      }

      // Type assertion and mapping to ensure the data matches our Company type
      const typedData = (data || []).map(item => ({
        ...item,
        priority: item.priority as Company['priority'],
        is_main_company: !!item.main_company_id,
        // Use main company name if available, otherwise use the tracked company name
        name: item.main_companies?.name || item.name,
        address: item.address || item.main_companies?.description || ''
      }));

      // Sort companies alphabetically by name
      const sortedCompanies = typedData.sort((a, b) => a.name.localeCompare(b.name));

      setCompanies(sortedCompanies);
    } catch (error) {
      console.error('Error fetching companies:', error);
      toast.error('Failed to load companies');
    } finally {
      setLoading(false);
    }
  };

  // Add new custom company (not from main companies)
  const addCompany = async (company: Omit<Company, 'id' | 'created_at' | 'updated_at' | 'user_id' | 'main_company_id' | 'is_main_company'>) => {
    if (!user) {
      toast.error('You must be logged in to add companies');
      return false;
    }

    try {
      const { data, error } = await supabase
        .from('tracked_companies')
        .insert({
          name: company.name,
          address: company.address,
          priority: company.priority,
          user_id: user.id,
          // main_company_id is null for custom companies
        })
        .select()
        .single();

      if (error) {
        console.error('Error adding company:', error);
        toast.error('Failed to add company');
        return false;
      }

      const typedData = {
        ...data,
        priority: data.priority as Company['priority'],
        is_main_company: false
      };

      // Add new company and re-sort alphabetically
      const updatedCompanies = [typedData, ...companies].sort((a, b) => a.name.localeCompare(b.name));
      setCompanies(updatedCompanies);
      toast.success(`Added ${company.name} to tracking`);
      return true;
    } catch (error) {
      console.error('Error adding company:', error);
      toast.error('Failed to add company');
      return false;
    }
  };

  // Update company
  const updateCompany = async (id: string, updates: Partial<Omit<Company, 'id' | 'created_at' | 'user_id' | 'main_company_id' | 'is_main_company'>>) => {
    if (!user) {
      toast.error('You must be logged in to update companies');
      return false;
    }

    try {
      const { data, error } = await supabase
        .from('tracked_companies')
        .update({
          ...updates,
          updated_at: new Date().toISOString(),
        })
        .eq('id', id)
        .eq('user_id', user.id)
        .select(`
          *,
          main_companies (
            id,
            name,
            description,
            is_active
          )
        `)
        .single();

      if (error) {
        console.error('Error updating company:', error);
        toast.error('Failed to update company');
        return false;
      }

      const typedData = {
        ...data,
        priority: data.priority as Company['priority'],
        is_main_company: !!data.main_company_id,
        name: data.main_companies?.name || data.name,
        address: data.address || data.main_companies?.description || ''
      };

      // Update company and re-sort alphabetically
      const updatedCompanies = companies.map(company => 
        company.id === id ? typedData : company
      ).sort((a, b) => a.name.localeCompare(b.name));

      setCompanies(updatedCompanies);
      toast.success(`Updated ${typedData.name}`);
      return true;
    } catch (error) {
      console.error('Error updating company:', error);
      toast.error('Failed to update company');
      return false;
    }
  };

  // Delete company (only allow deletion of custom companies, not main companies)
  const deleteCompany = async (id: string) => {
    if (!user) {
      toast.error('You must be logged in to delete companies');
      return false;
    }

    const companyToDelete = companies.find(c => c.id === id);
    if (!companyToDelete) return false;

    // Prevent deletion of main companies
    if (companyToDelete.is_main_company) {
      toast.error('Cannot delete main companies. You can only change their priority.');
      return false;
    }

    try {
      const { error } = await supabase
        .from('tracked_companies')
        .delete()
        .eq('id', id)
        .eq('user_id', user.id);

      if (error) {
        console.error('Error deleting company:', error);
        toast.error('Failed to delete company');
        return false;
      }

      setCompanies(companies.filter(company => company.id !== id));
      toast.success(`Removed ${companyToDelete.name} from tracking`);
      return true;
    } catch (error) {
      console.error('Error deleting company:', error);
      toast.error('Failed to delete company');
      return false;
    }
  };

  useEffect(() => {
    fetchCompanies();
  }, [user]);

  return {
    companies,
    loading,
    addCompany,
    updateCompany,
    deleteCompany,
    refetch: fetchCompanies,
  };
}
</file>

<file path="src/integrations/supabase/client.ts">
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://jekpvqacecqnflweqmre.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Impla3B2cWFjZWNxbmZsd2VxbXJlIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDYzMzg1NzksImV4cCI6MjA2MTkxNDU3OX0.zxx7dD1Q-3EQXUMnxnCF8dkJ2WMy1svJ2ERUOGfB5dg";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY);
</file>

<file path="src/lib/benefits.ts">
export interface Benefit {
  id: number;
  title: string;
  description: string;
  icon?: string;
}

export const benefits: Benefit[] = [
  {
    id: 1,
    title: "Real-Time Intelligence",
    description: "Get fresh insights on construction companies and labor activities as they happen",
  },
  {
    id: 2,
    title: "Strategic Targeting",
    description: "Identify high-priority organizing opportunities with data-driven insights",
  },
  {
    id: 3,
    title: "Comprehensive Monitoring",
    description: "Track 30+ companies across construction, utility, and excavation sectors",
  },
];
</file>

<file path="src/lib/supabase-storage.ts">
import { supabase } from "@/integrations/supabase/client";

export const createStorageBucket = async () => {
  try {
    // Check if bucket already exists first
    const { data: buckets } = await supabase.storage.listBuckets();
    const existingBucket = buckets?.find(bucket => bucket.name === 'profile-images');
    
    if (existingBucket) {
      console.log('Bucket profile-images already exists');
      return;
    }

    const { data, error } = await supabase.storage.createBucket('profile-images', {
      public: true,
      fileSizeLimit: 2097152, // 2MB in bytes
      allowedMimeTypes: ['image/png', 'image/jpeg', 'image/webp', 'image/gif'],
    });
    
    if (error) {
      // If bucket already exists, this is fine
      if (error.message.includes('already exists')) {
        console.log('Bucket profile-images already exists');
        return;
      }
      throw error;
    }
    
    console.log('Created storage bucket:', data);
  } catch (error) {
    console.error('Error creating storage bucket:', error);
    // Don't throw the error to prevent app crashes
  }
};
</file>

<file path="src/lib/utils.ts">
import { clsx, type ClassValue } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}
</file>

<file path="src/pages/CompanyAnalysis.tsx">
import { useState, useEffect } from "react";
import { useAuth } from "@/contexts/AuthContext";
import { useSearchParams } from "react-router-dom";
import NavBar from "@/components/NavBar";
import { toast } from "@/hooks/use-toast";
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { ArrowLeft, Building2, TrendingUp, Calendar, ExternalLink } from "lucide-react";
import { supabase } from "@/integrations/supabase/client";
import { DataPointChart } from "@/components/DataPointChart";

interface NewsArticle {
  id: string;
  title: string;
  description: string;
  url: string;
  published_at: string;
  company_mentioned: string;
  source_id: string;
  created_at: string;
}

export default function CompanyAnalysis() {
  const { user } = useAuth();
  const [searchParams] = useSearchParams();
  const metricName = searchParams.get('metric') || 'Company Analysis';
  const [articles, setArticles] = useState<NewsArticle[]>([]);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    fetchAnalysisData();
  }, []);

  const fetchAnalysisData = async () => {
    try {
      setLoading(true);
      
      // Fetch recent articles for analysis
      const { data: articlesData, error } = await supabase
        .from('news_articles')
        .select('*')
        .order('published_at', { ascending: false })
        .limit(50);

      if (error) throw error;
      setArticles(articlesData || []);

    } catch (error) {
      console.error('Error fetching analysis data:', error);
      toast({
        title: "Error",
        description: "Failed to load analysis data",
        variant: "destructive",
      });
    } finally {
      setLoading(false);
    }
  };

  // Generate trend data from articles
  const generateTrendData = () => {
    const last7Days = Array.from({ length: 7 }, (_, i) => {
      const date = new Date();
      date.setDate(date.getDate() - i);
      return {
        name: date.toLocaleDateString('en-US', { weekday: 'short' }),
        value: 0
      };
    }).reverse();

    articles.forEach(article => {
      const articleDate = new Date(article.published_at || article.created_at);
      const daysDiff = Math.floor((Date.now() - articleDate.getTime()) / (1000 * 60 * 60 * 24));
      if (daysDiff < 7) {
        last7Days[6 - daysDiff].value++;
      }
    });

    return last7Days;
  };

  // Generate company mentions data
  const generateCompanyData = () => {
    const mentions: { [key: string]: number } = {};
    articles.forEach(article => {
      if (article.company_mentioned) {
        mentions[article.company_mentioned] = (mentions[article.company_mentioned] || 0) + 1;
      }
    });
    
    return Object.entries(mentions)
      .sort(([,a], [,b]) => b - a)
      .slice(0, 8)
      .map(([name, value]) => ({ name, value }));
  };

  const trendData = generateTrendData();
  const companyData = generateCompanyData();

  return (
    <div className="min-h-screen flex flex-col bg-gradient-to-br from-background to-secondary/20">
      <NavBar />
      
      <main className="flex-1 container px-4 sm:px-6 py-8">
        <div className="flex items-center gap-4 mb-6">
          <Button 
            variant="outline" 
            onClick={() => window.history.back()}
            className="flex items-center gap-2"
          >
            <ArrowLeft className="h-4 w-4" />
            Back
          </Button>
          <div>
            <h1 className="text-3xl font-bold">{metricName} - Detailed Analysis</h1>
            <p className="text-muted-foreground mt-1">
              In-depth analysis and insights for {metricName.toLowerCase()}
            </p>
          </div>
        </div>

        {loading ? (
          <div className="text-center py-10">
            <div className="w-8 h-8 border-4 border-primary border-t-transparent rounded-full animate-spin mx-auto"></div>
            <p className="mt-4 text-muted-foreground">Loading analysis data...</p>
          </div>
        ) : (
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
            {/* Activity Trend Chart */}
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <TrendingUp className="h-5 w-5" />
                  Activity Trend (7 Days)
                </CardTitle>
                <CardDescription>
                  Daily activity related to {metricName.toLowerCase()}
                </CardDescription>
              </CardHeader>
              <CardContent>
                <DataPointChart 
                  data={trendData} 
                  height={300} 
                  color="#4f46e5"
                />
              </CardContent>
            </Card>

            {/* Company Distribution */}
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Building2 className="h-5 w-5" />
                  Company Distribution
                </CardTitle>
                <CardDescription>
                  Most mentioned companies in recent activity
                </CardDescription>
              </CardHeader>
              <CardContent>
                <DataPointChart 
                  data={companyData.length > 0 ? companyData : [{ name: 'No data', value: 0 }]} 
                  height={300}
                  color="#10b981"
                />
              </CardContent>
            </Card>

            {/* Key Insights */}
            <Card className="lg:col-span-2">
              <CardHeader>
                <CardTitle>Key Insights</CardTitle>
                <CardDescription>
                  Analysis summary for {metricName}
                </CardDescription>
              </CardHeader>
              <CardContent>
                <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-6">
                  <div className="bg-blue-50 dark:bg-blue-900/20 p-4 rounded-lg">
                    <div className="text-2xl font-bold text-blue-600 dark:text-blue-400">
                      {articles.length}
                    </div>
                    <div className="text-sm text-blue-600 dark:text-blue-400">
                      Total Articles Analyzed
                    </div>
                  </div>
                  <div className="bg-green-50 dark:bg-green-900/20 p-4 rounded-lg">
                    <div className="text-2xl font-bold text-green-600 dark:text-green-400">
                      {companyData.length}
                    </div>
                    <div className="text-sm text-green-600 dark:text-green-400">
                      Companies Mentioned
                    </div>
                  </div>
                  <div className="bg-orange-50 dark:bg-orange-900/20 p-4 rounded-lg">
                    <div className="text-2xl font-bold text-orange-600 dark:text-orange-400">
                      {Math.max(...trendData.map(d => d.value), 0)}
                    </div>
                    <div className="text-sm text-orange-600 dark:text-orange-400">
                      Peak Daily Activity
                    </div>
                  </div>
                </div>
                
                {/* Analysis Text */}
                <div className="prose dark:prose-invert max-w-none">
                  <p>
                    Based on the analysis of {articles.length} articles, the following patterns emerge:
                  </p>
                  <ul>
                    <li>
                      <strong>Activity Level:</strong> {trendData.reduce((sum, day) => sum + day.value, 0)} total mentions across the last 7 days
                    </li>
                    <li>
                      <strong>Top Company:</strong> {companyData[0]?.name || 'No specific companies mentioned'} 
                      {companyData[0] && ` with ${companyData[0].value} mentions`}
                    </li>
                    <li>
                      <strong>Trend Direction:</strong> {
                        trendData[6]?.value > trendData[0]?.value ? 'Increasing' : 
                        trendData[6]?.value < trendData[0]?.value ? 'Decreasing' : 'Stable'
                      } activity over the past week
                    </li>
                  </ul>
                </div>
              </CardContent>
            </Card>

            {/* Recent Related Articles */}
            <Card className="lg:col-span-2">
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Calendar className="h-5 w-5" />
                  Recent Related Articles
                </CardTitle>
                <CardDescription>
                  Latest news articles related to {metricName.toLowerCase()}
                </CardDescription>
              </CardHeader>
              <CardContent>
                {articles.length > 0 ? (
                  <div className="space-y-4 max-h-96 overflow-y-auto">
                    {articles.slice(0, 10).map((article) => (
                      <div key={article.id} className="border rounded-lg p-4 hover:bg-muted/50 transition-colors">
                        <div className="flex items-start justify-between gap-4">
                          <div className="flex-1">
                            <h4 className="font-medium mb-1">
                              <a 
                                href={article.url} 
                                target="_blank" 
                                rel="noopener noreferrer"
                                className="text-primary hover:underline"
                              >
                                {article.title}
                              </a>
                            </h4>
                            {article.description && (
                              <p className="text-sm text-muted-foreground mb-2 line-clamp-2">
                                {article.description}
                              </p>
                            )}
                            <div className="flex items-center gap-4 text-xs text-muted-foreground">
                              <span>
                                {new Date(article.published_at || article.created_at).toLocaleDateString()}
                              </span>
                              {article.company_mentioned && (
                                <span className="inline-flex items-center rounded-md bg-primary/10 px-2 py-1 text-xs font-medium text-primary">
                                  {article.company_mentioned}
                                </span>
                              )}
                            </div>
                          </div>
                          <div className="flex-shrink-0">
                            <a 
                              href={article.url} 
                              target="_blank" 
                              rel="noopener noreferrer"
                              className="text-muted-foreground hover:text-primary"
                            >
                              <ExternalLink className="h-4 w-4" />
                            </a>
                          </div>
                        </div>
                      </div>
                    ))}
                  </div>
                ) : (
                  <div className="text-center py-10">
                    <Calendar className="mx-auto h-10 w-10 text-muted-foreground/60" />
                    <h3 className="mt-4 text-lg font-medium">No articles found</h3>
                    <p className="mt-1 text-muted-foreground">
                      No related articles found for analysis
                    </p>
                  </div>
                )}
              </CardContent>
            </Card>
          </div>
        )}
      </main>
      
      <footer className="text-center py-6 text-sm text-muted-foreground">
        © 2025 UnionPilot. Company intelligence for labor organizations.
      </footer>
    </div>
  );
}
</file>

<file path="src/pages/CompanyResearchDetail.tsx">
import { useState, useEffect } from "react";
import { useParams, useNavigate } from "react-router-dom";
import { useAuth } from "@/contexts/AuthContext";
import { useCompanyResearch, CompanyResearch } from "@/hooks/useCompanyResearch";
import NavBar from "@/components/NavBar";
import { Card, CardHeader, CardTitle, CardContent } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Separator } from "@/components/ui/separator";
import { 
  ArrowLeft, 
  FileText, 
  Clock, 
  RefreshCw, 
  Download, 
  Share2,
  Building2,
  TrendingUp,
  Users,
  MapPin,
  AlertTriangle,
  CheckCircle,
  ExternalLink,
  Printer
} from "lucide-react";
import { motion } from "framer-motion";
import { toast } from "sonner";
import { MarkdownRenderer } from "@/components/chat/MarkdownRenderer";

export default function CompanyResearchDetail() {
  const { user } = useAuth();
  const navigate = useNavigate();
  const { id } = useParams<{ id: string }>();
  const { research, generateResearch, generating } = useCompanyResearch();
  
  const [currentResearch, setCurrentResearch] = useState<CompanyResearch | null>(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    if (id && research.length > 0) {
      const found = research.find(r => r.id === id);
      if (found) {
        setCurrentResearch(found);
      } else {
        toast.error('Research report not found');
        navigate('/company-reports');
      }
    }
    setLoading(false);
  }, [id, research, navigate]);

  const handleRegenerateResearch = async () => {
    if (!currentResearch) return;
    
    const result = await generateResearch(currentResearch.company_name);
    if (result) {
      setCurrentResearch(result);
      toast.success('Research report regenerated');
    }
  };

  const handlePrint = () => {
    window.print();
  };

  const handleDownload = () => {
    if (!currentResearch) return;
    
    const element = document.createElement('a');
    const file = new Blob([currentResearch.research_content], { type: 'text/markdown' });
    element.href = URL.createObjectURL(file);
    element.download = `${currentResearch.company_name}-Research-Report.md`;
    document.body.appendChild(element);
    element.click();
    document.body.removeChild(element);
  };

  if (!user) {
    navigate('/auth');
    return null;
  }

  if (loading) {
    return (
      <div className="min-h-screen bg-gray-50 dark:bg-gray-900">
        <NavBar />
        <div className="flex items-center justify-center py-12">
          <RefreshCw className="h-8 w-8 animate-spin text-gray-400" />
          <span className="ml-2 text-gray-600 dark:text-gray-400">Loading research report...</span>
        </div>
      </div>
    );
  }

  if (!currentResearch) {
    return (
      <div className="min-h-screen bg-gray-50 dark:bg-gray-900">
        <NavBar />
        <div className="container mx-auto px-4 py-8">
          <div className="text-center">
            <h1 className="text-2xl font-bold text-gray-900 dark:text-gray-100 mb-4">
              Research Report Not Found
            </h1>
            <Button onClick={() => navigate('/company-reports')}>
              <ArrowLeft className="h-4 w-4 mr-2" />
              Back to Company Reports
            </Button>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50 dark:bg-gray-900">
      <NavBar />
      
      <main className="container mx-auto px-4 py-8 max-w-6xl">
        {/* Header */}
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.5 }}
          className="mb-8"
        >
          <div className="flex items-center gap-4 mb-4">
            <Button
              variant="outline"
              onClick={() => navigate('/company-reports')}
              className="print:hidden"
            >
              <ArrowLeft className="h-4 w-4 mr-2" />
              Back to Reports
            </Button>
            <div className="flex-1">
              <h1 className="text-3xl font-bold text-gray-900 dark:text-gray-100">
                {currentResearch.company_name} - Research Report
              </h1>
              <p className="text-gray-600 dark:text-gray-400 mt-1">
                Comprehensive intelligence analysis for Local 825 organizing efforts
              </p>
            </div>
            <div className="flex items-center gap-2 print:hidden">
              <Button variant="outline" onClick={handlePrint}>
                <Printer className="h-4 w-4 mr-2" />
                Print
              </Button>
              <Button variant="outline" onClick={handleDownload}>
                <Download className="h-4 w-4 mr-2" />
                Download
              </Button>
              <Button variant="outline" onClick={handleRegenerateResearch} disabled={generating}>
                {generating ? (
                  <RefreshCw className="h-4 w-4 mr-2 animate-spin" />
                ) : (
                  <RefreshCw className="h-4 w-4 mr-2" />
                )}
                Regenerate
              </Button>
            </div>
          </div>
          
          {/* Report Metadata */}
          <Card className="mb-6">
            <CardContent className="p-6">
              <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                <div className="flex items-center gap-3">
                  <div className="p-2 bg-blue-100 dark:bg-blue-900 rounded-lg">
                    <Building2 className="h-5 w-5 text-blue-600 dark:text-blue-400" />
                  </div>
                  <div>
                    <p className="text-sm font-medium text-gray-600 dark:text-gray-400">Company</p>
                    <p className="text-lg font-semibold text-gray-900 dark:text-gray-100">
                      {currentResearch.company_name}
                    </p>
                  </div>
                </div>
                <div className="flex items-center gap-3">
                  <div className="p-2 bg-green-100 dark:bg-green-900 rounded-lg">
                    <Clock className="h-5 w-5 text-green-600 dark:text-green-400" />
                  </div>
                  <div>
                    <p className="text-sm font-medium text-gray-600 dark:text-gray-400">Generated</p>
                    <p className="text-lg font-semibold text-gray-900 dark:text-gray-100">
                      {new Date(currentResearch.created_at).toLocaleDateString()}
                    </p>
                  </div>
                </div>
                <div className="flex items-center gap-3">
                  <div className="p-2 bg-purple-100 dark:bg-purple-900 rounded-lg">
                    <FileText className="h-5 w-5 text-purple-600 dark:text-purple-400" />
                  </div>
                  <div>
                    <p className="text-sm font-medium text-gray-600 dark:text-gray-400">Report Type</p>
                    <p className="text-lg font-semibold text-gray-900 dark:text-gray-100">
                      Intelligence Analysis
                    </p>
                  </div>
                </div>
              </div>
            </CardContent>
          </Card>
        </motion.div>

        {/* Research Content */}
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.5, delay: 0.2 }}
        >
          <Card className="print:shadow-none print:border-none">
            <CardContent className="p-8">
              <div className="prose prose-lg max-w-none dark:prose-invert">
                <MarkdownRenderer content={currentResearch.research_content} />
              </div>
            </CardContent>
          </Card>
        </motion.div>

        {/* Footer */}
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.5, delay: 0.4 }}
          className="mt-8 text-center print:hidden"
        >
          <Separator className="mb-4" />
          <p className="text-sm text-gray-500 dark:text-gray-400">
            This report was generated using AI-powered research tools for Local 825 Operating Engineers union intelligence.
          </p>
          <p className="text-xs text-gray-400 dark:text-gray-500 mt-2">
            © 2025 DataPilot+. Built for union intelligence.
          </p>
        </motion.div>
      </main>

      {/* Print Styles */}
      <style>
        {`
        @media print {
          .print\\:hidden {
            display: none !important;
          }
          .print\\:shadow-none {
            box-shadow: none !important;
          }
          .print\\:border-none {
            border: none !important;
          }
          body {
            background: white !important;
          }
          .prose {
            color: black !important;
          }
        }
        `}
      </style>
    </div>
  );
}
</file>

<file path="src/pages/NotFound.tsx">
import { useLocation } from "react-router-dom";
import { useEffect } from "react";

const NotFound = () => {
  const location = useLocation();

  useEffect(() => {
    console.error(
      "404 Error: User attempted to access non-existent route:",
      location.pathname
    );
  }, [location.pathname]);

  return (
    <div className="min-h-screen flex items-center justify-center bg-gray-100">
      <div className="text-center">
        <h1 className="text-4xl font-bold mb-4">404</h1>
        <p className="text-xl text-gray-600 mb-4">Oops! Page not found</p>
        <a href="/" className="text-blue-500 hover:text-blue-700 underline">
          Return to Home
        </a>
      </div>
    </div>
  );
};

export default NotFound;
</file>

<file path="src/pages/Profile.tsx">
import { useState, useEffect, useRef } from "react";
import { Navigate, useNavigate } from "react-router-dom";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { useAuth } from "@/contexts/AuthContext";
import { supabase } from "@/integrations/supabase/client";
import { toast } from "@/hooks/use-toast";
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import NavBar from "@/components/NavBar";
import { Tabs, TabsList, TabsTrigger, TabsContent } from "@/components/ui/tabs";
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card";
import { Alert, AlertDescription } from "@/components/ui/alert";
import { Check, Copy, Image, Share2, Upload, X } from "lucide-react";
import { Switch } from "@/components/ui/switch";
import { Checkbox } from "@/components/ui/checkbox";
import type { Json } from "@/integrations/supabase/types";

interface ViewPreferences {
  showFinancials?: boolean;
  showMarketingData?: boolean;
  showEmployeeCount?: boolean;
  [key: string]: any;
}

interface InsightPreferences {
  intelligence_types?: string[];
  delivery_frequency?: string;
  [key: string]: any;
}

interface Profile {
  id: string;
  username: string;
  avatar_url: string | null;
  view_preferences: ViewPreferences | null;
  insight_preferences: InsightPreferences | null;
  industry: string | null;
  organization_size: string | null;
  role: string | null;
  priority: string | null;
  goals: string[] | null;
}

export default function Profile() {
  const navigate = useNavigate();
  const { user, session, refreshProfile } = useAuth();
  const [loading, setLoading] = useState(true);
  const [updating, setUpdating] = useState(false);
  const [profile, setProfile] = useState<Profile | null>(null);
  const [username, setUsername] = useState("");
  const [usernameError, setUsernameError] = useState<string | null>(null);
  const [avatarUrl, setAvatarUrl] = useState<string | null>(null);
  const [avatarFile, setAvatarFile] = useState<File | null>(null);
  const [viewPreferences, setViewPreferences] = useState<ViewPreferences>({
    showFinancials: false,
    showMarketingData: false,
    showEmployeeCount: false,
  });
  const [insightPreferences, setInsightPreferences] = useState<InsightPreferences>({
    intelligence_types: ["contract_awards", "hiring_changes", "safety_compliance", "financial_performance"],
    delivery_frequency: "twice_daily",
  });
  const [copied, setCopied] = useState(false);
  const fileInputRef = useRef<HTMLInputElement>(null);
  const profileUrl = `${window.location.origin}/@${username}`;

  useEffect(() => {
    if (user) {
      getProfile();
    }
  }, [user]);

  async function getProfile() {
    try {
      setLoading(true);
      
      const { data, error } = await supabase
        .from("profiles")
        .select("*")
        .eq("id", user?.id)
        .single();

      if (error) throw error;

      if (data) {
        const parsedViewPreferences = data.view_preferences ? 
          (typeof data.view_preferences === 'string' ? 
            JSON.parse(data.view_preferences) : data.view_preferences) : 
          {
            showFinancials: false,
            showMarketingData: false,
            showEmployeeCount: false,
          };

        const parsedInsightPreferences = data.insight_preferences ? 
          (typeof data.insight_preferences === 'string' ? 
            JSON.parse(data.insight_preferences) : data.insight_preferences) : 
          {
            intelligence_types: ["contract_awards", "hiring_changes", "safety_compliance", "financial_performance"],
            delivery_frequency: "twice_daily",
          };
          
        // Convert Json[] to string[] safely
        const convertedGoals = data.goals ? 
          (Array.isArray(data.goals) ? 
            data.goals.filter((goal: Json): goal is string => typeof goal === 'string') : 
            []) : 
          [];
          
        setProfile({
          ...data,
          view_preferences: parsedViewPreferences,
          insight_preferences: parsedInsightPreferences,
          goals: convertedGoals
        });
        
        setUsername(data.username || "");
        setAvatarUrl(data.avatar_url);
        setViewPreferences(parsedViewPreferences);
        setInsightPreferences(parsedInsightPreferences);
      }
    } catch (error: any) {
      toast({
        title: "Error",
        description: error.message || "Error loading profile",
        variant: "destructive",
      });
    } finally {
      setLoading(false);
    }
  }

  async function updateProfile() {
    try {
      setUpdating(true);
      setUsernameError(null);
      
      if (username && !/^[a-zA-Z0-9_-]+$/.test(username)) {
        setUsernameError("Username can only contain letters, numbers, underscores and hyphens");
        setUpdating(false);
        return;
      }
      
      const updates = {
        username,
        view_preferences: viewPreferences,
        insight_preferences: insightPreferences,
        updated_at: new Date().toISOString(),
      };
      
      if (avatarFile) {
        const fileExt = avatarFile.name.split('.').pop();
        const fileName = `${user?.id}-${Math.random().toString(36).substring(2)}.${fileExt}`;
        const filePath = `avatars/${fileName}`;
        
        const { error: uploadError } = await supabase.storage
          .from('profile-images')
          .upload(filePath, avatarFile);
          
        if (uploadError) throw uploadError;
        
        const { data } = supabase.storage
          .from('profile-images')
          .getPublicUrl(filePath);
          
        Object.assign(updates, { avatar_url: data.publicUrl });
      }
      
      const { error } = await supabase
        .from("profiles")
        .update(updates)
        .eq("id", user?.id);

      if (error) {
        if (error.message.includes("Username")) {
          setUsernameError(error.message);
        } else {
          throw error;
        }
      } else {
        toast({
          title: "Success",
          description: "Profile updated successfully",
        });
        
        refreshProfile();
        getProfile();
      }
    } catch (error: any) {
      toast({
        title: "Error",
        description: error.message || "Error updating profile",
        variant: "destructive",
      });
    } finally {
      setUpdating(false);
    }
  }

  const handleAvatarClick = () => {
    if (fileInputRef.current) {
      fileInputRef.current.click();
    }
  };

  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    if (e.target.files && e.target.files.length > 0) {
      const file = e.target.files[0];
      
      if (file.size > 2 * 1024 * 1024) {
        toast({
          title: "Error",
          description: "Image file size must be less than 2MB",
          variant: "destructive",
        });
        return;
      }
      
      setAvatarFile(file);
      setAvatarUrl(URL.createObjectURL(file));
    }
  };

  const copyProfileLink = () => {
    navigator.clipboard.writeText(profileUrl);
    setCopied(true);
    setTimeout(() => setCopied(false), 2000);
    
    toast({
      title: "Copied!",
      description: "Profile link copied to clipboard",
    });
  };
  
  const viewShareablePage = () => {
    window.open(`/@${username}`, "_blank");
  };
  
  const handleViewPreferenceChange = (key: keyof ViewPreferences) => {
    setViewPreferences(prev => ({
      ...prev,
      [key]: !prev[key]
    }));
  };

  const handleInsightPreferenceChange = (key: keyof InsightPreferences, value: boolean | string | string[]) => {
    setInsightPreferences(prev => ({
      ...prev,
      [key]: value
    }));
  };

  const handleIntelligenceTypeChange = (type: string, checked: boolean) => {
    setInsightPreferences(prev => {
      const currentTypes = prev.intelligence_types || [];
      if (checked) {
        return {
          ...prev,
          intelligence_types: [...currentTypes, type]
        };
      } else {
        return {
          ...prev,
          intelligence_types: currentTypes.filter(t => t !== type)
        };
      }
    });
  };

  if (!session) {
    return <Navigate to="/auth" replace />;
  }

  return (
    <div className="relative min-h-screen flex flex-col">
      <div className="absolute inset-0 bg-gradient-to-br from-background to-secondary dark:from-background dark:to-card z-[-1]" />
      
      <NavBar />
      
      <main className="flex-1 container px-4 sm:px-6 py-8">
        <h1 className="text-3xl font-bold mb-6">Your Profile</h1>
        
        <Tabs defaultValue="details" className="w-full">
          <TabsList className="mb-6">
            <TabsTrigger value="details">Personal Details</TabsTrigger>
            <TabsTrigger value="insights">Intelligence Preferences</TabsTrigger>
          </TabsList>
          
          <TabsContent value="details">
            <Card>
              <CardHeader>
                <CardTitle>Personal Details</CardTitle>
                <CardDescription>
                  Update your profile information and photo
                </CardDescription>
              </CardHeader>
              
              <CardContent className="space-y-6">
                <div className="flex flex-col items-center sm:flex-row sm:items-start gap-6">
                  <div 
                    className="relative group cursor-pointer w-24 h-24"
                    onClick={handleAvatarClick}
                  >
                    <Avatar className="w-24 h-24">
                      <AvatarImage src={avatarUrl || ""} />
                      <AvatarFallback className="text-2xl">
                        {username?.substring(0, 2).toUpperCase() || user?.email?.substring(0, 2).toUpperCase() || "U"}
                      </AvatarFallback>
                    </Avatar>
                    
                    <div className="absolute inset-0 bg-black/50 rounded-full flex items-center justify-center opacity-0 group-hover:opacity-100 transition-opacity">
                      <Upload className="h-8 w-8 text-white" />
                    </div>
                    
                    <input
                      ref={fileInputRef}
                      type="file"
                      accept="image/*"
                      className="hidden"
                      onChange={handleFileChange}
                    />
                  </div>
                  
                  <div className="flex-1 space-y-4">
                    <div>
                      <Label htmlFor="email">Email Address</Label>
                      <Input
                        id="email"
                        type="text"
                        value={user?.email || ""}
                        disabled
                        className="bg-muted"
                      />
                    </div>
                    
                    <div>
                      <Label htmlFor="username">Username</Label>
                      <Input
                        id="username"
                        type="text"
                        value={username}
                        onChange={(e) => {
                          setUsername(e.target.value);
                          setUsernameError(null);
                        }}
                        disabled={loading || updating}
                        className={usernameError ? "border-red-500" : ""}
                      />
                      {usernameError && (
                        <p className="mt-1 text-sm text-red-500">{usernameError}</p>
                      )}
                      <p className="mt-1 text-xs text-muted-foreground">
                        This will be used for your public profile: {username ? `/@${username}` : "Set a username first"}
                      </p>
                    </div>
                  </div>
                </div>
              </CardContent>
              
              <CardFooter>
                <Button 
                  onClick={updateProfile} 
                  disabled={loading || updating || !username}
                  className="ml-auto"
                >
                  {updating ? "Updating..." : "Save Changes"}
                </Button>
              </CardFooter>
            </Card>
          </TabsContent>
          
          <TabsContent value="insights">
            <Card>
              <CardHeader>
                <CardTitle>Intelligence Preferences</CardTitle>
                <CardDescription>
                  Customize what types of intelligence you want to receive and how often
                </CardDescription>
              </CardHeader>
              
              <CardContent className="space-y-6">
                <div className="space-y-4">
                  <h3 className="text-lg font-semibold">Intelligence Types</h3>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div className="space-y-3">
                      <div className="flex items-center space-x-2">
                        <Checkbox 
                          id="contract-awards"
                          checked={insightPreferences.intelligence_types?.includes("contract_awards") || false}
                          onCheckedChange={(checked) => handleIntelligenceTypeChange("contract_awards", !!checked)}
                        />
                        <Label htmlFor="contract-awards" className="text-sm font-medium">Contract Awards & RFPs</Label>
                      </div>
                      <div className="flex items-center space-x-2">
                        <Checkbox 
                          id="hiring-changes"
                          checked={insightPreferences.intelligence_types?.includes("hiring_changes") || false}
                          onCheckedChange={(checked) => handleIntelligenceTypeChange("hiring_changes", !!checked)}
                        />
                        <Label htmlFor="hiring-changes" className="text-sm font-medium">Hiring & Workforce Changes</Label>
                      </div>
                      <div className="flex items-center space-x-2">
                        <Checkbox 
                          id="safety-compliance"
                          checked={insightPreferences.intelligence_types?.includes("safety_compliance") || false}
                          onCheckedChange={(checked) => handleIntelligenceTypeChange("safety_compliance", !!checked)}
                        />
                        <Label htmlFor="safety-compliance" className="text-sm font-medium">Safety & Compliance Issues</Label>
                      </div>
                      <div className="flex items-center space-x-2">
                        <Checkbox 
                          id="financial-performance"
                          checked={insightPreferences.intelligence_types?.includes("financial_performance") || false}
                          onCheckedChange={(checked) => handleIntelligenceTypeChange("financial_performance", !!checked)}
                        />
                        <Label htmlFor="financial-performance" className="text-sm font-medium">Financial Performance</Label>
                      </div>
                    </div>
                    <div className="space-y-3">
                      <div className="flex items-center space-x-2">
                        <Checkbox 
                          id="business-expansion"
                          checked={insightPreferences.intelligence_types?.includes("business_expansion") || false}
                          onCheckedChange={(checked) => handleIntelligenceTypeChange("business_expansion", !!checked)}
                        />
                        <Label htmlFor="business-expansion" className="text-sm font-medium">Business Expansion</Label>
                      </div>
                      <div className="flex items-center space-x-2">
                        <Checkbox 
                          id="regulatory-developments"
                          checked={insightPreferences.intelligence_types?.includes("regulatory_developments") || false}
                          onCheckedChange={(checked) => handleIntelligenceTypeChange("regulatory_developments", !!checked)}
                        />
                        <Label htmlFor="regulatory-developments" className="text-sm font-medium">Regulatory Developments</Label>
                      </div>
                      <div className="flex items-center space-x-2">
                        <Checkbox 
                          id="industry-projects"
                          checked={insightPreferences.intelligence_types?.includes("industry_projects") || false}
                          onCheckedChange={(checked) => handleIntelligenceTypeChange("industry_projects", !!checked)}
                        />
                        <Label htmlFor="industry-projects" className="text-sm font-medium">Industry Projects</Label>
                      </div>
                      <div className="flex items-center space-x-2">
                        <Checkbox 
                          id="labor-relations"
                          checked={insightPreferences.intelligence_types?.includes("labor_relations") || false}
                          onCheckedChange={(checked) => handleIntelligenceTypeChange("labor_relations", !!checked)}
                        />
                        <Label htmlFor="labor-relations" className="text-sm font-medium">Labor Relations</Label>
                      </div>
                    </div>
                  </div>
                </div>

                <div className="space-y-4">
                  <h3 className="text-lg font-semibold">Delivery Frequency</h3>
                  <div className="space-y-2">
                    <div className="flex items-center space-x-2">
                      <input 
                        type="radio" 
                        id="real-time" 
                        name="delivery" 
                        value="real_time"
                        checked={insightPreferences.delivery_frequency === 'real_time'}
                        onChange={(e) => handleInsightPreferenceChange('delivery_frequency', e.target.value)}
                      />
                      <Label htmlFor="real-time" className="text-sm font-medium">Real-time alerts</Label>
                    </div>
                    <div className="flex items-center space-x-2">
                      <input 
                        type="radio" 
                        id="twice-daily" 
                        name="delivery" 
                        value="twice_daily"
                        checked={insightPreferences.delivery_frequency === 'twice_daily'}
                        onChange={(e) => handleInsightPreferenceChange('delivery_frequency', e.target.value)}
                      />
                      <Label htmlFor="twice-daily" className="text-sm font-medium">Twice daily digest</Label>
                    </div>
                    <div className="flex items-center space-x-2">
                      <input 
                        type="radio" 
                        id="daily" 
                        name="delivery" 
                        value="daily"
                        checked={insightPreferences.delivery_frequency === 'daily'}
                        onChange={(e) => handleInsightPreferenceChange('delivery_frequency', e.target.value)}
                      />
                      <Label htmlFor="daily" className="text-sm font-medium">Daily digest</Label>
                    </div>
                    <div className="flex items-center space-x-2">
                      <input 
                        type="radio" 
                        id="weekly" 
                        name="delivery" 
                        value="weekly"
                        checked={insightPreferences.delivery_frequency === 'weekly'}
                        onChange={(e) => handleInsightPreferenceChange('delivery_frequency', e.target.value)}
                      />
                      <Label htmlFor="weekly" className="text-sm font-medium">Weekly summary</Label>
                    </div>
                  </div>
                </div>
              </CardContent>
              
              <CardFooter>
                <Button 
                  onClick={updateProfile} 
                  disabled={loading || updating}
                  className="ml-auto"
                >
                  {updating ? "Saving..." : "Save Preferences"}
                </Button>
              </CardFooter>
            </Card>
          </TabsContent>
        </Tabs>
      </main>
      
      <footer className="text-center py-6 text-sm text-muted-foreground">
        © 2025 DataPilot+. Built for union intelligence.
      </footer>
    </div>
  );
}
</file>

<file path="src/pages/Settings.tsx">
import { useState, useEffect } from "react";
import { useNavigate } from "react-router-dom";
import { useAuth } from "@/contexts/AuthContext";
import { supabase } from "@/integrations/supabase/client";
import NavBar from "@/components/NavBar";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Label } from "@/components/ui/label";
import { toast } from "@/hooks/use-toast";
import { Separator } from "@/components/ui/separator";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { RadioGroup, RadioGroupItem } from "@/components/ui/radio-group";
import { Textarea } from "@/components/ui/textarea";
import { Check, X } from "lucide-react";

interface ProfileData {
  industry: string | null;
  organization_size: string | null;
  role: string | null;
  priority: string | null;
  goals: string[] | null;
}

interface ProfileAnalysis {
  id: string;
  analysis_text: string;
  is_approved: boolean | null;
  feedback: string | null;
}

export default function Settings() {
  const { user, profile } = useAuth();
  const navigate = useNavigate();
  const [loading, setLoading] = useState(true);
  const [profileData, setProfileData] = useState<ProfileData>({
    industry: null,
    organization_size: null,
    role: null,
    priority: null,
    goals: null
  });
  const [analysis, setAnalysis] = useState<ProfileAnalysis | null>(null);
  const [feedback, setFeedback] = useState("");
  
  // Fetch profile data and analysis
  const fetchData = async () => {
    if (!user) return;
    
    try {
      setLoading(true);
      
      // Fetch profile analysis
      const { data: analysisData, error: analysisError } = await supabase
        .from("profile_analysis")
        .select("*")
        .eq("profile_id", user.id)
        .single();
      
      if (analysisError && analysisError.code !== "PGRST116") {
        throw analysisError;
      }
      
      if (analysisData) {
        setAnalysis(analysisData);
        setFeedback(analysisData.feedback || "");
      }
      
      // Set profile data from the auth context
      if (profile) {
        setProfileData({
          industry: profile.industry,
          organization_size: profile.organization_size,
          role: profile.role,
          priority: profile.priority,
          goals: profile.goals as string[] || []
        });
      }
    } catch (error: any) {
      toast({
        title: "Error loading data",
        description: error.message,
        variant: "destructive",
      });
    } finally {
      setLoading(false);
    }
  };
  
  useEffect(() => {
    if (user) {
      fetchData();
    } else {
      // Redirect to auth if not logged in
      navigate("/auth");
    }
  }, [user, navigate]);
  
  const handleApproveAnalysis = async (approved: boolean) => {
    if (!analysis || !user) return;
    
    try {
      const { error } = await supabase
        .from("profile_analysis")
        .update({ 
          is_approved: approved,
          feedback: approved ? null : feedback,
          updated_at: new Date().toISOString()
        })
        .eq("id", analysis.id);
      
      if (error) throw error;
      
      toast({
        title: approved ? "Analysis approved" : "Feedback submitted",
        description: approved 
          ? "Thank you for confirming our analysis" 
          : "Thank you for your feedback",
      });
      
      // Refresh data
      fetchData();
    } catch (error: any) {
      toast({
        title: "Error updating feedback",
        description: error.message,
        variant: "destructive",
      });
    }
  };
  
  if (loading) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <p>Loading...</p>
      </div>
    );
  }
  
  return (
    <div className="min-h-screen flex flex-col bg-gradient-to-br from-background to-secondary/20">
      <NavBar />
      
      <main className="flex-1 container px-4 sm:px-6 py-8">
        <h1 className="text-3xl font-bold mb-6">Settings</h1>
        
        <Tabs defaultValue="profile" className="w-full">
          <TabsList className="mb-6">
            <TabsTrigger value="profile">Profile Information</TabsTrigger>
            <TabsTrigger value="analysis">AI Analysis</TabsTrigger>
          </TabsList>
          
          <TabsContent value="profile" className="space-y-6">
            <Card>
              <CardHeader>
                <CardTitle>Profile Information</CardTitle>
              </CardHeader>
              <CardContent className="space-y-6">
                <div>
                  <Label className="text-lg font-medium">Industry</Label>
                  <p className="mt-1 text-muted-foreground">{profileData.industry || "Not provided"}</p>
                </div>
                
                <Separator />
                
                <div>
                  <Label className="text-lg font-medium">Organization Size</Label>
                  <p className="mt-1 text-muted-foreground">{profileData.organization_size || "Not provided"}</p>
                </div>
                
                <Separator />
                
                <div>
                  <Label className="text-lg font-medium">Role</Label>
                  <p className="mt-1 text-muted-foreground">{profileData.role || "Not provided"}</p>
                </div>
                
                <Separator />
                
                <div>
                  <Label className="text-lg font-medium">Priority</Label>
                  <p className="mt-1 text-muted-foreground">{profileData.priority || "Not provided"}</p>
                </div>
                
                <Separator />
                
                <div>
                  <Label className="text-lg font-medium">Goals</Label>
                  {profileData.goals && profileData.goals.length > 0 ? (
                    <ul className="mt-1 list-disc list-inside text-muted-foreground">
                      {profileData.goals.map((goal, index) => (
                        <li key={index}>{goal}</li>
                      ))}
                    </ul>
                  ) : (
                    <p className="mt-1 text-muted-foreground">No goals provided</p>
                  )}
                </div>
                
                <div className="pt-4">
                  <Button 
                    onClick={() => navigate("/onboarding")}
                    className="w-full sm:w-auto"
                  >
                    Update Profile Information
                  </Button>
                </div>
              </CardContent>
            </Card>
          </TabsContent>
          
          <TabsContent value="analysis">
            <Card>
              <CardHeader>
                <CardTitle>AI Analysis</CardTitle>
              </CardHeader>
              <CardContent className="space-y-6">
                {analysis ? (
                  <>
                    <div className="p-4 bg-muted rounded-md">
                      <p className="italic">{analysis.analysis_text}</p>
                    </div>
                    
                    {analysis.is_approved === null ? (
                      <div className="space-y-4">
                        <p className="font-medium">Is this analysis accurate and helpful?</p>
                        
                        <div className="flex flex-col sm:flex-row gap-4">
                          <Button 
                            onClick={() => handleApproveAnalysis(true)}
                            variant="outline"
                            className="flex items-center gap-2"
                          >
                            <Check className="h-4 w-4" /> Yes, this is accurate
                          </Button>
                          
                          <Button 
                            onClick={() => setAnalysis(prev => prev ? {...prev, is_approved: false} : null)}
                            variant="outline"
                            className="flex items-center gap-2"
                          >
                            <X className="h-4 w-4" /> No, provide feedback
                          </Button>
                        </div>
                      </div>
                    ) : analysis.is_approved ? (
                      <div className="p-4 bg-green-100 dark:bg-green-900/20 rounded-md flex items-center gap-2">
                        <Check className="h-5 w-5 text-green-600 dark:text-green-400" />
                        <p>You've confirmed this analysis is accurate.</p>
                      </div>
                    ) : (
                      <div className="p-4 bg-amber-100 dark:bg-amber-900/20 rounded-md">
                        <p className="font-medium mb-2">Your feedback:</p>
                        <p className="text-muted-foreground">{analysis.feedback || "No detailed feedback provided"}</p>
                      </div>
                    )}
                    
                    {analysis.is_approved === false && analysis.feedback === null && (
                      <div className="space-y-4">
                        <Label htmlFor="feedback">Please provide feedback on what's inaccurate:</Label>
                        <Textarea 
                          id="feedback"
                          value={feedback}
                          onChange={(e) => setFeedback(e.target.value)}
                          placeholder="What's wrong with our analysis? How can we improve it?"
                          rows={4}
                        />
                        
                        <Button 
                          onClick={() => handleApproveAnalysis(false)}
                          disabled={!feedback.trim()}
                        >
                          Submit Feedback
                        </Button>
                      </div>
                    )}
                  </>
                ) : (
                  <div className="text-center py-6">
                    <p className="text-muted-foreground">No analysis available yet. Complete your profile to receive an analysis.</p>
                    
                    <Button 
                      onClick={() => navigate("/onboarding")}
                      className="mt-4"
                    >
                      Complete Profile
                    </Button>
                  </div>
                )}
              </CardContent>
            </Card>
          </TabsContent>
        </Tabs>
      </main>
      
      <footer className="text-center py-6 text-sm text-muted-foreground">
        © 2025 DataPilot+. Built for union intelligence.
      </footer>
    </div>
  );
}
</file>

<file path="src/pages/TeamInvites.tsx">
import { useState, useEffect } from "react";
import { Navigate, Link } from "react-router-dom";
import { useAuth } from "@/contexts/AuthContext";
import { supabase } from "@/integrations/supabase/client";
import { toast } from "@/hooks/use-toast";
import NavBar from "@/components/NavBar";
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Badge } from "@/components/ui/badge";
import { Tabs, TabsList, TabsTrigger, TabsContent } from "@/components/ui/tabs";
import { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle, AlertDialogTrigger } from "@/components/ui/alert-dialog";
import { format, isAfter, parseISO } from "date-fns";
import { Clock, Mail, Send, Trash2, UserPlus } from "lucide-react";

interface Invite {
  id: string;
  email: string;
  status: string;
  created_at: string;
  expires_at: string;
  accepted_at: string | null;
}

export default function TeamInvites() {
  const { user, session } = useAuth();
  const [invites, setInvites] = useState<Invite[]>([]);
  const [loading, setLoading] = useState(true);
  const [sending, setSending] = useState(false);
  const [newInviteEmail, setNewInviteEmail] = useState("");

  useEffect(() => {
    if (user) {
      loadInvites();
    }
  }, [user]);

  async function loadInvites() {
    try {
      setLoading(true);
      
      const { data, error } = await supabase
        .from("team_invites")
        .select("*")
        .eq("inviter_id", user?.id)
        .order("created_at", { ascending: false });

      if (error) throw error;
      setInvites(data || []);
    } catch (error: any) {
      toast({
        title: "Error",
        description: error.message || "Could not load invites",
        variant: "destructive",
      });
    } finally {
      setLoading(false);
    }
  }

  async function sendInvite() {
    if (!newInviteEmail) return;

    try {
      setSending(true);
      
      const { data, error } = await supabase
        .from("team_invites")
        .insert([
          {
            inviter_id: user?.id,
            email: newInviteEmail,
          }
        ])
        .select();

      if (error) throw error;
      
      toast({
        title: "Success!",
        description: "Invitation sent successfully",
      });
      
      setNewInviteEmail("");
      setInvites(prev => [...(data || []), ...prev]);
    } catch (error: any) {
      toast({
        title: "Error",
        description: error.message || "Failed to send invite",
        variant: "destructive",
      });
    } finally {
      setSending(false);
    }
  }

  async function cancelInvite(inviteId: string) {
    try {
      // Option 1: Delete the invite
      const { error } = await supabase
        .from("team_invites")
        .delete()
        .eq("id", inviteId);

      // Option 2: Update status to cancelled
      /* const { error } = await supabase
        .from("team_invites")
        .update({ status: "cancelled" })
        .eq("id", inviteId); */

      if (error) throw error;
      
      toast({
        title: "Invite Cancelled",
        description: "The invitation has been cancelled",
      });
      
      // Update the local state
      setInvites(prev => prev.filter(invite => invite.id !== inviteId));
    } catch (error: any) {
      toast({
        title: "Error",
        description: error.message || "Failed to cancel invite",
        variant: "destructive",
      });
    }
  }

  function getInviteStatus(invite: Invite) {
    if (invite.status === "accepted") return "Accepted";
    if (invite.status === "cancelled") return "Cancelled";
    if (invite.status === "expired" || isAfter(new Date(), parseISO(invite.expires_at))) return "Expired";
    return "Pending";
  }

  // Redirect if not logged in
  if (!session) {
    return <Navigate to="/auth" replace />;
  }

  return (
    <div className="relative min-h-screen flex flex-col">
      {/* Background gradient */}
      <div className="absolute inset-0 bg-gradient-to-br from-background to-secondary dark:from-background dark:to-card z-[-1]" />
      
      <NavBar />
      
      <main className="flex-1 container px-4 sm:px-6 py-8">
        <div className="flex justify-between items-center mb-6">
          <h1 className="text-3xl font-bold">Team Invites</h1>
          <Button asChild variant="outline" size="sm">
            <Link to="/profile" className="flex items-center gap-2">
              <span>Back to Profile</span>
            </Link>
          </Button>
        </div>
        
        <Card className="mb-8">
          <CardHeader>
            <CardTitle>Invite New Team Member</CardTitle>
            <CardDescription>
              Send an invitation to join your team
            </CardDescription>
          </CardHeader>
          <CardContent>
            <div className="flex gap-3">
              <div className="relative flex-1">
                <Mail className="absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground h-4 w-4" />
                <Input
                  type="email"
                  placeholder="colleague@example.com"
                  className="pl-10"
                  value={newInviteEmail}
                  onChange={(e) => setNewInviteEmail(e.target.value)}
                />
              </div>
              <Button 
                onClick={sendInvite} 
                disabled={sending || !newInviteEmail}
                className="flex gap-2"
              >
                {sending ? (
                  <>Sending...</>
                ) : (
                  <>
                    <UserPlus className="h-4 w-4" />
                    Send Invite
                  </>
                )}
              </Button>
            </div>
          </CardContent>
        </Card>
        
        <Tabs defaultValue="pending" className="w-full">
          <TabsList className="mb-6">
            <TabsTrigger value="pending">Pending</TabsTrigger>
            <TabsTrigger value="all">All Invites</TabsTrigger>
          </TabsList>
          
          <TabsContent value="pending">
            <div className="space-y-4">
              {loading ? (
                <Card>
                  <CardContent className="flex justify-center items-center h-32">
                    <div className="w-8 h-8 border-4 border-primary border-t-transparent rounded-full animate-spin"></div>
                  </CardContent>
                </Card>
              ) : (
                <>
                  {invites.filter(invite => getInviteStatus(invite) === "Pending").length > 0 ? (
                    invites
                      .filter(invite => getInviteStatus(invite) === "Pending")
                      .map(invite => (
                        <InviteCard 
                          key={invite.id} 
                          invite={invite} 
                          onCancel={cancelInvite} 
                        />
                      ))
                  ) : (
                    <Card>
                      <CardContent className="flex flex-col items-center justify-center h-32 text-center">
                        <Send className="h-8 w-8 text-muted-foreground mb-2 opacity-50" />
                        <p className="text-muted-foreground">No pending invites</p>
                        <p className="text-sm text-muted-foreground">Invite someone to join your team</p>
                      </CardContent>
                    </Card>
                  )}
                </>
              )}
            </div>
          </TabsContent>
          
          <TabsContent value="all">
            <div className="space-y-4">
              {loading ? (
                <Card>
                  <CardContent className="flex justify-center items-center h-32">
                    <div className="w-8 h-8 border-4 border-primary border-t-transparent rounded-full animate-spin"></div>
                  </CardContent>
                </Card>
              ) : (
                <>
                  {invites.length > 0 ? (
                    invites.map(invite => (
                      <InviteCard 
                        key={invite.id} 
                        invite={invite} 
                        onCancel={cancelInvite} 
                      />
                    ))
                  ) : (
                    <Card>
                      <CardContent className="flex flex-col items-center justify-center h-32 text-center">
                        <Send className="h-8 w-8 text-muted-foreground mb-2 opacity-50" />
                        <p className="text-muted-foreground">No invites found</p>
                        <p className="text-sm text-muted-foreground">Start by inviting someone to join your team</p>
                      </CardContent>
                    </Card>
                  )}
                </>
              )}
            </div>
          </TabsContent>
        </Tabs>
      </main>
      
      <footer className="text-center py-6 text-sm text-muted-foreground">
        © 2025 DataPilot+. Built for union intelligence.
      </footer>
    </div>
  );
}

function InviteCard({ invite, onCancel }: { invite: Invite, onCancel: (id: string) => void }) {
  const status = invite.status === "accepted" ? "Accepted" :
                 invite.status === "cancelled" ? "Cancelled" :
                 invite.status === "expired" || isAfter(new Date(), parseISO(invite.expires_at)) ? "Expired" :
                 "Pending";
  
  const statusColor = status === "Accepted" ? "bg-green-100 text-green-800 dark:bg-green-900/20 dark:text-green-400" :
                     status === "Pending" ? "bg-amber-100 text-amber-800 dark:bg-amber-900/20 dark:text-amber-400" :
                     "bg-gray-100 text-gray-800 dark:bg-gray-800 dark:text-gray-400";
  
  const isPending = status === "Pending";
  
  return (
    <Card>
      <CardContent className="flex flex-col sm:flex-row sm:items-center justify-between py-4 gap-4">
        <div className="flex flex-col">
          <div className="flex items-center gap-2">
            <Mail className="h-4 w-4 text-muted-foreground" />
            <span className="font-medium">{invite.email}</span>
            <Badge variant="secondary" className={statusColor}>
              {status}
            </Badge>
          </div>
          <div className="mt-1 flex items-center gap-2 text-xs text-muted-foreground">
            <Clock className="h-3 w-3" />
            <span>Sent {format(new Date(invite.created_at), "MMM d, yyyy")}</span>
            {isPending && (
              <span>• Expires {format(new Date(invite.expires_at), "MMM d, yyyy")}</span>
            )}
          </div>
        </div>
        
        {isPending && (
          <AlertDialog>
            <AlertDialogTrigger asChild>
              <Button variant="outline" size="sm">
                <Trash2 className="h-4 w-4 text-red-500" />
                <span className="sr-only">Cancel Invite</span>
              </Button>
            </AlertDialogTrigger>
            <AlertDialogContent>
              <AlertDialogHeader>
                <AlertDialogTitle>Cancel Invitation</AlertDialogTitle>
                <AlertDialogDescription>
                  Are you sure you want to cancel this invitation? This action cannot be undone.
                </AlertDialogDescription>
              </AlertDialogHeader>
              <AlertDialogFooter>
                <AlertDialogCancel>Keep Invite</AlertDialogCancel>
                <AlertDialogAction 
                  onClick={() => onCancel(invite.id)}
                  className="bg-red-600 hover:bg-red-700"
                >
                  Cancel Invite
                </AlertDialogAction>
              </AlertDialogFooter>
            </AlertDialogContent>
          </AlertDialog>
        )}
      </CardContent>
    </Card>
  );
}
</file>

<file path="src/utils/feedFilters.ts">
import { NewsArticle } from "@/hooks/useFeedData";

export function filterArticles(
  articles: NewsArticle[],
  searchQuery: string,
  selectedCompany: string,
  activeFilters: string[]
): NewsArticle[] {
  return articles.filter((article) => {
    const searchText = searchQuery.toLowerCase();
    const matchesSearch =
      article.title.toLowerCase().includes(searchText) ||
      (article.description && article.description.toLowerCase().includes(searchText)) ||
      (article.company_mentioned && article.company_mentioned.toLowerCase().includes(searchText));

    const matchesCompany = selectedCompany === "all" || 
      (article.company_mentioned && article.company_mentioned.toLowerCase().includes(selectedCompany.toLowerCase())) ||
      article.title.toLowerCase().includes(selectedCompany.toLowerCase()) ||
      (article.description && article.description.toLowerCase().includes(selectedCompany.toLowerCase()));

    const matchesFilters =
      activeFilters.length === 0 ||
      activeFilters.some((filter) =>
        article.title.toLowerCase().includes(filter) ||
        (article.description && article.description.toLowerCase().includes(filter)) ||
        (article.company_mentioned && article.company_mentioned.toLowerCase().includes(filter))
      );

    return matchesSearch && matchesCompany && matchesFilters;
  });
}

export const DEFAULT_FILTER_OPTIONS = [
  { label: "Construction", value: "construction" },
  { label: "Labor", value: "labor" },
  { label: "Union", value: "union" },
  { label: "Safety", value: "safety" },
  { label: "Contract", value: "contract" },
  { label: "Infrastructure", value: "infrastructure" },
];

export const ARTICLES_PER_PAGE = 6;
</file>

<file path="src/App.css">
#root {
  max-width: 1280px;
  margin: 0 auto;
  padding: 0;
  text-align: center;
}

.logo {
  height: 6em;
  padding: 1.5em;
  will-change: filter;
  transition: filter 300ms;
}
.logo:hover {
  filter: drop-shadow(0 0 2em rgba(255, 255, 255, 0.2));
}

@keyframes logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

@media (prefers-reduced-motion: no-preference) {
  a:nth-of-type(2) .logo {
    animation: logo-spin infinite 20s linear;
  }
}

.card {
  padding: 2em;
}

.read-the-docs {
  color: #888;
}

.dark body {
  background-color: #0A0F18;
  color: #fff;
}

.dark .card {
  background-color: #0B1220;
  border-color: #1A2235;
}

/* Command bar specific styles */
.command-bar {
  background-color: rgba(17, 17, 17, 0.95);
  backdrop-filter: blur(10px);
}

.scrollbar-none {
  -ms-overflow-style: none;
  scrollbar-width: none;
}

.scrollbar-none::-webkit-scrollbar {
  display: none;
}

/* Auth form animations */
@keyframes gradient-shift {
  0% {
    background-position: 0% 50%;
  }
  50% {
    background-position: 100% 50%;
  }
  100% {
    background-position: 0% 50%;
  }
}

.gradient-text {
  background: linear-gradient(90deg, currentColor, rgba(255, 255, 255, 0.8), currentColor);
  background-size: 200% auto;
  -webkit-background-clip: text;
  background-clip: text;
  -webkit-text-fill-color: transparent;
  animation: gradient-shift 3s ease infinite;
}

/* Glassmorphism effects */
.glass {
  backdrop-filter: blur(16px);
  background-color: rgba(255, 255, 255, 0.05);
  border: 1px solid rgba(255, 255, 255, 0.1);
}

.dark .glass {
  background-color: rgba(10, 15, 24, 0.5);
  border: 1px solid rgba(255, 255, 255, 0.05);
}

/* Button loading animation */
@keyframes pulse {
  0%, 100% {
    opacity: 1;
  }
  50% {
    opacity: 0.5;
  }
}

.btn-loading {
  animation: pulse 1.5s ease infinite;
}
</file>

<file path="src/main.tsx">
import { createRoot } from 'react-dom/client'
import App from './App.tsx'
import './index.css'

createRoot(document.getElementById("root")!).render(<App />);
</file>

<file path="src/vite-env.d.ts">
/// <reference types="vite/client" />
</file>

<file path="supabase/.temp/cli-latest">
v2.30.4
</file>

<file path="supabase/.temp/gotrue-version">
v2.176.1
</file>

<file path="supabase/.temp/pooler-url">
postgresql://postgres.jekpvqacecqnflweqmre:[YOUR-PASSWORD]@aws-0-us-east-2.pooler.supabase.com:6543/postgres
</file>

<file path="supabase/.temp/postgres-version">
15.8.1.079
</file>

<file path="supabase/.temp/project-ref">
jekpvqacecqnflweqmre
</file>

<file path="supabase/.temp/rest-version">
v12.2.3
</file>

<file path="supabase/.temp/storage-version">
custom-metadata
</file>

<file path="supabase/functions/analyze-article/index.ts">
import "https://deno.land/x/xhr@0.1.0/mod.ts";
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2';

const openAIApiKey = Deno.env.get('OPENAI_API_KEY');
const supabaseUrl = Deno.env.get('SUPABASE_URL')!;
const supabaseKey = Deno.env.get('SUPABASE_SERVICE_ROLE_KEY')!;

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  let articleId;
  try {
    const body = await req.text();
    if (!body) {
      return new Response(JSON.stringify({ error: 'Missing request body', success: false }), {
        status: 400,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      });
    }
    try {
      const json = JSON.parse(body);
      articleId = json.articleId;
    } catch (jsonErr) {
      console.error('Invalid JSON in request body:', body);
      return new Response(JSON.stringify({ error: 'Invalid JSON in request body', success: false }), {
        status: 400,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      });
    }
    if (!articleId) {
      return new Response(JSON.stringify({ error: 'Article ID is required', success: false }), {
        status: 400,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      });
    }
  } catch (err) {
    console.error('Error reading request body:', err);
    return new Response(JSON.stringify({ error: 'Error reading request body', success: false }), {
      status: 400,
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });
  }

  try {
    const supabase = createClient(supabaseUrl, supabaseKey);
    
    // Get the article
    const { data: article, error: fetchError } = await supabase
      .from('news_articles')
      .select('*')
      .eq('id', articleId)
      .single();

    if (fetchError || !article) {
      throw new Error('Article not found');
    }

    // Check if this is a regeneration request or if we have malformed JSON data
    const isRegeneration = article.is_analyzed === true;
    const hasMalformedData = article.local_825_relevance && article.local_825_relevance.trim().startsWith('{');

    if (isRegeneration || hasMalformedData) {
      console.log(`${isRegeneration ? 'Regenerating' : 'Fixing malformed'} analysis for article:`, article.title);
    } else {
      console.log('Analyzing article:', article.title);
    }

    if (!openAIApiKey) {
      throw new Error('OpenAI API key not configured');
    }

    // Prepare content for analysis
    const content = `Title: ${article.title}\n\nDescription: ${article.description || 'No description available'}\n\nURL: ${article.url}`;

    const response = await fetch('https://api.openai.com/v1/responses', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${openAIApiKey}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        model: "gpt-4.1",
        input: [
          {
            "role": "system",
            "content": [
              {
                "type": "input_text",
                "text": `You are an expert labor organizer and researcher for Operating Engineers Local 825 (IUOE), a union representing heavy equipment operators in New York and New Jersey. Your task is to analyze news articles and provide comprehensive intelligence for union leadership and members.

# Guidelines
- Analyze construction industry news for Local 825 relevance
- Focus on NY/NJ construction projects, labor disputes, safety issues
- Identify organizing opportunities and strategic implications
- Provide actionable insights for union leadership

# Output Format
Respond with valid JSON in this exact format:
{
  "excerpt": "2-3 sentence summary of key points",
  "full_analysis": "Detailed markdown analysis with sections for Incident Summary, Key Players, and Implications",
  "local_825_relevance": "Markdown analysis of relevance to Local 825 organizing and member interests"
}

# Analysis Focus
- Construction/infrastructure projects involving Local 825 members
- Labor disputes, safety issues, regulatory changes affecting operators
- Economic trends impacting construction industry
- Political developments affecting unions or infrastructure spending
- Companies that Local 825 members work for or may organize`
              }
            ]
          },
          {
            "role": "user",
            "content": [
              {
                "type": "input_text",
                "text": `Analyze this news article for Local 825 Operating Engineers union intelligence:

${content}

Provide comprehensive analysis including excerpt, full analysis, and Local 825 relevance.`
              }
            ]
          }
        ],
        text: {
          "format": {
            "type": "text"
          }
        },
        reasoning: {},
        tools: [
          {
            "type": "web_search_preview",
            "user_location": {
              "type": "approximate",
              "country": "US",
              "region": "new jersey"
            },
            "search_context_size": "high"
          }
        ],
        temperature: 0.7,
        max_output_tokens: 2000,
        top_p: 1,
        store: false
      }),
    });

    if (!response.ok) {
      throw new Error(`OpenAI API error: ${response.statusText}`);
    }

    const aiData = await response.json();
    const analysisText = aiData.output[0].text;
    
    if (!analysisText) {
      throw new Error('No response content from OpenAI');
    }
    
    let analysis;
    try {
      // Clean the response to ensure it's valid JSON
      const cleanedResponse = analysisText.trim();
      const jsonMatch = cleanedResponse.match(/\{[\s\S]*\}/);
      
      if (jsonMatch) {
        analysis = JSON.parse(jsonMatch[0]);
      } else {
        throw new Error('No valid JSON found in response');
      }
      
      // Validate required fields
      if (!analysis.excerpt || !analysis.full_analysis || !analysis.local_825_relevance) {
        throw new Error('Missing required fields in analysis');
      }
      
    } catch (parseError) {
      console.error('Failed to parse AI response as JSON:', analysisText);
      // Fallback: create structured response from text
      analysis = {
        excerpt: `Analysis of ${article.title}: ${analysisText.substring(0, 200)}...`,
        full_analysis: `## Analysis\n\n${analysisText}`,
        local_825_relevance: `## Local 825 Relevance\n\nThis article requires manual review to determine specific relevance to Local 825 members and operations.\n\n**Potential Areas of Interest:**\n- Construction industry developments\n- Safety and regulatory issues\n- Labor relations and organizing opportunities`
      };
    }

    // Update the article with analysis
    const { error: updateError } = await supabase
      .from('news_articles')
      .update({
        excerpt: analysis.excerpt,
        full_analysis: analysis.full_analysis,
        local_825_relevance: analysis.local_825_relevance,
        is_analyzed: true,
        analyzed_at: new Date().toISOString()
      })
      .eq('id', articleId);

    if (updateError) {
      throw updateError;
    }

    console.log(`Successfully ${isRegeneration || hasMalformedData ? 'regenerated' : 'analyzed'} article:`, article.title);

    return new Response(JSON.stringify({ 
      success: true, 
      analysis: analysis
    }), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });

  } catch (error) {
    console.error('Error in analyze-article function:', error);
    return new Response(JSON.stringify({ 
      error: error.message,
      success: false 
    }), {
      status: 500,
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });
  }
});
</file>

<file path="supabase/functions/company-research/index.ts">
import "https://deno.land/x/xhr@0.1.0/mod.ts";
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2';

const supabaseUrl = Deno.env.get('SUPABASE_URL')!;
const supabaseKey = Deno.env.get('SUPABASE_SERVICE_ROLE_KEY')!;

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const { companyName } = await req.json();
    
    if (!companyName) {
      throw new Error('Company name is required');
    }

    const supabase = createClient(supabaseUrl, supabaseKey);

    // Check if we already have a recent analysis for this company
    const { data: existingAnalysis } = await supabase
      .from('company_research')
      .select('*')
      .eq('company_name', companyName)
      .order('created_at', { ascending: false })
      .limit(1);

    // If we have a recent analysis (within 7 days), return it
    if (existingAnalysis && existingAnalysis.length > 0) {
      const lastAnalysis = existingAnalysis[0];
      const daysSinceAnalysis = (Date.now() - new Date(lastAnalysis.created_at).getTime()) / (1000 * 60 * 60 * 24);
      
      if (daysSinceAnalysis < 7) {
        return new Response(JSON.stringify({
          success: true,
          data: lastAnalysis,
          cached: true
        }), {
          headers: { ...corsHeaders, 'Content-Type': 'application/json' },
        });
      }
    }

    // Generate comprehensive company research using Flowise API
    const response = await fetch('https://flowise-production-1547.up.railway.app/api/v1/prediction/3ca919fb-da88-4c9d-93bb-2be993cfca9f', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        question: `Conduct comprehensive research on ${companyName} for Local 825 Operating Engineers union intelligence. Focus on their operations in New York and New Jersey, their equipment usage, safety record, union status, and organizing potential. Provide a detailed research report in markdown format with all the standard sections for union intelligence.`
      }),
    });

    if (!response.ok) {
      throw new Error(`Flowise API error: ${response.statusText}`);
    }

    const aiData = await response.json();
    const researchText = aiData.text || aiData.response || aiData.answer;
    
    if (!researchText) {
      throw new Error('No response content from Flowise API');
    }

    // Store the research in the database
    const { data: researchData, error: insertError } = await supabase
      .from('company_research')
      .insert({
        company_name: companyName,
        research_content: researchText,
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString(),
        is_active: true
      })
      .select()
      .single();

    if (insertError) {
      console.error('Error storing research:', insertError);
      throw insertError;
    }

    return new Response(JSON.stringify({
      success: true,
      data: researchData,
      cached: false
    }), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });

  } catch (error) {
    console.error('Error in company research:', error);
    return new Response(JSON.stringify({ 
      error: error.message,
      success: false 
    }), {
      status: 500,
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });
  }
});
</file>

<file path="supabase/functions/delete-historical-report/index.ts">
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2';

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response('ok', { headers: corsHeaders });
  }

  try {
    const supabase = createClient(
      Deno.env.get('SUPABASE_URL') ?? '',
      Deno.env.get('SUPABASE_SERVICE_ROLE_KEY') ?? ''
    );

    const { targetDate, deleteAll } = await req.json();

    console.log('Delete request:', { targetDate, deleteAll });

    if (!deleteAll && !targetDate) {
      return new Response(
        JSON.stringify({ error: 'targetDate or deleteAll required' }),
        { status: 400, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
      );
    }

    let deleteQuery = supabase.from('daily_analytics').delete();
    
    if (deleteAll) {
      // Delete all historical reports (no filter)
      console.log('Deleting all historical reports');
    } else if (targetDate) {
      // Delete by specific date
      console.log(`Deleting reports for date: ${targetDate}`);
      deleteQuery = deleteQuery.eq('analysis_date', targetDate);
    }

    const { error, count } = await deleteQuery.select('id', { count: 'exact' });
    
    if (error) {
      console.error('Delete error:', error);
      throw error;
    }

    console.log(`Successfully deleted ${count} reports`);

    return new Response(
      JSON.stringify({
        success: true,
        deleted: count,
        message: deleteAll
          ? `Deleted all historical reports from daily_analytics.`
          : `Deleted historical report(s) for date: ${targetDate}`,
      }),
      { headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
    );
  } catch (error) {
    console.error('Function error:', error);
    return new Response(
      JSON.stringify({ success: false, error: error.message }),
      { status: 500, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
    );
  }
});
</file>

<file path="supabase/functions/enhance-job-analysis/index.ts">
import "https://deno.land/x/xhr@0.1.0/mod.ts";
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2';

const openAIApiKey = Deno.env.get('OPENAI_API_KEY');
const supabaseUrl = Deno.env.get('SUPABASE_URL')!;
const supabaseKey = Deno.env.get('SUPABASE_SERVICE_ROLE_KEY')!;

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const { jobId } = await req.json();
    
    if (!jobId) {
      throw new Error('Job ID is required');
    }

    const supabase = createClient(supabaseUrl, supabaseKey);
    
    // Get the job
    const { data: job, error: fetchError } = await supabase
      .from('job_listings')
      .select('*')
      .eq('id', jobId)
      .single();

    if (fetchError || !job) {
      throw new Error('Job not found');
    }

    console.log('Enhancing analysis for job:', job.title);

    if (!openAIApiKey) {
      throw new Error('OpenAI API key not configured');
    }

    // Prepare content for enhanced analysis
    const content = `Job Title: ${job.title}
Company: ${job.company || 'Not specified'}
Location: ${job.location || 'Not specified'}
Pay Range: ${job.pay_range || 'Not specified'}
Job Type: ${job.job_type || 'Not specified'}
Priority: ${job.priority || 'Not specified'}

Job Description:
${job.raw_content || job.formatted_description || 'No description available'}

Current AI Analysis:
${job.ai_analysis || 'No existing analysis'}

Current Insights:
${job.insights || 'No existing insights'}`;

    const response = await fetch('https://api.openai.com/v1/responses', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${openAIApiKey}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        prompt: {
          id: "pmpt_685ef9dfbe408194a49f91a5b7b72b05045fb215e68965fd",
          version: "1"
        },
        input: [
          {
            type: "text",
            text: `You are an expert labor organizer and construction industry analyst for Local 825 Operating Engineers union. Analyze this job posting and provide comprehensive insights for union members.

**Your analysis should include:**

1. **Enhanced Job Analysis** (JSON format):
   - improvedTitle: Better job title based on actual role
   - company: Extracted company name
   - location: Extracted location with NY/NJ focus
   - payRange: Extracted or estimated pay range
   - priority: high/medium/low based on Local 825 relevance
   - jobType: field/office/mechanic/admin
   - unionFriendly: true/false based on company reputation
   - equipmentTypes: List of heavy equipment mentioned
   - certifications: Required safety or equipment certifications
   - experienceLevel: Entry/mid/senior level position

2. **Strategic Insights** (Markdown format):
   - Union organizing opportunities
   - Safety considerations
   - Training requirements
   - Career advancement potential
   - Market positioning

3. **Local 825 Relevance** (Markdown format):
   - How this job relates to Local 825 members
   - Potential organizing opportunities
   - Industry trends this represents
   - Strategic implications for the union

**Job to analyze:**
${content}

**Respond with valid JSON in this exact format:**
{
  "enhanced_analysis": {
    "improvedTitle": "string",
    "company": "string",
    "location": "string", 
    "payRange": "string",
    "priority": "high/medium/low",
    "jobType": "field/office/mechanic/admin",
    "unionFriendly": true/false,
    "equipmentTypes": ["array", "of", "equipment"],
    "certifications": ["array", "of", "certifications"],
    "experienceLevel": "entry/mid/senior"
  },
  "strategic_insights": "markdown formatted strategic analysis",
  "local_825_relevance": "markdown formatted relevance analysis"
}`
          }
        ],
        max_output_tokens: 3000,
        store: false
      }),
    });

    if (!response.ok) {
      throw new Error(`OpenAI API error: ${response.statusText}`);
    }

    const aiData = await response.json();
    const analysisText = aiData.output[0].text;
    
    let analysis;
    try {
      // Clean the response to ensure it's valid JSON
      const cleanedResponse = analysisText.trim();
      const jsonMatch = cleanedResponse.match(/\{[\s\S]*\}/);
      
      if (jsonMatch) {
        analysis = JSON.parse(jsonMatch[0]);
      } else {
        throw new Error('No valid JSON found in response');
      }
      
      // Validate required fields
      if (!analysis.enhanced_analysis || !analysis.strategic_insights || !analysis.local_825_relevance) {
        throw new Error('Missing required fields in analysis');
      }
      
    } catch (parseError) {
      console.error('Failed to parse AI response as JSON:', analysisText);
      // Fallback: create structured response from text
      analysis = {
        enhanced_analysis: {
          improvedTitle: job.title,
          company: job.company,
          location: job.location,
          payRange: job.pay_range,
          priority: job.priority,
          jobType: job.job_type,
          unionFriendly: false,
          equipmentTypes: [],
          certifications: [],
          experienceLevel: 'mid'
        },
        strategic_insights: `## Strategic Analysis\n\n${analysisText}`,
        local_825_relevance: `## Local 825 Relevance\n\nThis job requires manual review to determine specific relevance to Local 825 members.\n\n**Potential Areas of Interest:**\n- Construction industry developments\n- Equipment operation opportunities\n- Safety and certification requirements\n- Union organizing potential`
      };
    }

    // Update the job with enhanced analysis
    const { error: updateError } = await supabase
      .from('job_listings')
      .update({
        ai_analysis: JSON.stringify(analysis.enhanced_analysis),
        insights: analysis.strategic_insights,
        local_825_relevance: analysis.local_825_relevance,
        enhanced_at: new Date().toISOString()
      })
      .eq('id', jobId);

    if (updateError) {
      throw updateError;
    }

    console.log(`Successfully enhanced analysis for job:`, job.title);

    return new Response(
      JSON.stringify({
        success: true,
        message: 'Job analysis enhanced successfully',
        data: {
          enhanced_analysis: analysis.enhanced_analysis,
          strategic_insights: analysis.strategic_insights,
          local_825_relevance: analysis.local_825_relevance
        }
      }),
      { headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
    );

  } catch (error) {
    console.error('Error enhancing job analysis:', error);
    return new Response(
      JSON.stringify({
        success: false,
        error: error.message
      }),
      { 
        status: 500,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' } 
      }
    );
  }
});
</file>

<file path="supabase/functions/format-job-description/index.ts">
import { serve } from "https://deno.land/std@0.168.0/http/server.ts"

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
}

// Function to pre-clean henjii.com content
function preCleanContent(content: string): string {
  return content
    .replace(/&#8230;/g, '...')
    .replace(/&#38;/g, '&')
    .replace(/&nbsp;/g, ' ')
    .replace(/&amp;/g, '&')
    .replace(/&lt;/g, '<')
    .replace(/&gt;/g, '>')
    .replace(/&quot;/g, '"')
    .replace(/&#8217;/g, "'")
    .replace(/&#8216;/g, "'")
    .replace(/&#8220;/g, '"')
    .replace(/&#8221;/g, '"')
    .replace(/&#8211;/g, '–')
    .replace(/&#8212;/g, '—')
    .replace(/&ndash;/g, '–')
    .replace(/&mdash;/g, '—')
    .replace(/\n\s*\n\s*\n/g, '\n\n') // Remove excessive line breaks
    .replace(/\s+/g, ' ') // Normalize whitespace
    .trim();
}

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response('ok', { headers: corsHeaders })
  }

  try {
    const { jobDescription, title, company } = await req.json();
    
    const openaiApiKey = Deno.env.get('OPENAI_API_KEY');
    if (!openaiApiKey) {
      throw new Error('OpenAI API key not configured');
    }

    // Pre-clean the content
    const cleanedContent = preCleanContent(jobDescription);

    const response = await fetch('https://api.openai.com/v1/responses', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${openaiApiKey}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        prompt: {
          id: "pmpt_685ef9dfbe408194a49f91a5b7b72b05045fb215e68965fd",
          version: "1"
        },
        input: [
          {
            type: "text",
            text: `You are a professional job description formatter specializing in construction and labor positions for Local 825 Operating Engineers union members. Your task is to clean up and optimize job descriptions by:

1. **Removing unnecessary content**: Strip out marketing fluff, repetitive information, and irrelevant details
2. **Organizing information**: Structure content into clear, scannable sections with proper markdown formatting
3. **Highlighting key details**: Emphasize important information like pay, location, requirements, and benefits
4. **Union-friendly formatting**: Make content easy to read for union members and job seekers
5. **Preserving essential details**: Keep all important information like pay rates, locations, requirements, and contact info

**Format the output as clean markdown with these sections:**
- ## Position Overview
- ## Key Responsibilities  
- ## Requirements & Qualifications
- ## Benefits & Compensation
- ## How to Apply

**Special considerations for Local 825 members:**
- Highlight heavy equipment operation requirements
- Emphasize safety requirements and certifications
- Note union-friendly companies or union positions
- Include relevant construction industry experience requirements

Clean up and optimize this job description for: **${title}** at **${company}**

**Raw job description:**
${cleanedContent}

Please format this into a clean, professional job description that focuses on the essential information a Local 825 member needs. Remove redundant content, organize it clearly, and use proper markdown formatting with headers, bullet points, and emphasis where appropriate.`
          }
        ],
        max_output_tokens: 2500,
        store: false
      }),
    });

    if (!response.ok) {
      throw new Error(`OpenAI API error: ${response.status}`);
    }

    const data = await response.json();
    const formattedDescription = data.output[0].text;

    return new Response(
      JSON.stringify({ 
        formattedDescription,
        originalLength: jobDescription.length,
        formattedLength: formattedDescription.length,
        improvement: Math.round(((jobDescription.length - formattedDescription.length) / jobDescription.length) * 100)
      }),
      { headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
    );

  } catch (error) {
    console.error('Error formatting job description:', error);
    return new Response(
      JSON.stringify({ error: error.message }),
      { 
        status: 500,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' }
      }
    );
  }
})
</file>

<file path="supabase/functions/import-company-research/index.ts">
import "https://deno.land/x/xhr@0.1.0/mod.ts";
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2';

const supabaseUrl = Deno.env.get('SUPABASE_URL')!;
const supabaseKey = Deno.env.get('SUPABASE_SERVICE_ROLE_KEY')!;

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const { companyName, reportContent, userId } = await req.json();
    
    if (!companyName || !reportContent || !userId) {
      throw new Error('Company name, report content, and user ID are required');
    }

    const supabase = createClient(supabaseUrl, supabaseKey);

    // Process the report content with Flowise to ensure proper formatting and structure
    const response = await fetch('https://flowise-production-1547.up.railway.app/api/v1/prediction/3ca919fb-da88-4c9d-93bb-2be993cfca9f', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        question: `Please process and enhance this existing company research report for ${companyName}. Ensure it follows the proper format and structure for Local 825 union intelligence while maintaining all original information:

${reportContent}

Process this report to ensure it has all required sections and proper formatting while maintaining all original information.`
      }),
    });

    if (!response.ok) {
      throw new Error(`Flowise API error: ${response.statusText}`);
    }

    const aiData = await response.json();
    const processedContent = aiData.text || aiData.response || aiData.answer;
    
    if (!processedContent) {
      throw new Error('No response content from Flowise API');
    }

    // Check if research already exists for this company
    const { data: existingResearch } = await supabase
      .from('company_research')
      .select('*')
      .eq('company_name', companyName)
      .eq('user_id', userId)
      .order('created_at', { ascending: false })
      .limit(1);

    let researchData;
    
    if (existingResearch && existingResearch.length > 0) {
      // Update existing research
      const { data, error: updateError } = await supabase
        .from('company_research')
        .update({
          research_content: processedContent,
          updated_at: new Date().toISOString(),
        })
        .eq('id', existingResearch[0].id)
        .select()
        .single();

      if (updateError) {
        console.error('Error updating research:', updateError);
        throw updateError;
      }

      researchData = data;
    } else {
      // Insert new research
      const { data, error: insertError } = await supabase
        .from('company_research')
        .insert({
          company_name: companyName,
          research_content: processedContent,
          user_id: userId,
          created_at: new Date().toISOString(),
          updated_at: new Date().toISOString(),
          is_active: true
        })
        .select()
        .single();

      if (insertError) {
        console.error('Error inserting research:', insertError);
        throw insertError;
      }

      researchData = data;
    }

    return new Response(JSON.stringify({
      success: true,
      data: researchData,
      action: existingResearch && existingResearch.length > 0 ? 'updated' : 'created'
    }), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });

  } catch (error) {
    console.error('Error in import company research:', error);
    return new Response(JSON.stringify({ 
      error: error.message,
      success: false 
    }), {
      status: 500,
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });
  }
});
</file>

<file path="supabase/functions/send-company-request-webhook/index.ts">
import { serve } from "https://deno.land/std@0.168.0/http/server.ts"

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
}

serve(async (req) => {
  // Handle CORS preflight requests
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders })
  }

  try {
    const { user_email, company_name, company_address, reason, request_id } = await req.json()

    // Validate required fields
    if (!user_email || !company_name || !request_id) {
      return new Response(
        JSON.stringify({ error: 'Missing required fields' }),
        { 
          status: 400, 
          headers: { ...corsHeaders, 'Content-Type': 'application/json' } 
        }
      )
    }

    // Prepare webhook payload
    const webhookPayload = {
      event: 'company_request_submitted',
      timestamp: new Date().toISOString(),
      data: {
        request_id,
        user_email,
        company_name,
        company_address: company_address || null,
        reason: reason || null,
      }
    }

    console.log('Sending webhook payload:', webhookPayload)

    // Note: The actual n8n webhook URL will be configured by the team
    // For now, we'll just log the payload and return success
    // In production, uncomment and configure the actual webhook call:
    
    /*
    const webhookUrl = Deno.env.get('N8N_WEBHOOK_URL')
    if (webhookUrl) {
      const webhookResponse = await fetch(webhookUrl, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(webhookPayload),
      })

      if (!webhookResponse.ok) {
        console.error('Webhook failed:', await webhookResponse.text())
        throw new Error('Webhook delivery failed')
      }
    }
    */

    return new Response(
      JSON.stringify({ 
        success: true, 
        message: 'Company request webhook sent successfully' 
      }),
      { 
        status: 200, 
        headers: { ...corsHeaders, 'Content-Type': 'application/json' } 
      }
    )

  } catch (error) {
    console.error('Error in send-company-request-webhook:', error)
    
    return new Response(
      JSON.stringify({ 
        error: 'Internal server error',
        details: error.message 
      }),
      { 
        status: 500, 
        headers: { ...corsHeaders, 'Content-Type': 'application/json' } 
      }
    )
  }
})
</file>

<file path="supabase/functions/send-signup-webhook/index.ts">
import { serve } from "https://deno.land/std@0.190.0/http/server.ts";
import { createClient } from "https://esm.sh/@supabase/supabase-js@2";

const corsHeaders = {
  "Access-Control-Allow-Origin": "*",
  "Access-Control-Allow-Headers": "authorization, x-client-info, apikey, content-type",
};

interface WebhookPayload {
  email: string;
  name: string;
  type: string;
  timestamp: string;
  ip_address?: string;
  industry?: string;
  organization_size?: string;
  role?: string;
  priority?: string;
  goals?: string[];
}

const handler = async (req: Request): Promise<Response> => {
  if (req.method === "OPTIONS") {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const { 
      email, 
      name, 
      ip_address,
      industry,
      organization_size,
      role,
      priority,
      goals
    }: { 
      email: string; 
      name: string; 
      ip_address?: string;
      industry?: string;
      organization_size?: string;
      role?: string;
      priority?: string;
      goals?: string[];
    } = await req.json();

    const webhookUrl = "https://flow.henjii.com/webhook-test/9b44c640-181c-463c-a71f-0b4da14058ee";
    
    const payload: WebhookPayload = {
      email,
      name,
      type: "user_signup",
      timestamp: new Date().toISOString(),
      ip_address,
      industry,
      organization_size,
      role,
      priority,
      goals
    };

    console.log("Sending webhook payload:", payload);

    const webhookResponse = await fetch(webhookUrl, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify(payload),
    });

    if (!webhookResponse.ok) {
      console.error("Webhook failed:", await webhookResponse.text());
      throw new Error(`Webhook failed with status: ${webhookResponse.status}`);
    }

    console.log("Webhook sent successfully");

    return new Response(
      JSON.stringify({ success: true, message: "Webhook sent successfully" }),
      {
        status: 200,
        headers: { "Content-Type": "application/json", ...corsHeaders },
      }
    );
  } catch (error: any) {
    console.error("Error in send-signup-webhook function:", error);
    return new Response(
      JSON.stringify({ error: error.message }),
      {
        status: 500,
        headers: { "Content-Type": "application/json", ...corsHeaders },
      }
    );
  }
};

serve(handler);
</file>

<file path="supabase/functions/setup-analytics-cron/index.ts">
import { serve } from "https://deno.land/std@0.168.0/http/server.ts"
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2'

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
}

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response('ok', { headers: corsHeaders })
  }

  try {
    const supabaseClient = createClient(
      Deno.env.get('SUPABASE_URL') ?? '',
      Deno.env.get('SUPABASE_SERVICE_ROLE_KEY') ?? ''
    )

    console.log('Setting up analytics cron jobs...');

    // This would be run manually to set up the cron jobs
    // The actual SQL should be run in the Supabase SQL editor
    const cronSetupSQL = `
-- Enable the pg_cron extension if not already enabled
-- CREATE EXTENSION IF NOT EXISTS pg_cron;

-- Schedule analytics generation at 6 AM daily
SELECT cron.schedule(
  'generate-morning-analytics',
  '0 6 * * *',
  $$
  SELECT
    net.http_post(
        url:='${Deno.env.get('SUPABASE_URL')}/functions/v1/generate-daily-analytics',
        headers:='{"Content-Type": "application/json", "Authorization": "Bearer ${Deno.env.get('SUPABASE_ANON_KEY')}"}'::jsonb,
        body:='{"scheduled": true}'::jsonb
    ) as request_id;
  $$
);

-- Schedule analytics generation at 6 PM daily
SELECT cron.schedule(
  'generate-evening-analytics',
  '0 18 * * *',
  $$
  SELECT
    net.http_post(
        url:='${Deno.env.get('SUPABASE_URL')}/functions/v1/generate-daily-analytics',
        headers:='{"Content-Type": "application/json", "Authorization": "Bearer ${Deno.env.get('SUPABASE_ANON_KEY')}"}'::jsonb,
        body:='{"scheduled": true}'::jsonb
    ) as request_id;
  $$
);
    `;

    return new Response(
      JSON.stringify({
        success: true,
        message: 'Cron job setup SQL generated',
        sql: cronSetupSQL,
        instructions: 'Run this SQL in your Supabase SQL editor to set up the cron jobs'
      }),
      { headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
    );

  } catch (error) {
    console.error('Error setting up cron jobs:', error);
    return new Response(
      JSON.stringify({
        success: false,
        error: error.message
      }),
      { 
        status: 500,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' }
      }
    );
  }
})
</file>

<file path="supabase/functions/update-content-categories/index.ts">
import "https://deno.land/x/xhr@0.1.0/mod.ts";
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2';

const supabaseUrl = Deno.env.get('SUPABASE_URL')!;
const supabaseKey = Deno.env.get('SUPABASE_SERVICE_ROLE_KEY')!;

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

// Function to determine content type and category
function categorizeContent(title: string, description: string, url: string): {
  wordpress_category: string;
  content_type: string;
  priority_level: string;
} {
  const content = `${title} ${description}`.toLowerCase();
  const urlLower = url.toLowerCase();
  
  // Check if it's job-related
  const jobKeywords = [
    'hiring', 'job opening', 'employment', 'career', 'position', 'vacancy',
    'seeking', 'looking for', 'apply', 'resume', 'salary', 'benefits',
    'full-time', 'part-time', 'contractor', 'apprentice', 'operator position',
    'engineer position', 'technician position', 'mechanic position',
    'job summary', 'company:', 'location:', 'date posted:', 'view job details'
  ];
  
  const isJob = jobKeywords.some(keyword => content.includes(keyword)) ||
                urlLower.includes('employer-watch') ||
                urlLower.includes('/job-') ||
                urlLower.includes('/jobs/');
  
  if (isJob) {
    return {
      wordpress_category: 'employer-watch',
      content_type: 'job',
      priority_level: 'medium'
    };
  }
  
  // Check if it's Local 825 content
  const isLocal825 = urlLower.includes('local-825') || 
                    title.toLowerCase().includes('local 825') || 
                    title.toLowerCase().includes('iuoe') ||
                    title.toLowerCase().includes('operating engineers');
  
  if (isLocal825) {
    const isAnnouncement = title.toLowerCase().includes('announcement') || 
                          title.toLowerCase().includes('update') ||
                          title.toLowerCase().includes('notice');
    
    return {
      wordpress_category: 'local-825',
      content_type: isAnnouncement ? 'announcement' : 'news',
      priority_level: 'high'
    };
  }
  
  // Default categorization
  return {
    wordpress_category: 'local-825',
    content_type: 'news',
    priority_level: 'medium'
  };
}

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const supabase = createClient(supabaseUrl, supabaseKey);
    
    console.log('Starting content categorization update...');
    
    // Update news articles
    const { data: articles, error: articlesError } = await supabase
      .from('news_articles')
      .select('id, title, description, url, wordpress_category, content_type, priority_level')
      .limit(1000); // Process in batches
    
    if (articlesError) throw articlesError;
    
    let updatedArticles = 0;
    let updatedJobs = 0;
    
    // Update articles that don't have proper categorization
    for (const article of articles || []) {
      if (!article.wordpress_category || !article.content_type) {
        const categorization = categorizeContent(article.title, article.description || '', article.url);
        
        const { error: updateError } = await supabase
          .from('news_articles')
          .update({
            wordpress_category: categorization.wordpress_category,
            content_type: categorization.content_type,
            priority_level: categorization.priority_level
          })
          .eq('id', article.id);
        
        if (updateError) {
          console.error(`Error updating article ${article.id}:`, updateError);
        } else {
          updatedArticles++;
        }
      }
    }
    
    // Update job listings
    const { data: jobs, error: jobsError } = await supabase
      .from('job_listings')
      .select('id, title, raw_content, url, wordpress_category, source_type')
      .limit(1000);
    
    if (jobsError) throw jobsError;
    
    for (const job of jobs || []) {
      if (!job.wordpress_category || !job.source_type) {
        const { error: updateError } = await supabase
          .from('job_listings')
          .update({
            wordpress_category: 'employer-watch',
            source_type: 'henjii'
          })
          .eq('id', job.id);
        
        if (updateError) {
          console.error(`Error updating job ${job.id}:`, updateError);
        } else {
          updatedJobs++;
        }
      }
    }
    
    console.log(`Updated ${updatedArticles} articles and ${updatedJobs} jobs`);
    
    return new Response(
      JSON.stringify({
        success: true,
        message: 'Content categorization updated successfully',
        summary: {
          articles_updated: updatedArticles,
          jobs_updated: updatedJobs
        }
      }),
      { headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
    );
    
  } catch (error) {
    console.error('Error updating content categories:', error);
    return new Response(
      JSON.stringify({
        success: false,
        error: error.message
      }),
      { 
        status: 500,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' } 
      }
    );
  }
});
</file>

<file path="supabase/migrations/20250101000000_add_job_analysis_fields.sql">
-- Add new fields for enhanced job analysis
ALTER TABLE job_listings 
ADD COLUMN IF NOT EXISTS local_825_relevance TEXT,
ADD COLUMN IF NOT EXISTS enhanced_at TIMESTAMP WITH TIME ZONE,
ADD COLUMN IF NOT EXISTS wordpress_category TEXT,
ADD COLUMN IF NOT EXISTS source_type TEXT DEFAULT 'henjii.com';

-- Add index for enhanced_at to improve query performance
CREATE INDEX IF NOT EXISTS idx_job_listings_enhanced_at ON job_listings(enhanced_at);

-- Add index for wordpress_category for filtering
CREATE INDEX IF NOT EXISTS idx_job_listings_wordpress_category ON job_listings(wordpress_category);

-- Add index for source_type for filtering
CREATE INDEX IF NOT EXISTS idx_job_listings_source_type ON job_listings(source_type);

-- Update existing records to set default source_type
UPDATE job_listings 
SET source_type = 'henjii.com' 
WHERE source_type IS NULL;

-- Add comment to document the new fields
COMMENT ON COLUMN job_listings.local_825_relevance IS 'AI-generated analysis of job relevance to Local 825 union members';
COMMENT ON COLUMN job_listings.enhanced_at IS 'Timestamp when the job analysis was last enhanced';
COMMENT ON COLUMN job_listings.wordpress_category IS 'WordPress category from the source feed';
COMMENT ON COLUMN job_listings.source_type IS 'Source of the job listing (e.g., henjii.com)';
</file>

<file path="supabase/migrations/20250102000000_add_company_research_table.sql">
-- Create company_research table for storing comprehensive company research reports
CREATE TABLE IF NOT EXISTS company_research (
  id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
  company_name TEXT NOT NULL,
  research_content TEXT NOT NULL,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  is_active BOOLEAN DEFAULT true,
  user_id UUID REFERENCES auth.users(id) ON DELETE CASCADE,
  created_by UUID REFERENCES auth.users(id) ON DELETE SET NULL
);

-- Create index for faster lookups
CREATE INDEX IF NOT EXISTS idx_company_research_company_name ON company_research(company_name);
CREATE INDEX IF NOT EXISTS idx_company_research_created_at ON company_research(created_at DESC);
CREATE INDEX IF NOT EXISTS idx_company_research_user_id ON company_research(user_id);

-- Enable RLS
ALTER TABLE company_research ENABLE ROW LEVEL SECURITY;

-- RLS policies
CREATE POLICY "Users can view their own company research" ON company_research
  FOR SELECT USING (auth.uid() = user_id);

CREATE POLICY "Users can insert their own company research" ON company_research
  FOR INSERT WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Users can update their own company research" ON company_research
  FOR UPDATE USING (auth.uid() = user_id);

CREATE POLICY "Users can delete their own company research" ON company_research
  FOR DELETE USING (auth.uid() = user_id);

-- Allow service role to access all records
CREATE POLICY "Service role can access all company research" ON company_research
  FOR ALL USING (auth.role() = 'service_role');
</file>

<file path="supabase/migrations/20250619170248_e27d9c53-c590-4d6c-9a04-85df8d6893d8.sql">
-- Create a table for news sources and RSS feeds
CREATE TABLE public.news_sources (
  id UUID NOT NULL DEFAULT gen_random_uuid() PRIMARY KEY,
  name TEXT NOT NULL,
  description TEXT,
  rss_url TEXT NOT NULL,
  company_names TEXT[], -- Array of company names this feed tracks
  is_active BOOLEAN NOT NULL DEFAULT true,
  created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(),
  updated_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now()
);

-- Create a table for news articles
CREATE TABLE public.news_articles (
  id UUID NOT NULL DEFAULT gen_random_uuid() PRIMARY KEY,
  source_id UUID REFERENCES public.news_sources(id) NOT NULL,
  title TEXT NOT NULL,
  description TEXT,
  url TEXT NOT NULL,
  published_at TIMESTAMP WITH TIME ZONE,
  company_mentioned TEXT,
  created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now()
);

-- Insert the RSS feed sources based on your links
INSERT INTO public.news_sources (name, description, rss_url, company_names) VALUES
('ValveTek & MeterTek News', 'News tracking for ValveTek Utility Services Inc and MeterTek Utility Services Inc', 'https://news.google.com/rss/search?q=ValveTek+Utility+Services+Inc+OR+MeterTek+Utility+Services+Inc', ARRAY['ValveTek Utility Services Inc', 'MeterTek Utility Services Inc']),
('Esposito Group Companies', 'News tracking for Esposito Construction LLC and related companies', 'https://news.google.com/rss/search?q=Esposito+Construction+LLC+OR+Esposito+Industries+OR+E+Control+Services+OR+Level+10+Development+OR+Old+Bridge+Recycling+OR+Soil+Masters', ARRAY['Esposito Construction LLC', 'Esposito Industries', 'E Control Services', 'Level 10 Development', 'Old Bridge Recycling', 'Soil Masters']),
('JA Neary Corp', 'News tracking for JA Neary Corp and Nearyco Inc', 'https://news.google.com/rss/search?q=JA+Neary+Corp+OR+Nearyco+Inc', ARRAY['JA Neary Corp', 'Nearyco Inc']),
('Think Pavers & A&P Sons', 'News tracking for Think Pavers and A & P Sons Services LLC', 'https://news.google.com/rss/search?q=Think+Pavers+OR+A+%26+P+Sons+Services+LLC', ARRAY['Think Pavers', 'A & P Sons Services LLC']),
('Infrastructure Solutions Group', 'News tracking for Insituform Technologies and related companies', 'https://news.google.com/rss/search?q=Insituform+Technologies+LLC+OR+En-Tech+Infrastructure+LLC+OR+Azuria+Water+Solutions', ARRAY['Insituform Technologies LLC', 'En-Tech Infrastructure LLC', 'Azuria Water Solutions']),
('Kyle Conti Construction', 'News tracking for Kyle Conti Construction', 'https://news.google.com/rss/search?q=Kyle+Conti+Construction', ARRAY['Kyle Conti Construction']),
('Roy Rock', 'News tracking for Roy Rock', 'https://news.google.com/rss/search?q=Roy+Rock', ARRAY['Roy Rock']),
('NJG Outdoor Management', 'News tracking for NJG Outdoor Management LLC', 'https://news.google.com/rss/search?q=NJG+Outdoor+Management+LLC', ARRAY['NJG Outdoor Management LLC']),
('Krutis Excavating', 'News tracking for Krutis Excavating', 'https://news.google.com/rss/search?q=Krutis+Excavating', ARRAY['Krutis Excavating']),
('Joe Maggio Construction', 'News tracking for Joe Maggio construction and contracting', 'https://news.google.com/rss/search?q=Joe+Maggio+construction+OR+Joe+Maggio+contracting', ARRAY['Joe Maggio Construction', 'Joe Maggio Contracting']),
('A-Tech Services', 'News tracking for A-Tech Services and A-Tech Landscape', 'https://news.google.com/rss/search?q=A-Tech+Services+OR+A-Tech+Landscape', ARRAY['A-Tech Services', 'A-Tech Landscape']),
('Stilo Paving & McKeon Concrete', 'News tracking for Stilo Paving & Excavating and McKeon Concrete Services', 'https://news.google.com/rss/search?q=Stilo+Paving+%26+Excavating+OR+McKeon+Concrete+Services', ARRAY['Stilo Paving & Excavating', 'McKeon Concrete Services']),
('GMP Construction NJ', 'News tracking for GMP Construction in New Jersey', 'https://news.google.com/rss/search?q=GMP+construction+New+Jersey', ARRAY['GMP Construction']),
('Caravella Construction NJ', 'News tracking for Caravella Construction in New Jersey', 'https://news.google.com/rss/search?q=Caravella+construction+New+Jersey', ARRAY['Caravella Construction']),
('Royce Construction NJ', 'News tracking for Royce Construction in New Jersey', 'https://news.google.com/rss/search?q=Royce+construction+New+Jersey', ARRAY['Royce Construction']),
('A Colarusso & Son', 'News tracking for A Colarusso & Son', 'https://news.google.com/rss/search?q=A+Colarusso+%26+Son', ARRAY['A Colarusso & Son']),
('Boyce Excavating', 'News tracking for Boyce Excavating', 'https://news.google.com/rss/search?q=Boyce+Excavating', ARRAY['Boyce Excavating']),
('Arold Construction', 'News tracking for Arold Construction', 'https://news.google.com/rss/search?q=Arold+Construction', ARRAY['Arold Construction']),
('J Mullen & Son', 'News tracking for J Mullen & Son', 'https://news.google.com/rss/search?q=J+Mullen+%26+Son', ARRAY['J Mullen & Son']),
('Hydrovac Construction NJ', 'News tracking for Hydrovac construction in New Jersey', 'https://news.google.com/rss/search?q=Hydrovac+construction+New+Jersey', ARRAY['Hydrovac Construction']),
('Precision Pipeline Solutions', 'News tracking for Precision Pipeline Solutions', 'https://news.google.com/rss/search?q=Precision+Pipeline+Solutions', ARRAY['Precision Pipeline Solutions']),
('Ward Pavements Inc', 'News tracking for Ward Pavements Inc', 'https://news.google.com/rss/search?q=Ward+Pavements+Inc', ARRAY['Ward Pavements Inc']),
('Pro-Site Work & Paving Solutions', 'News tracking for Pro-Site Work and Paving Solutions', 'https://news.google.com/rss/search?q=Pro-Site+Work+OR+Paving+Solutions', ARRAY['Pro-Site Work', 'Paving Solutions']),
('Whispering Pines Construction', 'News tracking for Whispering Pines construction in New Jersey', 'https://news.google.com/rss/search?q=Whispering+Pines+construction+New+Jersey', ARRAY['Whispering Pines Construction']),
('Cioffi Services', 'News tracking for Cioffi Services', 'https://news.google.com/rss/search?q=Cioffi+Services', ARRAY['Cioffi Services']),
('Sullivan Construction Group', 'News tracking for Sullivan Construction Group and SCG construction', 'https://news.google.com/rss/search?q=Sullivan+Construction+Group+OR+SCG+construction', ARRAY['Sullivan Construction Group', 'SCG Construction']),
('D&L Paving', 'News tracking for D&L Paving', 'https://news.google.com/rss/search?q=D%26L+Paving', ARRAY['D&L Paving']),
('Lakeside Construction & Sho-Con', 'News tracking for Lakeside Construction and Sho-Con', 'https://news.google.com/rss/search?q=Lakeside+Construction+OR+Sho-Con', ARRAY['Lakeside Construction', 'Sho-Con']),
('Harrington Construction', 'News tracking for Harrington Construction', 'https://news.google.com/rss/search?q=Harrington+Construction', ARRAY['Harrington Construction']),
('Rosario Contracting Group', 'News tracking for Rosario Contracting Corp and Rosario & Mass', 'https://news.google.com/rss/search?q=Rosario+Contracting+Corp+OR+Rosario+%26+Mass', ARRAY['Rosario Contracting Corp', 'Rosario & Mass']),
('William J Guarini Inc', 'News tracking for William J Guarini Inc', 'https://news.google.com/rss/search?q=William+J+Guarini+Inc', ARRAY['William J Guarini Inc']);

-- Add RLS policies for news sources (public read access since this is for monitoring)
ALTER TABLE public.news_sources ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.news_articles ENABLE ROW LEVEL SECURITY;

-- Allow public read access to news sources and articles
CREATE POLICY "Public can view news sources" ON public.news_sources FOR SELECT USING (true);
CREATE POLICY "Public can view news articles" ON public.news_articles FOR SELECT USING (true);

-- Only authenticated users can manage news sources
CREATE POLICY "Authenticated users can insert news sources" ON public.news_sources FOR INSERT WITH CHECK (auth.role() = 'authenticated');
CREATE POLICY "Authenticated users can update news sources" ON public.news_sources FOR UPDATE USING (auth.role() = 'authenticated');
CREATE POLICY "Authenticated users can delete news sources" ON public.news_sources FOR DELETE USING (auth.role() = 'authenticated');

CREATE POLICY "Authenticated users can insert news articles" ON public.news_articles FOR INSERT WITH CHECK (auth.role() = 'authenticated');
</file>

<file path="supabase/migrations/20250620131829_be976ca6-01e3-477f-9364-2b692b8c8748.sql">
-- Add insight_preferences column to profiles table
ALTER TABLE public.profiles 
ADD COLUMN insight_preferences jsonb DEFAULT '{}'::jsonb;

-- Update existing profiles to have default insight preferences
UPDATE public.profiles 
SET insight_preferences = '{
  "intelligence_types": ["contract_awards", "hiring_changes", "safety_compliance", "financial_performance"],
  "delivery_frequency": "twice_daily"
}'::jsonb
WHERE insight_preferences IS NULL;
</file>

<file path="supabase/migrations/20250620230544_847cf19f-fbc6-4e22-a190-72597575b1e4.sql">
-- Add all the RSS feed sources for the companies mentioned
INSERT INTO public.news_sources (name, description, rss_url, company_names) VALUES
('ValveTek & MeterTek News', 'News tracking for ValveTek Utility Services Inc and MeterTek Utility Services Inc', 'https://news.google.com/rss/search?q=ValveTek+Utility+Services+Inc+OR+MeterTek+Utility+Services+Inc', ARRAY['ValveTek Utility Services Inc', 'MeterTek Utility Services Inc']),
('Esposito Group Companies', 'News tracking for Esposito Construction LLC and related companies', 'https://news.google.com/rss/search?q=Esposito+Construction+LLC+OR+Esposito+Industries+OR+E+Control+Services+OR+Level+10+Development+OR+Old+Bridge+Recycling+OR+Soil+Masters', ARRAY['Esposito Construction LLC', 'Esposito Industries', 'E Control Services', 'Level 10 Development', 'Old Bridge Recycling', 'Soil Masters']),
('JA Neary Corp', 'News tracking for JA Neary Corp and Nearyco Inc', 'https://news.google.com/rss/search?q=JA+Neary+Corp+OR+Nearyco+Inc', ARRAY['JA Neary Corp', 'Nearyco Inc']),
('Think Pavers & A&P Sons', 'News tracking for Think Pavers and A & P Sons Services LLC', 'https://news.google.com/rss/search?q=Think+Pavers+OR+A+%26+P+Sons+Services+LLC', ARRAY['Think Pavers', 'A & P Sons Services LLC']),
('Infrastructure Solutions Group', 'News tracking for Insituform Technologies and related companies', 'https://news.google.com/rss/search?q=Insituform+Technologies+LLC+OR+En-Tech+Infrastructure+LLC+OR+Azuria+Water+Solutions', ARRAY['Insituform Technologies LLC', 'En-Tech Infrastructure LLC', 'Azuria Water Solutions']),
('Kyle Conti Construction', 'News tracking for Kyle Conti Construction', 'https://news.google.com/rss/search?q=Kyle+Conti+Construction', ARRAY['Kyle Conti Construction']),
('Roy Rock', 'News tracking for Roy Rock', 'https://news.google.com/rss/search?q=Roy+Rock', ARRAY['Roy Rock']),
('NJG Outdoor Management', 'News tracking for NJG Outdoor Management LLC', 'https://news.google.com/rss/search?q=NJG+Outdoor+Management+LLC', ARRAY['NJG Outdoor Management LLC']),
('Krutis Excavating', 'News tracking for Krutis Excavating', 'https://news.google.com/rss/search?q=Krutis+Excavating', ARRAY['Krutis Excavating']),
('Joe Maggio Construction', 'News tracking for Joe Maggio construction and contracting', 'https://news.google.com/rss/search?q=Joe+Maggio+construction+OR+Joe+Maggio+contracting', ARRAY['Joe Maggio Construction', 'Joe Maggio Contracting']),
('A-Tech Services', 'News tracking for A-Tech Services and A-Tech Landscape', 'https://news.google.com/rss/search?q=A-Tech+Services+OR+A-Tech+Landscape', ARRAY['A-Tech Services', 'A-Tech Landscape']),
('Stilo Paving & McKeon Concrete', 'News tracking for Stilo Paving & Excavating and McKeon Concrete Services', 'https://news.google.com/rss/search?q=Stilo+Paving+%26+Excavating+OR+McKeon+Concrete+Services', ARRAY['Stilo Paving & Excavating', 'McKeon Concrete Services']),
('GMP Construction NJ', 'News tracking for GMP Construction in New Jersey', 'https://news.google.com/rss/search?q=GMP+construction+New+Jersey', ARRAY['GMP Construction']),
('Caravella Construction NJ', 'News tracking for Caravella Construction in New Jersey', 'https://news.google.com/rss/search?q=Caravella+construction+New+Jersey', ARRAY['Caravella Construction']),
('Royce Construction NJ', 'News tracking for Royce Construction in New Jersey', 'https://news.google.com/rss/search?q=Royce+construction+New+Jersey', ARRAY['Royce Construction']),
('A Colarusso & Son', 'News tracking for A Colarusso & Son', 'https://news.google.com/rss/search?q=A+Colarusso+%26+Son', ARRAY['A Colarusso & Son']),
('Boyce Excavating', 'News tracking for Boyce Excavating', 'https://news.google.com/rss/search?q=Boyce+Excavating', ARRAY['Boyce Excavating']),
('Arold Construction', 'News tracking for Arold Construction', 'https://news.google.com/rss/search?q=Arold+Construction', ARRAY['Arold Construction']),
('J Mullen & Son', 'News tracking for J Mullen & Son', 'https://news.google.com/rss/search?q=J+Mullen+%26+Son', ARRAY['J Mullen & Son']),
('Hydrovac Construction NJ', 'News tracking for Hydrovac construction in New Jersey', 'https://news.google.com/rss/search?q=Hydrovac+construction+New+Jersey', ARRAY['Hydrovac Construction']),
('Precision Pipeline Solutions', 'News tracking for Precision Pipeline Solutions', 'https://news.google.com/rss/search?q=Precision+Pipeline+Solutions', ARRAY['Precision Pipeline Solutions']),
('Ward Pavements Inc', 'News tracking for Ward Pavements Inc', 'https://news.google.com/rss/search?q=Ward+Pavements+Inc', ARRAY['Ward Pavements Inc']),
('Pro-Site Work & Paving Solutions', 'News tracking for Pro-Site Work and Paving Solutions', 'https://news.google.com/rss/search?q=Pro-Site+Work+OR+Paving+Solutions', ARRAY['Pro-Site Work', 'Paving Solutions']),
('Whispering Pines Construction', 'News tracking for Whispering Pines construction in New Jersey', 'https://news.google.com/rss/search?q=Whispering+Pines+construction+New+Jersey', ARRAY['Whispering Pines Construction']),
('Cioffi Services', 'News tracking for Cioffi Services', 'https://news.google.com/rss/search?q=Cioffi+Services', ARRAY['Cioffi Services']),
('Sullivan Construction Group', 'News tracking for Sullivan Construction Group and SCG construction', 'https://news.google.com/rss/search?q=Sullivan+Construction+Group+OR+SCG+construction', ARRAY['Sullivan Construction Group', 'SCG Construction']),
('D&L Paving', 'News tracking for D&L Paving', 'https://news.google.com/rss/search?q=D%26L+Paving', ARRAY['D&L Paving']),
('Lakeside Construction & Sho-Con', 'News tracking for Lakeside Construction and Sho-Con', 'https://news.google.com/rss/search?q=Lakeside+Construction+OR+Sho-Con', ARRAY['Lakeside Construction', 'Sho-Con']),
('Harrington Construction', 'News tracking for Harrington Construction', 'https://news.google.com/rss/search?q=Harrington+Construction', ARRAY['Harrington Construction']),
('Rosario Contracting Group', 'News tracking for Rosario Contracting Corp and Rosario & Mass', 'https://news.google.com/rss/search?q=Rosario+Contracting+Corp+OR+Rosario+%26+Mass', ARRAY['Rosario Contracting Corp', 'Rosario & Mass']),
('William J Guarini Inc', 'News tracking for William J Guarini Inc', 'https://news.google.com/rss/search?q=William+J+Guarini+Inc', ARRAY['William J Guarini Inc']);
</file>

<file path="supabase/migrations/20250623213335_ed75b52c-0221-45cf-86cb-a0f407ba4b10.sql">
-- Insert missing companies from the provided list (using INSERT WHERE NOT EXISTS to avoid duplicates)
INSERT INTO public.news_sources (name, description, rss_url, company_names, is_active)
SELECT 'ValveTek Utility Services Inc', 'Utility services company in New Jersey', 'https://news.google.com/rss/search?q="ValveTek Utility Services Inc"+New+Jersey&hl=en-US&gl=US&ceid=US:en', ARRAY['ValveTek Utility Services Inc'], true
WHERE NOT EXISTS (SELECT 1 FROM public.news_sources WHERE rss_url = 'https://news.google.com/rss/search?q="ValveTek Utility Services Inc"+New+Jersey&hl=en-US&gl=US&ceid=US:en')

UNION ALL

SELECT 'MeterTek Utility Services Inc', 'Utility services company in New Jersey', 'https://news.google.com/rss/search?q="MeterTek Utility Services Inc"+New+Jersey&hl=en-US&gl=US&ceid=US:en', ARRAY['MeterTek Utility Services Inc'], true
WHERE NOT EXISTS (SELECT 1 FROM public.news_sources WHERE rss_url = 'https://news.google.com/rss/search?q="MeterTek Utility Services Inc"+New+Jersey&hl=en-US&gl=US&ceid=US:en')

UNION ALL

SELECT 'Esposito Construction LLC', 'Construction company in New Jersey', 'https://news.google.com/rss/search?q="Esposito Construction LLC"+New+Jersey&hl=en-US&gl=US&ceid=US:en', ARRAY['Esposito Construction LLC'], true
WHERE NOT EXISTS (SELECT 1 FROM public.news_sources WHERE rss_url = 'https://news.google.com/rss/search?q="Esposito Construction LLC"+New+Jersey&hl=en-US&gl=US&ceid=US:en')

UNION ALL

SELECT 'Esposito Industries', 'Industrial company in New Jersey', 'https://news.google.com/rss/search?q="Esposito Industries"+New+Jersey&hl=en-US&gl=US&ceid=US:en', ARRAY['Esposito Industries'], true
WHERE NOT EXISTS (SELECT 1 FROM public.news_sources WHERE rss_url = 'https://news.google.com/rss/search?q="Esposito Industries"+New+Jersey&hl=en-US&gl=US&ceid=US:en')

UNION ALL

SELECT 'E Control Services', 'Control services company in New Jersey', 'https://news.google.com/rss/search?q="E Control Services"+New+Jersey&hl=en-US&gl=US&ceid=US:en', ARRAY['E Control Services'], true
WHERE NOT EXISTS (SELECT 1 FROM public.news_sources WHERE rss_url = 'https://news.google.com/rss/search?q="E Control Services"+New+Jersey&hl=en-US&gl=US&ceid=US:en')

UNION ALL

SELECT 'Level 10 Development', 'Development company in New Jersey', 'https://news.google.com/rss/search?q="Level 10 Development"+New+Jersey&hl=en-US&gl=US&ceid=US:en', ARRAY['Level 10 Development'], true
WHERE NOT EXISTS (SELECT 1 FROM public.news_sources WHERE rss_url = 'https://news.google.com/rss/search?q="Level 10 Development"+New+Jersey&hl=en-US&gl=US&ceid=US:en')

UNION ALL

SELECT 'Old Bridge Recycling', 'Recycling company in New Jersey', 'https://news.google.com/rss/search?q="Old Bridge Recycling"+New+Jersey&hl=en-US&gl=US&ceid=US:en', ARRAY['Old Bridge Recycling'], true
WHERE NOT EXISTS (SELECT 1 FROM public.news_sources WHERE rss_url = 'https://news.google.com/rss/search?q="Old Bridge Recycling"+New+Jersey&hl=en-US&gl=US&ceid=US:en')

UNION ALL

SELECT 'Soil Masters', 'Soil services company in New Jersey', 'https://news.google.com/rss/search?q="Soil Masters"+New+Jersey&hl=en-US&gl=US&ceid=US:en', ARRAY['Soil Masters'], true
WHERE NOT EXISTS (SELECT 1 FROM public.news_sources WHERE rss_url = 'https://news.google.com/rss/search?q="Soil Masters"+New+Jersey&hl=en-US&gl=US&ceid=US:en')

UNION ALL

SELECT 'Think Pavers', 'Paving company in New Jersey', 'https://news.google.com/rss/search?q="Think Pavers"+New+Jersey&hl=en-US&gl=US&ceid=US:en', ARRAY['Think Pavers'], true
WHERE NOT EXISTS (SELECT 1 FROM public.news_sources WHERE rss_url = 'https://news.google.com/rss/search?q="Think Pavers"+New+Jersey&hl=en-US&gl=US&ceid=US:en')

UNION ALL

SELECT 'A & P Sons Services LLC', 'Services company in New Jersey', 'https://news.google.com/rss/search?q="A & P Sons Services LLC"+New+Jersey&hl=en-US&gl=US&ceid=US:en', ARRAY['A & P Sons Services LLC'], true
WHERE NOT EXISTS (SELECT 1 FROM public.news_sources WHERE rss_url = 'https://news.google.com/rss/search?q="A & P Sons Services LLC"+New+Jersey&hl=en-US&gl=US&ceid=US:en')

UNION ALL

SELECT 'Insituform Technologies LLC', 'Infrastructure technology company in New Jersey', 'https://news.google.com/rss/search?q="Insituform Technologies LLC"+New+Jersey&hl=en-US&gl=US&ceid=US:en', ARRAY['Insituform Technologies LLC'], true
WHERE NOT EXISTS (SELECT 1 FROM public.news_sources WHERE rss_url = 'https://news.google.com/rss/search?q="Insituform Technologies LLC"+New+Jersey&hl=en-US&gl=US&ceid=US:en')

UNION ALL

SELECT 'En-Tech Infrastructure LLC', 'Infrastructure company in New Jersey', 'https://news.google.com/rss/search?q="En-Tech Infrastructure LLC"+New+Jersey&hl=en-US&gl=US&ceid=US:en', ARRAY['En-Tech Infrastructure LLC'], true
WHERE NOT EXISTS (SELECT 1 FROM public.news_sources WHERE rss_url = 'https://news.google.com/rss/search?q="En-Tech Infrastructure LLC"+New+Jersey&hl=en-US&gl=US&ceid=US:en')

UNION ALL

SELECT 'Azuria Water Solutions', 'Water solutions company in New Jersey', 'https://news.google.com/rss/search?q="Azuria Water Solutions"+New+Jersey&hl=en-US&gl=US&ceid=US:en', ARRAY['Azuria Water Solutions'], true
WHERE NOT EXISTS (SELECT 1 FROM public.news_sources WHERE rss_url = 'https://news.google.com/rss/search?q="Azuria Water Solutions"+New+Jersey&hl=en-US&gl=US&ceid=US:en')

UNION ALL

SELECT 'Kyle Conti Construction', 'Construction company in New Jersey', 'https://news.google.com/rss/search?q="Kyle Conti Construction"+New+Jersey&hl=en-US&gl=US&ceid=US:en', ARRAY['Kyle Conti Construction'], true
WHERE NOT EXISTS (SELECT 1 FROM public.news_sources WHERE rss_url = 'https://news.google.com/rss/search?q="Kyle Conti Construction"+New+Jersey&hl=en-US&gl=US&ceid=US:en')

UNION ALL

SELECT 'Roy Rock', 'Rock and aggregate company in New Jersey', 'https://news.google.com/rss/search?q="Roy Rock"+New+Jersey&hl=en-US&gl=US&ceid=US:en', ARRAY['Roy Rock'], true
WHERE NOT EXISTS (SELECT 1 FROM public.news_sources WHERE rss_url = 'https://news.google.com/rss/search?q="Roy Rock"+New+Jersey&hl=en-US&gl=US&ceid=US:en')

UNION ALL

SELECT 'Krutis Excavating', 'Excavating company in New Jersey', 'https://news.google.com/rss/search?q="Krutis Excavating"+New+Jersey&hl=en-US&gl=US&ceid=US:en', ARRAY['Krutis Excavating'], true
WHERE NOT EXISTS (SELECT 1 FROM public.news_sources WHERE rss_url = 'https://news.google.com/rss/search?q="Krutis Excavating"+New+Jersey&hl=en-US&gl=US&ceid=US:en')

UNION ALL

SELECT 'Joe Maggio Contracting', 'Contracting company in New Jersey', 'https://news.google.com/rss/search?q="Joe Maggio Contracting"+New+Jersey&hl=en-US&gl=US&ceid=US:en', ARRAY['Joe Maggio Contracting'], true
WHERE NOT EXISTS (SELECT 1 FROM public.news_sources WHERE rss_url = 'https://news.google.com/rss/search?q="Joe Maggio Contracting"+New+Jersey&hl=en-US&gl=US&ceid=US:en')

UNION ALL

SELECT 'A-Tech Services', 'Technical services company in New Jersey', 'https://news.google.com/rss/search?q="A-Tech Services"+New+Jersey&hl=en-US&gl=US&ceid=US:en', ARRAY['A-Tech Services'], true
WHERE NOT EXISTS (SELECT 1 FROM public.news_sources WHERE rss_url = 'https://news.google.com/rss/search?q="A-Tech Services"+New+Jersey&hl=en-US&gl=US&ceid=US:en')

UNION ALL

SELECT 'A-Tech Landscape', 'Landscaping company in New Jersey', 'https://news.google.com/rss/search?q="A-Tech Landscape"+New+Jersey&hl=en-US&gl=US&ceid=US:en', ARRAY['A-Tech Landscape'], true
WHERE NOT EXISTS (SELECT 1 FROM public.news_sources WHERE rss_url = 'https://news.google.com/rss/search?q="A-Tech Landscape"+New+Jersey&hl=en-US&gl=US&ceid=US:en')

UNION ALL

SELECT 'Stilo Paving & Excavating', 'Paving and excavating company in New Jersey', 'https://news.google.com/rss/search?q="Stilo Paving & Excavating"+New+Jersey&hl=en-US&gl=US&ceid=US:en', ARRAY['Stilo Paving & Excavating'], true
WHERE NOT EXISTS (SELECT 1 FROM public.news_sources WHERE rss_url = 'https://news.google.com/rss/search?q="Stilo Paving & Excavating"+New+Jersey&hl=en-US&gl=US&ceid=US:en')

UNION ALL

SELECT 'McKeon Concrete Services', 'Concrete services company in New Jersey', 'https://news.google.com/rss/search?q="McKeon Concrete Services"+New+Jersey&hl=en-US&gl=US&ceid=US:en', ARRAY['McKeon Concrete Services'], true
WHERE NOT EXISTS (SELECT 1 FROM public.news_sources WHERE rss_url = 'https://news.google.com/rss/search?q="McKeon Concrete Services"+New+Jersey&hl=en-US&gl=US&ceid=US:en')

UNION ALL

SELECT 'GMP Construction', 'Construction company in New York', 'https://news.google.com/rss/search?q="GMP Construction"+New+York&hl=en-US&gl=US&ceid=US:en', ARRAY['GMP Construction'], true
WHERE NOT EXISTS (SELECT 1 FROM public.news_sources WHERE rss_url = 'https://news.google.com/rss/search?q="GMP Construction"+New+York&hl=en-US&gl=US&ceid=US:en')

UNION ALL

SELECT 'Boyce Excavating', 'Excavating company in New York', 'https://news.google.com/rss/search?q="Boyce Excavating"+New+York&hl=en-US&gl=US&ceid=US:en', ARRAY['Boyce Excavating'], true
WHERE NOT EXISTS (SELECT 1 FROM public.news_sources WHERE rss_url = 'https://news.google.com/rss/search?q="Boyce Excavating"+New+York&hl=en-US&gl=US&ceid=US:en')

UNION ALL

SELECT 'Arold Construction', 'Construction company in New York', 'https://news.google.com/rss/search?q="Arold Construction"+New+York&hl=en-US&gl=US&ceid=US:en', ARRAY['Arold Construction'], true
WHERE NOT EXISTS (SELECT 1 FROM public.news_sources WHERE rss_url = 'https://news.google.com/rss/search?q="Arold Construction"+New+York&hl=en-US&gl=US&ceid=US:en')

UNION ALL

SELECT 'J Mullen & Son', 'Construction company in New York', 'https://news.google.com/rss/search?q="J Mullen & Son"+New+York&hl=en-US&gl=US&ceid=US:en', ARRAY['J Mullen & Son'], true
WHERE NOT EXISTS (SELECT 1 FROM public.news_sources WHERE rss_url = 'https://news.google.com/rss/search?q="J Mullen & Son"+New+York&hl=en-US&gl=US&ceid=US:en')

UNION ALL

SELECT 'Hydrovac Construction', 'Hydrovac construction company in New York', 'https://news.google.com/rss/search?q="Hydrovac Construction"+New+York&hl=en-US&gl=US&ceid=US:en', ARRAY['Hydrovac Construction'], true
WHERE NOT EXISTS (SELECT 1 FROM public.news_sources WHERE rss_url = 'https://news.google.com/rss/search?q="Hydrovac Construction"+New+York&hl=en-US&gl=US&ceid=US:en')

UNION ALL

SELECT 'Precision Pipeline Solutions', 'Pipeline solutions company in New York', 'https://news.google.com/rss/search?q="Precision Pipeline Solutions"+New+York&hl=en-US&gl=US&ceid=US:en', ARRAY['Precision Pipeline Solutions'], true
WHERE NOT EXISTS (SELECT 1 FROM public.news_sources WHERE rss_url = 'https://news.google.com/rss/search?q="Precision Pipeline Solutions"+New+York&hl=en-US&gl=US&ceid=US:en')

UNION ALL

SELECT 'Ward Pavements Inc', 'Pavement company in New York', 'https://news.google.com/rss/search?q="Ward Pavements Inc"+New+York&hl=en-US&gl=US&ceid=US:en', ARRAY['Ward Pavements Inc'], true
WHERE NOT EXISTS (SELECT 1 FROM public.news_sources WHERE rss_url = 'https://news.google.com/rss/search?q="Ward Pavements Inc"+New+York&hl=en-US&gl=US&ceid=US:en')

UNION ALL

SELECT 'Pro-Site Work', 'Site work company in New York', 'https://news.google.com/rss/search?q="Pro-Site Work"+New+York&hl=en-US&gl=US&ceid=US:en', ARRAY['Pro-Site Work'], true
WHERE NOT EXISTS (SELECT 1 FROM public.news_sources WHERE rss_url = 'https://news.google.com/rss/search?q="Pro-Site Work"+New+York&hl=en-US&gl=US&ceid=US:en')

UNION ALL

SELECT 'Paving Solutions', 'Paving company in New York', 'https://news.google.com/rss/search?q="Paving Solutions"+New+York&hl=en-US&gl=US&ceid=US:en', ARRAY['Paving Solutions'], true
WHERE NOT EXISTS (SELECT 1 FROM public.news_sources WHERE rss_url = 'https://news.google.com/rss/search?q="Paving Solutions"+New+York&hl=en-US&gl=US&ceid=US:en')

UNION ALL

SELECT 'Whispering Pines Construction', 'Construction company in New York', 'https://news.google.com/rss/search?q="Whispering Pines Construction"+New+York&hl=en-US&gl=US&ceid=US:en', ARRAY['Whispering Pines Construction'], true
WHERE NOT EXISTS (SELECT 1 FROM public.news_sources WHERE rss_url = 'https://news.google.com/rss/search?q="Whispering Pines Construction"+New+York&hl=en-US&gl=US&ceid=US:en')

UNION ALL

SELECT 'Cioffi Services', 'Services company in New York', 'https://news.google.com/rss/search?q="Cioffi Services"+New+York&hl=en-US&gl=US&ceid=US:en', ARRAY['Cioffi Services'], true
WHERE NOT EXISTS (SELECT 1 FROM public.news_sources WHERE rss_url = 'https://news.google.com/rss/search?q="Cioffi Services"+New+York&hl=en-US&gl=US&ceid=US:en')

UNION ALL

SELECT 'Sullivan Construction Group', 'Construction group in New York', 'https://news.google.com/rss/search?q="Sullivan Construction Group"+New+York&hl=en-US&gl=US&ceid=US:en', ARRAY['Sullivan Construction Group'], true
WHERE NOT EXISTS (SELECT 1 FROM public.news_sources WHERE rss_url = 'https://news.google.com/rss/search?q="Sullivan Construction Group"+New+York&hl=en-US&gl=US&ceid=US:en')

UNION ALL

SELECT 'SCG Construction', 'Construction company in New York', 'https://news.google.com/rss/search?q="SCG Construction"+New+York&hl=en-US&gl=US&ceid=US:en', ARRAY['SCG Construction'], true
WHERE NOT EXISTS (SELECT 1 FROM public.news_sources WHERE rss_url = 'https://news.google.com/rss/search?q="SCG Construction"+New+York&hl=en-US&gl=US&ceid=US:en')

UNION ALL

SELECT 'D&L Paving', 'Paving company in New York', 'https://news.google.com/rss/search?q="D&L Paving"+New+York&hl=en-US&gl=US&ceid=US:en', ARRAY['D&L Paving'], true
WHERE NOT EXISTS (SELECT 1 FROM public.news_sources WHERE rss_url = 'https://news.google.com/rss/search?q="D&L Paving"+New+York&hl=en-US&gl=US&ceid=US:en')

UNION ALL

SELECT 'Lakeside Construction', 'Construction company in New York', 'https://news.google.com/rss/search?q="Lakeside Construction"+New+York&hl=en-US&gl=US&ceid=US:en', ARRAY['Lakeside Construction'], true
WHERE NOT EXISTS (SELECT 1 FROM public.news_sources WHERE rss_url = 'https://news.google.com/rss/search?q="Lakeside Construction"+New+York&hl=en-US&gl=US&ceid=US:en')

UNION ALL

SELECT 'Sho-Con', 'Construction company in New York', 'https://news.google.com/rss/search?q="Sho-Con"+New+York&hl=en-US&gl=US&ceid=US:en', ARRAY['Sho-Con'], true
WHERE NOT EXISTS (SELECT 1 FROM public.news_sources WHERE rss_url = 'https://news.google.com/rss/search?q="Sho-Con"+New+York&hl=en-US&gl=US&ceid=US:en')

UNION ALL

SELECT 'Harrington Construction', 'Construction company in New York', 'https://news.google.com/rss/search?q="Harrington Construction"+New+York&hl=en-US&gl=US&ceid=US:en', ARRAY['Harrington Construction'], true
WHERE NOT EXISTS (SELECT 1 FROM public.news_sources WHERE rss_url = 'https://news.google.com/rss/search?q="Harrington Construction"+New+York&hl=en-US&gl=US&ceid=US:en')

UNION ALL

SELECT 'Rosario Contracting Corp', 'Contracting company in New York', 'https://news.google.com/rss/search?q="Rosario Contracting Corp"+New+York&hl=en-US&gl=US&ceid=US:en', ARRAY['Rosario Contracting Corp'], true
WHERE NOT EXISTS (SELECT 1 FROM public.news_sources WHERE rss_url = 'https://news.google.com/rss/search?q="Rosario Contracting Corp"+New+York&hl=en-US&gl=US&ceid=US:en')

UNION ALL

SELECT 'Rosario & Mass', 'Construction company in New York', 'https://news.google.com/rss/search?q="Rosario & Mass"+New+York&hl=en-US&gl=US&ceid=US:en', ARRAY['Rosario & Mass'], true
WHERE NOT EXISTS (SELECT 1 FROM public.news_sources WHERE rss_url = 'https://news.google.com/rss/search?q="Rosario & Mass"+New+York&hl=en-US&gl=US&ceid=US:en');

-- Update existing JA Neary Corp to include Nearyco Inc as an alternate name
UPDATE public.news_sources 
SET company_names = ARRAY['JA Neary Corp', 'Nearyco Inc'],
    description = 'Construction company in New Jersey (also known as Nearyco Inc)'
WHERE name = 'JA Neary Corp';

-- Update existing Joe Maggio Construction to include Joe Maggio Contracting as an alternate name
UPDATE public.news_sources 
SET company_names = ARRAY['Joe Maggio Construction', 'Joe Maggio Contracting'],
    description = 'Construction company in New Jersey (also operates as Joe Maggio Contracting)'
WHERE name = 'Joe Maggio Construction';
</file>

<file path="supabase/migrations/20250623214030_df2b510a-7911-4022-9167-3cae66075a64.sql">
-- Add columns to news_articles table for AI analysis and caching
ALTER TABLE public.news_articles 
ADD COLUMN excerpt TEXT,
ADD COLUMN full_analysis TEXT,
ADD COLUMN local_825_relevance TEXT,
ADD COLUMN is_analyzed BOOLEAN DEFAULT FALSE,
ADD COLUMN analyzed_at TIMESTAMP WITH TIME ZONE;

-- Create index for better performance when querying analyzed articles
CREATE INDEX idx_news_articles_analyzed ON public.news_articles(is_analyzed, analyzed_at);

-- Create index for better performance when checking existing URLs (for caching)
CREATE INDEX idx_news_articles_url ON public.news_articles(url);
</file>

<file path="supabase/migrations/20250623222059_ae19eb7c-7390-4018-a5ee-595d1cb39837.sql">
-- First, let's identify and remove duplicate news sources
-- We'll keep the oldest record (earliest created_at) for each unique combination of name and rss_url

-- Step 1: Update news_articles to reference the oldest source for each duplicate group
WITH duplicate_groups AS (
  SELECT 
    name,
    rss_url,
    MIN(created_at) as earliest_created_at
  FROM news_sources 
  GROUP BY name, rss_url
  HAVING COUNT(*) > 1
),
sources_to_keep AS (
  SELECT DISTINCT ON (ns.name, ns.rss_url) 
    ns.id as keep_id,
    ns.name,
    ns.rss_url
  FROM news_sources ns
  INNER JOIN duplicate_groups dg ON ns.name = dg.name AND ns.rss_url = dg.rss_url
  WHERE ns.created_at = dg.earliest_created_at
  ORDER BY ns.name, ns.rss_url, ns.created_at
),
sources_to_delete AS (
  SELECT ns.id as delete_id, stk.keep_id
  FROM news_sources ns
  INNER JOIN sources_to_keep stk ON ns.name = stk.name AND ns.rss_url = stk.rss_url
  WHERE ns.id != stk.keep_id
)
-- Update news_articles to reference the source we're keeping
UPDATE news_articles 
SET source_id = std.keep_id
FROM sources_to_delete std
WHERE news_articles.source_id = std.delete_id;

-- Step 2: Now delete the duplicate sources
WITH duplicate_groups AS (
  SELECT 
    name,
    rss_url,
    MIN(created_at) as earliest_created_at
  FROM news_sources 
  GROUP BY name, rss_url
  HAVING COUNT(*) > 1
),
sources_to_keep AS (
  SELECT DISTINCT ON (ns.name, ns.rss_url) 
    ns.id as keep_id
  FROM news_sources ns
  INNER JOIN duplicate_groups dg ON ns.name = dg.name AND ns.rss_url = dg.rss_url
  WHERE ns.created_at = dg.earliest_created_at
  ORDER BY ns.name, ns.rss_url, ns.created_at
)
DELETE FROM news_sources 
WHERE id NOT IN (SELECT keep_id FROM sources_to_keep)
  AND (name, rss_url) IN (
    SELECT name, rss_url 
    FROM news_sources 
    GROUP BY name, rss_url 
    HAVING COUNT(*) > 1
  );

-- Step 3: Add a unique constraint to prevent future duplicates
ALTER TABLE news_sources 
ADD CONSTRAINT news_sources_name_rss_url_unique 
UNIQUE (name, rss_url);
</file>

<file path="supabase/migrations/20250623222927_c1113db2-8cd8-47cd-99e1-4db88172e31e.sql">
-- Create a table for tracked companies
CREATE TABLE public.tracked_companies (
  id UUID NOT NULL DEFAULT gen_random_uuid() PRIMARY KEY,
  user_id UUID REFERENCES auth.users(id) ON DELETE CASCADE NOT NULL,
  name TEXT NOT NULL,
  address TEXT,
  priority TEXT NOT NULL CHECK (priority IN ('low', 'interested', 'high', 'do_not_work', 'agreement_ended')),
  created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(),
  updated_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now()
);

-- Enable Row Level Security
ALTER TABLE public.tracked_companies ENABLE ROW LEVEL SECURITY;

-- Create policies for users to manage their own tracked companies
CREATE POLICY "Users can view their own tracked companies" 
  ON public.tracked_companies 
  FOR SELECT 
  USING (auth.uid() = user_id);

CREATE POLICY "Users can insert their own tracked companies" 
  ON public.tracked_companies 
  FOR INSERT 
  WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Users can update their own tracked companies" 
  ON public.tracked_companies 
  FOR UPDATE 
  USING (auth.uid() = user_id);

CREATE POLICY "Users can delete their own tracked companies" 
  ON public.tracked_companies 
  FOR DELETE 
  USING (auth.uid() = user_id);

-- Create an index for better performance
CREATE INDEX idx_tracked_companies_user_id ON public.tracked_companies(user_id);
CREATE INDEX idx_tracked_companies_created_at ON public.tracked_companies(created_at DESC);
</file>

<file path="supabase/migrations/20250623225252_9b842fe3-80df-491c-8dd5-6fbb65de99ea.sql">
-- Create a table for main companies that always appear in the feed
CREATE TABLE public.main_companies (
  id UUID NOT NULL DEFAULT gen_random_uuid() PRIMARY KEY,
  name TEXT NOT NULL UNIQUE,
  description TEXT,
  priority INTEGER DEFAULT 1,
  is_active BOOLEAN DEFAULT true,
  created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(),
  updated_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now()
);

-- Insert the main companies that should always be available
INSERT INTO public.main_companies (name, description, priority) VALUES
('Skanska', 'Major construction contractor', 1),
('Esposito Construction', 'Regional construction company', 2),
('Insituform', 'Trenchless pipe rehabilitation', 3),
('Azuria', 'Water infrastructure services', 4),
('Colarusso', 'Materials and construction', 5),
('JF Creamer', 'Heavy construction contractor', 6),
('William J. Guarini Inc', 'Construction and contracting', 7),
('BLD Services', 'Pipeline and utility services', 8);

-- Enable RLS on main_companies (read-only for all authenticated users)
ALTER TABLE public.main_companies ENABLE ROW LEVEL SECURITY;

-- Create policy that allows all authenticated users to view main companies
CREATE POLICY "All authenticated users can view main companies" 
  ON public.main_companies 
  FOR SELECT 
  USING (auth.role() = 'authenticated');
</file>

<file path="supabase/migrations/20250624234721_78ad8c1c-bb59-49a3-aadf-c0d3753d42c7.sql">
-- First, let's add a reference to main_companies in the tracked_companies table
ALTER TABLE public.tracked_companies 
ADD COLUMN main_company_id UUID REFERENCES public.main_companies(id) ON DELETE CASCADE;

-- Create an index for better performance
CREATE INDEX idx_tracked_companies_main_company_id ON public.tracked_companies(main_company_id);

-- Insert default tracking records for all existing users and main companies
-- This will create tracking records for all main companies for each user with default "interested" priority
INSERT INTO public.tracked_companies (user_id, name, priority, main_company_id, address)
SELECT 
    profiles.id as user_id,
    main_companies.name,
    'interested' as priority,
    main_companies.id as main_company_id,
    main_companies.description as address
FROM public.profiles
CROSS JOIN public.main_companies
WHERE main_companies.is_active = true
ON CONFLICT DO NOTHING;

-- Create a function to automatically add tracking records for new users
CREATE OR REPLACE FUNCTION public.create_default_company_tracking()
RETURNS TRIGGER AS $$
BEGIN
    -- Insert tracking records for all active main companies for the new user
    INSERT INTO public.tracked_companies (user_id, name, priority, main_company_id, address)
    SELECT 
        NEW.id as user_id,
        main_companies.name,
        'interested' as priority,
        main_companies.id as main_company_id,
        main_companies.description as address
    FROM public.main_companies
    WHERE main_companies.is_active = true;
    
    RETURN NEW;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- Create a trigger to automatically create tracking records for new users
CREATE TRIGGER create_default_tracking_on_new_user
    AFTER INSERT ON public.profiles
    FOR EACH ROW
    EXECUTE FUNCTION public.create_default_company_tracking();
</file>

<file path="supabase/migrations/20250625000001_update_company_feeds.sql">
-- Clear existing news sources and add the new company-specific feeds
DELETE FROM public.news_sources;

-- Insert the new company-specific feeds
INSERT INTO public.news_sources (name, description, rss_url, company_names, is_active) VALUES
('ValveTek & MeterTek Utility Services', 'Utility services companies in NJ area', 'https://news.google.com/rss/search?q=ValveTek+Utility+Services+Inc+OR+MeterTek+Utility+Services+Inc', ARRAY['ValveTek Utility Services Inc', 'MeterTek Utility Services Inc'], true),
('Esposito Construction Group', 'Construction and excavation companies', 'https://news.google.com/rss/search?q=Esposito+Construction+LLC+OR+Esposito+Industries+OR+E+Control+Services+OR+Level+10+Development+OR+Old+Bridge+Recycling+OR+Soil+Masters', ARRAY['Esposito Construction LLC', 'Esposito Industries', 'E Control Services', 'Level 10 Development', 'Old Bridge Recycling', 'Soil Masters'], true),
('Neary Companies', 'Construction and contracting services', 'https://news.google.com/rss/search?q=JA+Neary+Corp+OR+Nearyco+Inc', ARRAY['JA Neary Corp', 'Nearyco Inc'], true),
('Think Pavers & A&P Sons', 'Paving and construction services', 'https://news.google.com/rss/search?q=Think+Pavers+OR+A+%26+P+Sons+Services+LLC', ARRAY['Think Pavers', 'A & P Sons Services LLC'], true),
('Infrastructure Solutions Group', 'Infrastructure and water solutions', 'https://news.google.com/rss/search?q=Insituform+Technologies+LLC+OR+En-Tech+Infrastructure+LLC+OR+Azuria+Water+Solutions', ARRAY['Insituform Technologies LLC', 'En-Tech Infrastructure LLC', 'Azuria Water Solutions'], true),
('Kyle Conti Construction', 'General construction services', 'https://news.google.com/rss/search?q=Kyle+Conti+Construction', ARRAY['Kyle Conti Construction'], true),
('Roy Rock', 'Rock and excavation services', 'https://news.google.com/rss/search?q=Roy+Rock', ARRAY['Roy Rock'], true),
('NJG Outdoor Management', 'Outdoor management and landscaping', 'https://news.google.com/rss/search?q=NJG+Outdoor+Management+LLC', ARRAY['NJG Outdoor Management LLC'], true),
('Krutis Excavating', 'Excavation services', 'https://news.google.com/rss/search?q=Krutis+Excavating', ARRAY['Krutis Excavating'], true),
('Joe Maggio Construction', 'Construction and contracting', 'https://news.google.com/rss/search?q=Joe+Maggio+construction+OR+Joe+Maggio+contracting', ARRAY['Joe Maggio Construction', 'Joe Maggio Contracting'], true),
('A-Tech Services', 'Technical and landscape services', 'https://news.google.com/rss/search?q=A-Tech+Services+OR+A-Tech+Landscape', ARRAY['A-Tech Services', 'A-Tech Landscape'], true),
('Stilo Paving & McKeon Concrete', 'Paving and concrete services', 'https://news.google.com/rss/search?q=Stilo+Paving+%26+Excavating+OR+McKeon+Concrete+Services', ARRAY['Stilo Paving & Excavating', 'McKeon Concrete Services'], true),
('GMP Construction', 'New Jersey construction company', 'https://news.google.com/rss/search?q=GMP+construction+New+Jersey', ARRAY['GMP Construction'], true),
('Caravella Construction', 'New Jersey construction company', 'https://news.google.com/rss/search?q=Caravella+construction+New+Jersey', ARRAY['Caravella Construction'], true),
('Royce Construction', 'New Jersey construction company', 'https://news.google.com/rss/search?q=Royce+construction+New+Jersey', ARRAY['Royce Construction'], true),
('A Colarusso & Son', 'Construction and materials', 'https://news.google.com/rss/search?q=A+Colarusso+%26+Son', ARRAY['A Colarusso & Son'], true),
('Boyce Excavating', 'Excavation services', 'https://news.google.com/rss/search?q=Boyce+Excavating', ARRAY['Boyce Excavating'], true),
('Arold Construction', 'General construction', 'https://news.google.com/rss/search?q=Arold+Construction', ARRAY['Arold Construction'], true),
('J Mullen & Son', 'Construction services', 'https://news.google.com/rss/search?q=J+Mullen+%26+Son', ARRAY['J Mullen & Son'], true),
('Hydrovac Construction', 'Hydrovac services in New Jersey', 'https://news.google.com/rss/search?q=Hydrovac+construction+New+Jersey', ARRAY['Hydrovac Construction'], true),
('Precision Pipeline Solutions', 'Pipeline construction and services', 'https://news.google.com/rss/search?q=Precision+Pipeline+Solutions', ARRAY['Precision Pipeline Solutions'], true),
('Ward Pavements', 'Paving and road construction', 'https://news.google.com/rss/search?q=Ward+Pavements+Inc', ARRAY['Ward Pavements Inc'], true),
('Pro-Site Work & Paving Solutions', 'Site work and paving', 'https://news.google.com/rss/search?q=Pro-Site+Work+OR+Paving+Solutions', ARRAY['Pro-Site Work', 'Paving Solutions'], true),
('Whispering Pines Construction', 'New Jersey construction company', 'https://news.google.com/rss/search?q=Whispering+Pines+construction+New+Jersey', ARRAY['Whispering Pines Construction'], true),
('Cioffi Services', 'Construction services', 'https://news.google.com/rss/search?q=Cioffi+Services', ARRAY['Cioffi Services'], true),
('Sullivan Construction Group', 'Construction and contracting', 'https://news.google.com/rss/search?q=Sullivan+Construction+Group+OR+SCG+construction', ARRAY['Sullivan Construction Group', 'SCG Construction'], true),
('D&L Paving', 'Paving services', 'https://news.google.com/rss/search?q=D%26L+Paving', ARRAY['D&L Paving'], true),
('Lakeside Construction & Sho-Con', 'Construction services', 'https://news.google.com/rss/search?q=Lakeside+Construction+OR+Sho-Con', ARRAY['Lakeside Construction', 'Sho-Con'], true),
('Harrington Construction', 'General construction', 'https://news.google.com/rss/search?q=Harrington+Construction', ARRAY['Harrington Construction'], true),
('Rosario Contracting', 'Contracting services', 'https://news.google.com/rss/search?q=Rosario+Contracting+Corp+OR+Rosario+%26+Mass', ARRAY['Rosario Contracting Corp', 'Rosario & Mass'], true),
('William J Guarini Inc', 'Construction and contracting', 'https://news.google.com/rss/search?q=William+J+Guarini+Inc', ARRAY['William J Guarini Inc'], true);
</file>

<file path="supabase/migrations/20250625182744_92ac1f90-bfdc-4e89-b01b-7992ed964976.sql">
-- Create table for storing daily analytics
CREATE TABLE public.daily_analytics (
  id UUID NOT NULL DEFAULT gen_random_uuid() PRIMARY KEY,
  analysis_date DATE NOT NULL,
  analysis_time TIME NOT NULL,
  created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(),
  
  -- Metrics data
  active_news_sources INTEGER NOT NULL DEFAULT 0,
  companies_tracked INTEGER NOT NULL DEFAULT 0,
  news_articles_count INTEGER NOT NULL DEFAULT 0,
  labor_alerts_count INTEGER NOT NULL DEFAULT 0,
  
  -- Chart data (stored as JSONB for flexibility)
  company_news_activity JSONB,
  labor_activity_tracking JSONB,
  
  -- AI-generated insights
  daily_summary TEXT,
  key_insights TEXT[],
  high_priority_alerts TEXT[],
  trend_analysis TEXT,
  
  UNIQUE(analysis_date, analysis_time)
);

-- Enable RLS
ALTER TABLE public.daily_analytics ENABLE ROW LEVEL SECURITY;

-- Create policy for reading analytics (public read access since this is organizational data)
CREATE POLICY "Anyone can view daily analytics" 
  ON public.daily_analytics 
  FOR SELECT 
  USING (true);

-- Create indexes for better performance
CREATE INDEX idx_daily_analytics_date ON public.daily_analytics(analysis_date DESC);
CREATE INDEX idx_daily_analytics_created_at ON public.daily_analytics(created_at DESC);
</file>

<file path="supabase/migrations/20250626153207_d8255edb-078c-418d-98f2-b3cf54c733aa.sql">
-- Create a table to store job listings from Henjii
CREATE TABLE public.job_listings (
  id UUID NOT NULL DEFAULT gen_random_uuid() PRIMARY KEY,
  title TEXT NOT NULL,
  company TEXT,
  location TEXT,
  url TEXT NOT NULL UNIQUE,
  raw_content TEXT,
  processed_content JSONB,
  ai_analysis TEXT,
  priority TEXT CHECK (priority IN ('high', 'medium', 'low')),
  job_type TEXT CHECK (job_type IN ('field', 'office', 'mechanic', 'admin')),
  pay_range TEXT,
  insights TEXT,
  scraped_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(),
  processed_at TIMESTAMP WITH TIME ZONE,
  is_processed BOOLEAN DEFAULT false,
  is_active BOOLEAN DEFAULT true,
  created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(),
  updated_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now()
);

-- Create index for faster queries
CREATE INDEX idx_job_listings_processed ON public.job_listings(is_processed, is_active);
CREATE INDEX idx_job_listings_scraped_at ON public.job_listings(scraped_at DESC);

-- Enable Row Level Security (though this data is generally public)
ALTER TABLE public.job_listings ENABLE ROW LEVEL SECURITY;

-- Create policy to allow read access to all authenticated users
CREATE POLICY "Allow read access to job listings" 
  ON public.job_listings 
  FOR SELECT 
  TO authenticated
  USING (true);

-- Create policy to allow system operations (for edge functions)
CREATE POLICY "Allow system operations on job listings" 
  ON public.job_listings 
  FOR ALL 
  TO service_role
  USING (true);
</file>

<file path="supabase/migrations/20250626204107_b588787b-9799-4abb-b107-c7c6d3999171.sql">
-- Create a table for pending company requests
CREATE TABLE public.company_requests (
  id UUID NOT NULL DEFAULT gen_random_uuid() PRIMARY KEY,
  user_id UUID REFERENCES auth.users(id) ON DELETE CASCADE NOT NULL,
  company_name TEXT NOT NULL,
  company_address TEXT,
  reason TEXT,
  status TEXT NOT NULL DEFAULT 'pending' CHECK (status IN ('pending', 'approved', 'rejected')),
  created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(),
  updated_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(),
  reviewed_by UUID REFERENCES auth.users(id) ON DELETE SET NULL,
  reviewed_at TIMESTAMP WITH TIME ZONE
);

-- Enable RLS on company_requests
ALTER TABLE public.company_requests ENABLE ROW LEVEL SECURITY;

-- Create policies for company_requests
CREATE POLICY "Users can view their own company requests" 
  ON public.company_requests 
  FOR SELECT 
  USING (auth.uid() = user_id);

CREATE POLICY "Users can insert their own company requests" 
  ON public.company_requests 
  FOR INSERT 
  WITH CHECK (auth.uid() = user_id);

-- Create an index for better performance
CREATE INDEX idx_company_requests_user_id ON public.company_requests(user_id);
CREATE INDEX idx_company_requests_status ON public.company_requests(status);

-- Update the trigger function to create tracking records for ALL main companies
DROP FUNCTION IF EXISTS public.create_default_company_tracking() CASCADE;

CREATE OR REPLACE FUNCTION public.create_default_company_tracking()
RETURNS trigger
LANGUAGE plpgsql
SECURITY DEFINER
AS $function$
BEGIN
    -- Insert tracking records for ALL active main companies for the new user
    INSERT INTO public.tracked_companies (user_id, name, priority, main_company_id, address)
    SELECT 
        NEW.id as user_id,
        main_companies.name,
        'interested' as priority,
        main_companies.id as main_company_id,
        main_companies.description as address
    FROM public.main_companies
    WHERE main_companies.is_active = true;
    
    RETURN NEW;
END;
$function$;

-- Recreate the trigger
CREATE TRIGGER on_auth_user_created_create_company_tracking
    AFTER INSERT ON auth.users
    FOR EACH ROW EXECUTE FUNCTION public.create_default_company_tracking();
</file>

<file path="supabase/migrations/20250626205615_abec3d2a-fb28-447c-bb19-874c161a661c.sql">
-- Add RLS policy to allow users to delete their own company requests
CREATE POLICY "Users can delete their own company requests" 
  ON public.company_requests 
  FOR DELETE 
  USING (auth.uid() = user_id);
</file>

<file path="supabase/migrations/20250626210730_b766ab7d-387e-4fe5-a652-7facaaae62a8.sql">
-- Add the missing companies to main_companies table
INSERT INTO public.main_companies (name, description, priority) VALUES
('ValveTek Utility Services Inc', 'Utility services and construction', 9),
('JA Neary Corp', 'Construction and contracting', 10),
('Think Pavers', 'Paving and construction services', 11),
('Kyle Conti Construction', 'General construction contractor', 12),
('Roy Rock', 'Rock and aggregate services', 13),
('NJG Outdoor Management LLC', 'Outdoor construction management', 14),
('Krutis Excavating', 'Excavation and earthwork', 15),
('Joe Maggio Construction', 'General construction services', 16),
('A-Tech Services', 'Technical construction services', 17),
('Stilo Paving & Excavating', 'Paving and excavation services', 18),
('GMP Construction', 'General construction contractor', 19),
('Caravella Construction', 'Construction and contracting', 20),
('Royce Construction', 'General construction services', 21),
('Boyce Excavating', 'Excavation contractor', 22),
('Arold Construction', 'Construction services', 23),
('J Mullen & Son', 'Family construction business', 24),
('Hydrovac Construction', 'Hydrovac and excavation services', 25),
('Precision Pipeline Solutions', 'Pipeline construction and services', 26),
('Ward Pavements Inc', 'Pavement construction', 27),
('Pro-Site Work', 'Site preparation and construction', 28),
('Whispering Pines Construction', 'Residential and commercial construction', 29),
('Cioffi Services', 'Construction and utility services', 30),
('Sullivan Construction Group', 'Construction group services', 31),
('D&L Paving', 'Paving contractor', 32),
('Lakeside Construction', 'Construction services', 33),
('Harrington Construction', 'General construction contractor', 34),
('Rosario Contracting Corp', 'Contracting and construction', 35);

-- Update the existing company name to match your list exactly
UPDATE public.main_companies 
SET name = 'A Colarusso & Son' 
WHERE name = 'Colarusso';
</file>

<file path="supabase/migrations/20250626214551_86a4abbc-0a9d-4cb4-a6a0-f72412da1edf.sql">
-- Enable pg_cron extension if not already enabled
CREATE EXTENSION IF NOT EXISTS pg_cron;

-- Schedule daily analytics generation at 6 PM EST (11 PM UTC during standard time, 10 PM UTC during daylight time)
-- Using 11 PM UTC as the primary schedule (EST standard time)
SELECT cron.schedule(
  'generate-daily-analytics-6pm-est',
  '0 23 * * *', -- 11 PM UTC = 6 PM EST
  $$
  SELECT
    net.http_post(
        url:='https://jekpvqacecqnflweqmre.supabase.co/functions/v1/generate-daily-analytics',
        headers:='{"Content-Type": "application/json", "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Impla3B2cWFjZWNxbmZsd2VxbXJlIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDYzMzg1NzksImV4cCI6MjA2MTkxNDU3OX0.zxx7dD1Q-3EQXUMnxnCF8dkJ2WMy1svJ2ERUOGfB5dg"}'::jsonb,
        body:='{"scheduled": true, "analysis_type": "daily_6pm"}'::jsonb
    ) as request_id;
  $$
);

-- Also schedule for daylight savings time (10 PM UTC = 6 PM EDT)
SELECT cron.schedule(
  'generate-daily-analytics-6pm-edt',
  '0 22 * * *', -- 10 PM UTC = 6 PM EDT
  $$
  SELECT
    net.http_post(
        url:='https://jekpvqacecqnflweqmre.supabase.co/functions/v1/generate-daily-analytics',
        headers:='{"Content-Type": "application/json", "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Impla3B2cWFjZWNxbmZsd2VxbXJlIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDYzMzg1NzksImV4cCI6MjA2MTkxNDU3OX0.zxx7dD1Q-3EQXUMnxnCF8dkJ2WMy1svJ2ERUOGfB5dg"}'::jsonb,
        body:='{"scheduled": true, "analysis_type": "daily_6pm"}'::jsonb
    ) as request_id;
  $$
);

-- Add an index for better historic report navigation
CREATE INDEX IF NOT EXISTS idx_daily_analytics_date_time ON public.daily_analytics(analysis_date DESC, analysis_time DESC);
</file>

<file path="supabase/migrations/20250626223442_add_wordpress_category_to_news_articles.sql">
-- Add detailed_analysis column to daily_analytics table
ALTER TABLE daily_analytics 
ADD COLUMN detailed_analysis text;

-- Add category tracking to news_articles table
ALTER TABLE public.news_articles 
ADD COLUMN wordpress_category TEXT,
ADD COLUMN content_type TEXT CHECK (content_type IN ('news', 'job', 'announcement', 'update')),
ADD COLUMN priority_level TEXT CHECK (priority_level IN ('critical', 'high', 'medium', 'low'));

-- Create indexes for better performance
CREATE INDEX idx_news_articles_content_type ON public.news_articles(content_type, priority_level);
CREATE INDEX idx_news_articles_wordpress_category ON public.news_articles(wordpress_category);
CREATE INDEX idx_news_articles_published_at ON public.news_articles(published_at DESC);

-- Add category tracking to job_listings table
ALTER TABLE public.job_listings 
ADD COLUMN wordpress_category TEXT DEFAULT 'employer-watch',
ADD COLUMN source_type TEXT DEFAULT 'henjii';

-- Create index for job listings by category
CREATE INDEX idx_job_listings_category ON public.job_listings(wordpress_category, scraped_at DESC);
</file>

<file path="supabase/migrations/20250701000000_add_content_type_to_news_articles.sql">
-- Add content_type column to news_articles for better filtering and categorization
ALTER TABLE news_articles ADD COLUMN IF NOT EXISTS content_type TEXT;

-- Optionally, add an index for performance
CREATE INDEX IF NOT EXISTS idx_news_articles_content_type ON news_articles(content_type);

-- Add a comment for documentation
COMMENT ON COLUMN news_articles.content_type IS 'Type of content: news, job, announcement, etc.';
</file>

<file path="supabase/migrations/20250709221513-519be282-5baf-43c3-a41e-cab954f05445.sql">
-- Add missing analysis columns to news_articles table
ALTER TABLE news_articles 
ADD COLUMN IF NOT EXISTS excerpt TEXT,
ADD COLUMN IF NOT EXISTS full_analysis TEXT,
ADD COLUMN IF NOT EXISTS local_825_relevance TEXT,
ADD COLUMN IF NOT EXISTS is_analyzed BOOLEAN DEFAULT FALSE,
ADD COLUMN IF NOT EXISTS analyzed_at TIMESTAMP WITH TIME ZONE;

-- Create index for better performance on analyzed articles
CREATE INDEX IF NOT EXISTS idx_news_articles_analyzed ON news_articles(is_analyzed, analyzed_at DESC);
</file>

<file path="supabase/migrations/20250710131813-438279e8-ddc6-4c96-9436-8943ed602c3b.sql">
-- Add missing columns to job_listings table
ALTER TABLE public.job_listings 
ADD COLUMN IF NOT EXISTS insights TEXT,
ADD COLUMN IF NOT EXISTS is_processed BOOLEAN DEFAULT false,
ADD COLUMN IF NOT EXISTS ai_analysis TEXT,
ADD COLUMN IF NOT EXISTS formatted_description TEXT,
ADD COLUMN IF NOT EXISTS source_type TEXT DEFAULT 'henjii.com',
ADD COLUMN IF NOT EXISTS local_825_relevance TEXT,
ADD COLUMN IF NOT EXISTS enhanced_at TIMESTAMP WITH TIME ZONE,
ADD COLUMN IF NOT EXISTS processed_at TIMESTAMP WITH TIME ZONE;

-- Update the existing index to include is_processed
DROP INDEX IF EXISTS idx_job_listings_processed;
CREATE INDEX idx_job_listings_processed ON public.job_listings(is_processed, is_active);

-- Update existing records to have is_processed = true if they have content
UPDATE public.job_listings 
SET is_processed = true, processed_at = now()
WHERE raw_content IS NOT NULL AND is_processed = false;
</file>

<file path="supabase/migrations/20250710142420-dc86821b-6415-43be-83a6-7b8c33df08e2.sql">
-- Create a table to store site-wide settings
CREATE TABLE public.site_settings (
  id UUID NOT NULL DEFAULT gen_random_uuid() PRIMARY KEY,
  setting_key TEXT NOT NULL UNIQUE,
  setting_value TEXT NOT NULL,
  updated_by UUID REFERENCES auth.users(id),
  created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(),
  updated_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now()
);

-- Insert the maintenance mode setting with default value (disabled)
INSERT INTO public.site_settings (setting_key, setting_value) 
VALUES ('maintenance_mode', 'false');

-- Enable RLS on the site_settings table
ALTER TABLE public.site_settings ENABLE ROW LEVEL SECURITY;

-- Allow everyone to read site settings (needed for maintenance mode check)
CREATE POLICY "Anyone can view site settings" 
  ON public.site_settings 
  FOR SELECT 
  USING (true);

-- Only authenticated users can update site settings (admins will use service role)
CREATE POLICY "Service role can update site settings" 
  ON public.site_settings 
  FOR UPDATE 
  USING (auth.role() = 'service_role');

CREATE POLICY "Service role can insert site settings" 
  ON public.site_settings 
  FOR INSERT 
  WITH CHECK (auth.role() = 'service_role');
</file>

<file path="supabase/migrations/20250710145815-e5a71458-d19d-4b10-b806-5c36bc5a18dc.sql">
-- Create an enum for user roles
CREATE TYPE public.app_role AS ENUM ('admin', 'moderator', 'user');

-- Create the user_roles table
CREATE TABLE public.user_roles (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id UUID REFERENCES auth.users(id) ON DELETE CASCADE NOT NULL,
    role app_role NOT NULL DEFAULT 'user',
    created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(),
    updated_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(),
    UNIQUE (user_id, role)
);

-- Enable RLS on user_roles
ALTER TABLE public.user_roles ENABLE ROW LEVEL SECURITY;

-- Create a security definer function to check user roles
CREATE OR REPLACE FUNCTION public.has_role(_user_id UUID, _role app_role)
RETURNS boolean
LANGUAGE sql
STABLE
SECURITY DEFINER
AS $$
  SELECT EXISTS (
    SELECT 1
    FROM public.user_roles
    WHERE user_id = _user_id
      AND role = _role
  )
$$;

-- Create RLS policies for user_roles table
CREATE POLICY "Users can view their own roles" 
  ON public.user_roles 
  FOR SELECT 
  USING (auth.uid() = user_id);

CREATE POLICY "Admins can view all roles" 
  ON public.user_roles 
  FOR SELECT 
  USING (public.has_role(auth.uid(), 'admin'));

CREATE POLICY "Admins can insert user roles" 
  ON public.user_roles 
  FOR INSERT 
  WITH CHECK (public.has_role(auth.uid(), 'admin'));

CREATE POLICY "Admins can update user roles" 
  ON public.user_roles 
  FOR UPDATE 
  USING (public.has_role(auth.uid(), 'admin'));

CREATE POLICY "Admins can delete user roles" 
  ON public.user_roles 
  FOR DELETE 
  USING (public.has_role(auth.uid(), 'admin'));

-- Create a trigger function to assign default user role
CREATE OR REPLACE FUNCTION public.handle_new_user_role()
RETURNS trigger
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
BEGIN
  INSERT INTO public.user_roles (user_id, role)
  VALUES (NEW.id, 'user');
  RETURN NEW;
END;
$$;

-- Create trigger to assign default role on user creation
CREATE TRIGGER on_auth_user_created_role
  AFTER INSERT ON auth.users
  FOR EACH ROW EXECUTE FUNCTION public.handle_new_user_role();

-- Give Jeremy admin role (replace with actual user ID when known)
-- First, let's insert admin role for the user with email jeremy@augments.art
INSERT INTO public.user_roles (user_id, role)
SELECT id, 'admin'::app_role
FROM auth.users
WHERE email = 'jeremy@augments.art'
ON CONFLICT (user_id, role) DO NOTHING;

-- Give all existing users without roles the default 'user' role
INSERT INTO public.user_roles (user_id, role)
SELECT au.id, 'user'::app_role
FROM auth.users au
LEFT JOIN public.user_roles ur ON au.id = ur.user_id
WHERE ur.user_id IS NULL
ON CONFLICT (user_id, role) DO NOTHING;
</file>

<file path="supabase/migrations/20250710154446-319a94d6-4edb-48b6-bb5c-2d34bcfb60e3.sql">
-- Create a function to update site settings with service role privileges
CREATE OR REPLACE FUNCTION public.update_site_setting(key TEXT, value TEXT)
RETURNS void
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
BEGIN
  -- Check if setting exists
  IF EXISTS (SELECT 1 FROM public.site_settings WHERE setting_key = key) THEN
    -- Update existing setting
    UPDATE public.site_settings 
    SET setting_value = value, updated_at = now()
    WHERE setting_key = key;
  ELSE
    -- Insert new setting
    INSERT INTO public.site_settings (setting_key, setting_value)
    VALUES (key, value);
  END IF;
END;
$$;
</file>

<file path="supabase/migrations/20250710154814-255584c2-08ee-4735-9068-03421e421fd0.sql">
-- Fix security issues by setting search_path for all functions

-- Update has_role function
CREATE OR REPLACE FUNCTION public.has_role(_user_id uuid, _role app_role)
RETURNS boolean
LANGUAGE sql
STABLE
SECURITY DEFINER
SET search_path = ''
AS $$
  SELECT EXISTS (
    SELECT 1
    FROM public.user_roles
    WHERE user_id = _user_id
      AND role = _role
  )
$$;

-- Update handle_new_user_role function
CREATE OR REPLACE FUNCTION public.handle_new_user_role()
RETURNS trigger
LANGUAGE plpgsql
SECURITY DEFINER
SET search_path = ''
AS $$
BEGIN
  INSERT INTO public.user_roles (user_id, role)
  VALUES (NEW.id, 'user');
  RETURN NEW;
END;
$$;

-- Update validate_username function
CREATE OR REPLACE FUNCTION public.validate_username()
RETURNS trigger
LANGUAGE plpgsql
SET search_path = ''
AS $$
BEGIN
  -- Check if username contains only allowed characters
  IF NEW.username !~ '^[a-zA-Z0-9_-]+$' THEN
    RAISE EXCEPTION 'Username can only contain letters, numbers, underscores and hyphens';
  END IF;
  
  -- Check if username is already taken (case insensitive)
  IF EXISTS (
    SELECT 1 FROM public.profiles 
    WHERE LOWER(username) = LOWER(NEW.username) 
    AND id != NEW.id
  ) THEN
    RAISE EXCEPTION 'Username is already taken';
  END IF;
  
  RETURN NEW;
END;
$$;

-- Update update_site_setting function
CREATE OR REPLACE FUNCTION public.update_site_setting(key TEXT, value TEXT)
RETURNS void
LANGUAGE plpgsql
SECURITY DEFINER
SET search_path = ''
AS $$
BEGIN
  -- Check if setting exists
  IF EXISTS (SELECT 1 FROM public.site_settings WHERE setting_key = key) THEN
    -- Update existing setting
    UPDATE public.site_settings 
    SET setting_value = value, updated_at = now()
    WHERE setting_key = key;
  ELSE
    -- Insert new setting
    INSERT INTO public.site_settings (setting_key, setting_value)
    VALUES (key, value);
  END IF;
END;
$$;

-- Update create_default_company_tracking function
CREATE OR REPLACE FUNCTION public.create_default_company_tracking()
RETURNS trigger
LANGUAGE plpgsql
SECURITY DEFINER
SET search_path = ''
AS $$
BEGIN
    -- Insert tracking records for ALL active main companies for the new user
    INSERT INTO public.tracked_companies (user_id, name, priority, main_company_id, address)
    SELECT 
        NEW.id as user_id,
        main_companies.name,
        'interested' as priority,
        main_companies.id as main_company_id,
        main_companies.description as address
    FROM public.main_companies
    WHERE main_companies.is_active = true;
    
    RETURN NEW;
END;
$$;

-- Update generate_initial_profile_analysis function
CREATE OR REPLACE FUNCTION public.generate_initial_profile_analysis()
RETURNS trigger
LANGUAGE plpgsql
SECURITY DEFINER
SET search_path = ''
AS $$
BEGIN
  -- Only generate analysis if onboarding is completed
  IF NEW.onboarding_completed = true AND 
     (OLD IS NULL OR OLD.onboarding_completed = false OR 
     OLD.industry <> NEW.industry OR
     OLD.organization_size <> NEW.organization_size OR
     OLD.role <> NEW.role OR
     OLD.priority <> NEW.priority OR
     OLD.goals <> NEW.goals) THEN
    
    -- Insert placeholder analysis (in production this would call an AI function)
    INSERT INTO public.profile_analysis (profile_id, analysis_text)
    VALUES (
      NEW.id, 
      'Based on your profile as a ' || COALESCE(NEW.role, 'professional') || 
      ' in the ' || COALESCE(NEW.industry, 'industry') || 
      ' with an organization size of ' || COALESCE(NEW.organization_size, 'unknown size') || 
      ', your priority is ' || COALESCE(NEW.priority, 'not specified') || 
      '. Our analysis suggests focusing on: ' ||
      CASE 
        WHEN NEW.industry = 'Technology' THEN 'implementing data-driven decision making processes'
        WHEN NEW.industry = 'Healthcare' THEN 'optimizing patient outcomes through data analysis'
        WHEN NEW.industry = 'Education' THEN 'enhancing learning metrics and student engagement'
        WHEN NEW.industry = 'Finance' THEN 'improving risk assessment through advanced analytics'
        WHEN NEW.industry = 'Manufacturing' THEN 'streamlining production efficiency with data insights'
        ELSE 'building a strong data foundation for informed decisions'
      END
    );
  END IF;
  
  RETURN NEW;
END;
$$;
</file>

<file path="supabase/migrations/20250710154833-3f7e1d5d-bada-4ddb-86a4-6ec1358d0fc8.sql">
-- Fix security issues by setting search_path for all functions

-- Update has_role function
CREATE OR REPLACE FUNCTION public.has_role(_user_id uuid, _role app_role)
RETURNS boolean
LANGUAGE sql
STABLE
SECURITY DEFINER
SET search_path = ''
AS $$
  SELECT EXISTS (
    SELECT 1
    FROM public.user_roles
    WHERE user_id = _user_id
      AND role = _role
  )
$$;

-- Update handle_new_user_role function
CREATE OR REPLACE FUNCTION public.handle_new_user_role()
RETURNS trigger
LANGUAGE plpgsql
SECURITY DEFINER
SET search_path = ''
AS $$
BEGIN
  INSERT INTO public.user_roles (user_id, role)
  VALUES (NEW.id, 'user');
  RETURN NEW;
END;
$$;

-- Update validate_username function
CREATE OR REPLACE FUNCTION public.validate_username()
RETURNS trigger
LANGUAGE plpgsql
SET search_path = ''
AS $$
BEGIN
  -- Check if username contains only allowed characters
  IF NEW.username !~ '^[a-zA-Z0-9_-]+$' THEN
    RAISE EXCEPTION 'Username can only contain letters, numbers, underscores and hyphens';
  END IF;
  
  -- Check if username is already taken (case insensitive)
  IF EXISTS (
    SELECT 1 FROM public.profiles 
    WHERE LOWER(username) = LOWER(NEW.username) 
    AND id != NEW.id
  ) THEN
    RAISE EXCEPTION 'Username is already taken';
  END IF;
  
  RETURN NEW;
END;
$$;

-- Update update_site_setting function
CREATE OR REPLACE FUNCTION public.update_site_setting(key TEXT, value TEXT)
RETURNS void
LANGUAGE plpgsql
SECURITY DEFINER
SET search_path = ''
AS $$
BEGIN
  -- Check if setting exists
  IF EXISTS (SELECT 1 FROM public.site_settings WHERE setting_key = key) THEN
    -- Update existing setting
    UPDATE public.site_settings 
    SET setting_value = value, updated_at = now()
    WHERE setting_key = key;
  ELSE
    -- Insert new setting
    INSERT INTO public.site_settings (setting_key, setting_value)
    VALUES (key, value);
  END IF;
END;
$$;

-- Update create_default_company_tracking function
CREATE OR REPLACE FUNCTION public.create_default_company_tracking()
RETURNS trigger
LANGUAGE plpgsql
SECURITY DEFINER
SET search_path = ''
AS $$
BEGIN
    -- Insert tracking records for ALL active main companies for the new user
    INSERT INTO public.tracked_companies (user_id, name, priority, main_company_id, address)
    SELECT 
        NEW.id as user_id,
        main_companies.name,
        'interested' as priority,
        main_companies.id as main_company_id,
        main_companies.description as address
    FROM public.main_companies
    WHERE main_companies.is_active = true;
    
    RETURN NEW;
END;
$$;

-- Update generate_initial_profile_analysis function
CREATE OR REPLACE FUNCTION public.generate_initial_profile_analysis()
RETURNS trigger
LANGUAGE plpgsql
SECURITY DEFINER
SET search_path = ''
AS $$
BEGIN
  -- Only generate analysis if onboarding is completed
  IF NEW.onboarding_completed = true AND 
     (OLD IS NULL OR OLD.onboarding_completed = false OR 
     OLD.industry <> NEW.industry OR
     OLD.organization_size <> NEW.organization_size OR
     OLD.role <> NEW.role OR
     OLD.priority <> NEW.priority OR
     OLD.goals <> NEW.goals) THEN
    
    -- Insert placeholder analysis (in production this would call an AI function)
    INSERT INTO public.profile_analysis (profile_id, analysis_text)
    VALUES (
      NEW.id, 
      'Based on your profile as a ' || COALESCE(NEW.role, 'professional') || 
      ' in the ' || COALESCE(NEW.industry, 'industry') || 
      ' with an organization size of ' || COALESCE(NEW.organization_size, 'unknown size') || 
      ', your priority is ' || COALESCE(NEW.priority, 'not specified') || 
      '. Our analysis suggests focusing on: ' ||
      CASE 
        WHEN NEW.industry = 'Technology' THEN 'implementing data-driven decision making processes'
        WHEN NEW.industry = 'Healthcare' THEN 'optimizing patient outcomes through data analysis'
        WHEN NEW.industry = 'Education' THEN 'enhancing learning metrics and student engagement'
        WHEN NEW.industry = 'Finance' THEN 'improving risk assessment through advanced analytics'
        WHEN NEW.industry = 'Manufacturing' THEN 'streamlining production efficiency with data insights'
        ELSE 'building a strong data foundation for informed decisions'
      END
    );
  END IF;
  
  RETURN NEW;
END;
$$;
</file>

<file path="supabase/migrations/20250710171044-f005f596-e3a6-40ef-b2df-9699d5c37427.sql">
-- Add comprehensive company profile fields to main_companies table
ALTER TABLE public.main_companies 
ADD COLUMN IF NOT EXISTS profile_data JSONB DEFAULT '{}',
ADD COLUMN IF NOT EXISTS executive_summary TEXT,
ADD COLUMN IF NOT EXISTS status TEXT DEFAULT 'pending',
ADD COLUMN IF NOT EXISTS completed_at TIMESTAMP WITH TIME ZONE,
ADD COLUMN IF NOT EXISTS osha_violations JSONB DEFAULT '{}',
ADD COLUMN IF NOT EXISTS nlrb_cases JSONB DEFAULT '{}',
ADD COLUMN IF NOT EXISTS organizing_leverage JSONB DEFAULT '{}',
ADD COLUMN IF NOT EXISTS company_profile JSONB DEFAULT '{}',
ADD COLUMN IF NOT EXISTS recommendations JSONB DEFAULT '{}',
ADD COLUMN IF NOT EXISTS citations JSONB DEFAULT '{}',
ADD COLUMN IF NOT EXISTS appendices TEXT[],
ADD COLUMN IF NOT EXISTS author JSONB DEFAULT '{}',
ADD COLUMN IF NOT EXISTS is_confidential BOOLEAN DEFAULT true,
ADD COLUMN IF NOT EXISTS report_date DATE,
ADD COLUMN IF NOT EXISTS job_id TEXT,
ADD COLUMN IF NOT EXISTS prepared_for TEXT DEFAULT 'Local 825 Organizers & Leadership',
ADD COLUMN IF NOT EXISTS bulldozer_mode BOOLEAN DEFAULT false,
ADD COLUMN IF NOT EXISTS costs JSONB DEFAULT '{}';

-- Create index for faster company profile lookups
CREATE INDEX IF NOT EXISTS idx_main_companies_profile_data ON main_companies USING GIN (profile_data);
CREATE INDEX IF NOT EXISTS idx_main_companies_status ON main_companies (status);
CREATE INDEX IF NOT EXISTS idx_main_companies_report_date ON main_companies (report_date);

-- Create a function to get related articles and jobs for a company
CREATE OR REPLACE FUNCTION public.get_company_related_content(company_name_param TEXT)
RETURNS TABLE (
  articles_count BIGINT,
  jobs_count BIGINT,
  recent_articles JSONB,
  recent_jobs JSONB
)
LANGUAGE plpgsql
SECURITY DEFINER
SET search_path = ''
AS $$
BEGIN
  RETURN QUERY
  WITH articles_data AS (
    SELECT 
      COUNT(*) as article_count,
      COALESCE(
        jsonb_agg(
          jsonb_build_object(
            'id', id,
            'title', title,
            'published_at', published_at,
            'url', url,
            'description', description,
            'local_825_relevance', local_825_relevance
          ) ORDER BY published_at DESC
        ) FILTER (WHERE published_at >= NOW() - INTERVAL '30 days'), 
        '[]'::jsonb
      ) as recent_articles_json
    FROM public.news_articles 
    WHERE LOWER(company_mentioned) = LOWER(company_name_param)
      OR LOWER(title) LIKE '%' || LOWER(company_name_param) || '%'
      OR LOWER(description) LIKE '%' || LOWER(company_name_param) || '%'
  ),
  jobs_data AS (
    SELECT 
      COUNT(*) as job_count,
      COALESCE(
        jsonb_agg(
          jsonb_build_object(
            'id', id,
            'title', title,
            'company', company,
            'location', location,
            'scraped_at', scraped_at,
            'url', url,
            'priority', priority,
            'job_type', job_type
          ) ORDER BY scraped_at DESC
        ) FILTER (WHERE scraped_at >= NOW() - INTERVAL '30 days'), 
        '[]'::jsonb
      ) as recent_jobs_json
    FROM public.job_listings 
    WHERE LOWER(company) = LOWER(company_name_param)
      OR LOWER(title) LIKE '%' || LOWER(company_name_param) || '%'
  )
  SELECT 
    articles_data.article_count,
    jobs_data.job_count,
    articles_data.recent_articles_json,
    jobs_data.recent_jobs_json
  FROM articles_data, jobs_data;
END;
$$;
</file>

<file path="supabase/migrations/20250710184900-7aaaa97f-a798-4003-bb94-f68193355ef0.sql">
-- Update existing records to populate content_type and wordpress_category
-- Based on the categorization logic: local-825 = news/article, employer-watch = job

-- First, let's update news_articles table
-- Set wordpress_category and content_type based on existing data patterns

-- Update records that appear to be Local 825 content (news/articles)
UPDATE public.news_articles 
SET 
  wordpress_category = 'local-825',
  content_type = 'news'
WHERE 
  wordpress_category IS NULL 
  AND content_type IS NULL
  AND (
    LOWER(title) LIKE '%local 825%' 
    OR LOWER(title) LIKE '%iuoe%'
    OR LOWER(title) LIKE '%operating engineers%'
    OR LOWER(description) LIKE '%local 825%'
    OR LOWER(description) LIKE '%iuoe%'
    OR LOWER(description) LIKE '%operating engineers%'
    OR source_id IN (
      SELECT id FROM news_sources 
      WHERE LOWER(name) LIKE '%local%825%' 
      OR LOWER(name) LIKE '%bulldozer%'
      OR LOWER(rss_url) LIKE '%local-825%'
    )
  );

-- Update records that appear to be job content
UPDATE public.news_articles 
SET 
  wordpress_category = 'employer-watch',
  content_type = 'job'
WHERE 
  wordpress_category IS NULL 
  AND content_type IS NULL
  AND (
    LOWER(title) LIKE '%job%'
    OR LOWER(title) LIKE '%position%'
    OR LOWER(title) LIKE '%hiring%'
    OR LOWER(title) LIKE '%employment%'
    OR LOWER(title) LIKE '%career%'
    OR LOWER(description) LIKE '%job%'
    OR LOWER(description) LIKE '%position%'
    OR LOWER(description) LIKE '%hiring%'
    OR LOWER(description) LIKE '%employment%'
    OR LOWER(description) LIKE '%salary%'
    OR LOWER(url) LIKE '%job%'
    OR LOWER(url) LIKE '%employer-watch%'
    OR source_id IN (
      SELECT id FROM news_sources 
      WHERE LOWER(rss_url) LIKE '%employer-watch%'
      OR LOWER(name) LIKE '%job%'
    )
  );

-- Set remaining NULL records as general news articles
UPDATE public.news_articles 
SET 
  wordpress_category = 'local-825',
  content_type = 'news'
WHERE 
  wordpress_category IS NULL 
  AND content_type IS NULL;

-- Update job_listings table to ensure consistency
UPDATE public.job_listings 
SET 
  wordpress_category = 'employer-watch',
  content_type = 'job'
WHERE 
  wordpress_category IS NULL 
  OR content_type IS NULL;

-- Add indexes for better performance on the new categorization
CREATE INDEX IF NOT EXISTS idx_news_articles_category_type ON public.news_articles(wordpress_category, content_type);
CREATE INDEX IF NOT EXISTS idx_job_listings_category_type ON public.job_listings(wordpress_category, content_type);
</file>

<file path="supabase/config.toml">
project_id = "jekpvqacecqnflweqmre"
</file>

<file path=".gitignore">
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

node_modules
dist
dist-ssr
*.local

# Editor directories and files
.vscode/*
!.vscode/extensions.json
.idea
.DS_Store
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?
</file>

<file path="AI_ANALYSIS_FIXES.md">
# AI Analysis Fixes - COMPLETED ✅

## Issues Identified and Fixed

### 1. OpenAI API Deprecation Error ✅
**Problem**: The `analyze-article` function was using the deprecated `responses` API endpoint instead of the current `chat/completions` API.

**Solution**: 
- Updated `supabase/functions/analyze-article/index.ts` to use `https://api.openai.com/v1/chat/completions`
- Changed from `prompt` object to `messages` array format
- Updated response parsing from `aiData.output[0].text` to `aiData.choices[0]?.message?.content`
- Used `gpt-4o` model as specified in user requirements

### 2. Missing Automatic AI Analysis ✅
**Problem**: New Local 825 posts were being inserted with `is_analyzed: true` but no actual AI analysis was being performed.

**Solution**:
- Modified `supabase/functions/sync-rss-feeds/index.ts` to set `is_analyzed: false` for new posts
- Added automatic AI analysis trigger after inserting new Local 825 articles
- Each new article now gets analyzed immediately after being added to the database

### 3. Incomplete Article Display ✅
**Problem**: Articles in the feed were missing the `news_sources` relationship data needed for proper display.

**Solution**:
- Updated `src/hooks/useFeedData.ts` to include `news_sources` relationship in the query
- Added proper filtering for Local 825 news content using `wordpress_category` and `content_type`

### 4. Poor User Feedback ✅
**Problem**: Users couldn't tell when analysis was in progress or what was happening.

**Solution**:
- Enhanced `src/components/feed/ArticleCard.tsx` with better button text
- Added "Analyzing..." and "Regenerating..." states
- Improved loading indicators and user feedback

## Changes Made

### 1. Analyze Article Function (`supabase/functions/analyze-article/index.ts`)
- **API Update**: Changed from deprecated `responses` API to `chat/completions`
- **Model Update**: Using `gpt-4o` as specified
- **Prompt Structure**: Updated to use proper message format
- **Error Handling**: Improved error handling and response validation

### 2. RSS Sync Function (`supabase/functions/sync-rss-feeds/index.ts`)
- **Auto-Analysis**: New Local 825 posts automatically trigger AI analysis
- **Better Logging**: Enhanced logging for analysis process
- **Error Handling**: Improved error handling for analysis failures

### 3. Feed Data Hook (`src/hooks/useFeedData.ts`)
- **Relationship Data**: Added `news_sources` to query for proper display
- **Content Filtering**: Properly filters for Local 825 news content
- **Query Optimization**: Uses database columns for efficient filtering

### 4. Article Card Component (`src/components/feed/ArticleCard.tsx`)
- **Better UX**: Improved button text and loading states
- **User Feedback**: Clear indication of analysis status
- **Accessibility**: Better tooltips and button labels

## How It Works Now

### 1. Automatic Analysis Flow
1. RSS sync function fetches new posts from Local 825 feed
2. New posts are inserted with `is_analyzed: false`
3. Each new post automatically triggers AI analysis
4. Analysis results are stored in database
5. Posts appear in feed with full AI analysis

### 2. Manual Analysis Flow
1. Users can click "Analyze" button on unanalyzed posts
2. AI analysis is performed using OpenAI GPT-4o
3. Results are stored and displayed immediately
4. Users can regenerate analysis if needed

### 3. Article Display
1. Feed shows only Local 825 news content
2. Articles display with source information
3. AI analysis is shown in dedicated sections
4. Users can click to view full article with analysis
5. External links available for original source

## Technical Details

### OpenAI Integration
- **Model**: GPT-4o (as specified in requirements)
- **Endpoint**: `/v1/chat/completions`
- **Max Tokens**: 2000
- **Temperature**: 0.7 for balanced creativity/accuracy

### Database Schema
- **Articles**: Stored with `wordpress_category = 'local-825'` and `content_type = 'news'`
- **Analysis**: Stored in `excerpt`, `full_analysis`, and `local_825_relevance` fields
- **Status**: Tracked with `is_analyzed` and `analyzed_at` fields

### Error Handling
- **API Failures**: Graceful fallback with user-friendly error messages
- **Parsing Errors**: JSON parsing with fallback structured responses
- **Network Issues**: Retry logic and timeout handling

## Testing Recommendations

1. **Test RSS Sync**: Trigger manual RSS sync to verify new posts are analyzed
2. **Test Manual Analysis**: Click analyze button on existing posts
3. **Test Regeneration**: Use regenerate button to test analysis updates
4. **Test Article Display**: Verify articles show properly with analysis
5. **Test Error Handling**: Test with invalid API keys or network issues

## Deployment Status

✅ **Functions Deployed**: Both `analyze-article` and `sync-rss-feeds` functions deployed to Supabase
✅ **Code Committed**: All changes committed and pushed to repository
✅ **Environment Setup**: `.env.local` template created for local development

## Next Steps

1. **Monitor Performance**: Watch function execution times and costs
2. **User Testing**: Get feedback on analysis quality and relevance
3. **Optimization**: Fine-tune prompts based on user feedback
4. **Automation**: Set up scheduled RSS sync if needed
</file>

<file path="components.json">
{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "default",
  "rsc": false,
  "tsx": true,
  "tailwind": {
    "config": "tailwind.config.ts",
    "css": "src/index.css",
    "baseColor": "slate",
    "cssVariables": true,
    "prefix": ""
  },
  "aliases": {
    "components": "@/components",
    "utils": "@/lib/utils",
    "ui": "@/components/ui",
    "lib": "@/lib",
    "hooks": "@/hooks"
  }
}
</file>

<file path="eslint.config.js">
import js from "@eslint/js";
import globals from "globals";
import reactHooks from "eslint-plugin-react-hooks";
import reactRefresh from "eslint-plugin-react-refresh";
import tseslint from "typescript-eslint";

export default tseslint.config(
  { ignores: ["dist"] },
  {
    extends: [js.configs.recommended, ...tseslint.configs.recommended],
    files: ["**/*.{ts,tsx}"],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
    },
    plugins: {
      "react-hooks": reactHooks,
      "react-refresh": reactRefresh,
    },
    rules: {
      ...reactHooks.configs.recommended.rules,
      "react-refresh/only-export-components": [
        "warn",
        { allowConstantExport: true },
      ],
      "@typescript-eslint/no-unused-vars": "off",
    },
  }
);
</file>

<file path="FEED_FIXES.md">
# Feed Fixes Summary - COMPLETED ✅

## Issues Identified and Fixed

### 1. Mixed Content Types in RSS Sync ✅
**Problem**: The RSS sync function was processing both news and job content from Henjii feeds, causing confusion in the feed display.

**Solution**: 
- Separated news and job feeds into distinct configurations
- Modified `sync-rss-feeds/index.ts` to only process Local 825 news content for the feed
- Created separate function `scrapeEmployerWatchJobContent()` for job processing

### 2. Inconsistent Filtering Logic ✅
**Problem**: The `useFeedData` hook had complex filtering logic that was trying to exclude job content using multiple conditions.

**Solution**:
- Simplified filtering to use `wordpress_category` and `content_type` fields
- Updated query to only show content where `wordpress_category = 'local-825'` and `content_type = 'news'`
- Removed complex title/description filtering that was unreliable

### 3. Database Schema Issues ✅
**Problem**: The database migration for `wordpress_category` and `content_type` columns was not applied to the remote database.

**Solution**:
- Fixed migration filename patterns (dashes to underscores)
- Repaired migration history to align local and remote databases
- Successfully applied all migrations to cloud Supabase project
- Restored proper database column usage in code

## Changes Made

### 1. RSS Sync Function (`supabase/functions/sync-rss-feeds/index.ts`)
- **Feed Configuration**: Separated into `HENJII_NEWS_FEEDS` and `HENJII_JOB_FEEDS`
- **News Processing**: Only processes `local-825` feed for news content
- **Job Processing**: Removed from main sync function (handled separately)
- **Content Tagging**: All news content properly tagged with `wordpress_category = 'local-825'` and `content_type = 'news'`

### 2. Feed Data Hook (`src/hooks/useFeedData.ts`)
- **Simplified Query**: Uses proper database column filtering
- **Clear Filtering**: Uses `wordpress_category.eq.local-825` and `content_type.eq.news`
- **Better Logging**: Clear console messages about what content is being fetched

### 3. High Priority News Component (`src/components/feed/HighPriorityNews.tsx`)
- **Consistent Filtering**: Uses same filtering logic as main feed
- **Local 825 Focus**: Only shows Local 825 news content

### 4. Bulldozer Feeds Component (`src/components/BulldozerFeeds.tsx`)
- **Updated Description**: Clarifies that jobs are handled separately
- **Removed Job References**: No longer mentions job content in feed

### 5. Database Migrations ✅
- **Fixed Filenames**: Renamed all migration files to use underscore pattern
- **Repaired History**: Aligned local and remote migration history
- **Applied Migrations**: Successfully pushed all migrations to cloud database

## Current Feed Configuration

### News Feed (http://datapilot.lovable.app/feed)
- **Source**: `https://henjii.com/category/local-825/feed/gn`
- **Content Type**: News only
- **Filtering**: `wordpress_category = 'local-825'` AND `content_type = 'news'`
- **Purpose**: Union announcements, industry updates, member communications

### Jobs Page (Separate)
- **Source**: `https://henjii.com/category/employer-watch/feed/gn`
- **Content Type**: Jobs only
- **Processing**: Handled by `scrape-jobs` function
- **Purpose**: Job opportunities for Local 825 members

## Testing Status

✅ **Feed Page Loading**: Page loads without errors  
✅ **Query Structure**: Proper database column usage  
✅ **Content Filtering**: Uses wordpress_category and content_type fields  
✅ **Database Schema**: All migrations applied successfully  
✅ **Migration System**: Fixed and synchronized  
✅ **Git**: All changes committed and pushed  

## Commits Made

- `fbb4a35`: Initial feed filtering fixes
- `386e8e7`: Temporary fixes for database schema compatibility
- `35348e1`: Restore proper database column usage after migration fixes

## Summary

🎉 **All issues have been resolved!** The feed is now working properly with:

1. **Proper Content Separation**: Local 825 news content is correctly filtered and displayed
2. **Database Schema**: All required columns exist and are being used correctly
3. **Migration System**: Fixed and synchronized between local and remote
4. **Code Quality**: Clean, maintainable filtering logic using database fields

The feed at http://datapilot.lovable.app/feed should now display only Local 825 news content, with jobs properly separated to their own page.
</file>

<file path="index.html">
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Bulldozer Insights - Local 825 - NJ & NYC</title>
    <meta name="description" content="Powered by DataPilot+" />
    <meta name="author" content="DataPilot+™" />

    <link rel="icon" href="https://www.iuoe825.org/wp-content/uploads/2016/03/825_2_120x120.png" type="image/png">

    <meta property="og:title" content="Bulldozer Insights - Local 825 - NJ & NYC" />
    <meta property="og:description" content="Powered by DataPilot+™" />
    <meta property="og:type" content="website" />
    <meta property="og:image" content="https://breakthroughgroup.com/wp-content/uploads/2025/06/logo-1.png" />

    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:site" content="@datapilotplusv" />
    <meta name="twitter:image" content="https://breakthoughgroup.com/wp-content/uploads/2025/06/logo-1.png" />
  </head>

  <body>
    <div id="root"></div>
    <!-- IMPORTANT: DO NOT REMOVE THIS SCRIPT TAG OR THIS VERY COMMENT! -->
    <script src="https://cdn.gpteng.co/gptengineer.js" type="module"></script>
    <script type="module" src="/src/main.tsx"></script>
  </body>
</html>
</file>

<file path="postcss.config.js">
export default {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}
</file>

<file path="tailwind.config.ts">
import type { Config } from "tailwindcss";

export default {
	darkMode: ["class"],
	content: [
		"./pages/**/*.{ts,tsx}",
		"./components/**/*.{ts,tsx}",
		"./app/**/*.{ts,tsx}",
		"./src/**/*.{ts,tsx}",
	],
	prefix: "",
	theme: {
		container: {
			center: true,
			padding: '2rem',
			screens: {
				'2xl': '1400px'
			}
		},
		extend: {
			fontFamily: {
				sans: ['-apple-system', 'BlinkMacSystemFont', 'San Francisco', 'Segoe UI', 'Roboto', 'Helvetica Neue', 'sans-serif'],
			},
			colors: {
				border: 'hsl(var(--border))',
				input: 'hsl(var(--input))',
				ring: 'hsl(var(--ring))',
				background: 'hsl(var(--background))',
				foreground: 'hsl(var(--foreground))',
				primary: {
					DEFAULT: 'hsl(var(--primary))',
					foreground: 'hsl(var(--primary-foreground))'
				},
				secondary: {
					DEFAULT: 'hsl(var(--secondary))',
					foreground: 'hsl(var(--secondary-foreground))'
				},
				destructive: {
					DEFAULT: 'hsl(var(--destructive))',
					foreground: 'hsl(var(--destructive-foreground))'
				},
				muted: {
					DEFAULT: 'hsl(var(--muted))',
					foreground: 'hsl(var(--muted-foreground))'
				},
				accent: {
					DEFAULT: 'hsl(var(--accent))',
					foreground: 'hsl(var(--accent-foreground))'
				},
				popover: {
					DEFAULT: 'hsl(var(--popover))',
					foreground: 'hsl(var(--popover-foreground))'
				},
				card: {
					DEFAULT: 'hsl(var(--card))',
					foreground: 'hsl(var(--card-foreground))'
				},
				sidebar: {
					DEFAULT: 'hsl(var(--sidebar-background))',
					foreground: 'hsl(var(--sidebar-foreground))',
					primary: 'hsl(var(--sidebar-primary))',
					'primary-foreground': 'hsl(var(--sidebar-primary-foreground))',
					accent: 'hsl(var(--sidebar-accent))',
					'accent-foreground': 'hsl(var(--sidebar-accent-foreground))',
					border: 'hsl(var(--sidebar-border))',
					ring: 'hsl(var(--sidebar-ring))'
				},
				// Adding specific dark mode colors that match the reference image
				darkbg: {
					DEFAULT: '#0A0F18',
					card: '#0B1220',
					border: '#1A2235',
				}
			},
			borderRadius: {
				lg: 'var(--radius)',
				md: 'calc(var(--radius) - 2px)',
				sm: 'calc(var(--radius) - 4px)'
			},
			keyframes: {
				'accordion-down': {
					from: {
						height: '0'
					},
					to: {
						height: 'var(--radix-accordion-content-height)'
					}
				},
				'accordion-up': {
					from: {
						height: 'var(--radix-accordion-content-height)'
					},
					to: {
						height: '0'
					}
				},
				'fade-in': {
					'0%': { opacity: '0' },
					'100%': { opacity: '1' }
				},
				'fade-out': {
					'0%': { opacity: '1' },
					'100%': { opacity: '0' }
				},
			},
			animation: {
				'accordion-down': 'accordion-down 0.2s ease-out',
				'accordion-up': 'accordion-up 0.2s ease-out',
				'fade-in': 'fade-in 0.5s ease-out forwards',
				'fade-out': 'fade-out 0.5s ease-out forwards',
			}
		}
	},
	plugins: [require("tailwindcss-animate")],
} satisfies Config;
</file>

<file path="tsconfig.app.json">
{
  "compilerOptions": {
    "target": "ES2020",
    "useDefineForClassFields": true,
    "lib": ["ES2020", "DOM", "DOM.Iterable"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "isolatedModules": true,
    "moduleDetection": "force",
    "noEmit": true,
    "jsx": "react-jsx",

    /* Linting */
    "strict": false,
    "noUnusedLocals": false,
    "noUnusedParameters": false,
    "noImplicitAny": false,
    "noFallthroughCasesInSwitch": false,

    "baseUrl": ".",
    "paths": {
      "@/*": ["./src/*"]
    }
  },
  "include": ["src"]
}
</file>

<file path="tsconfig.json">
{
  "files": [],
  "references": [
    { "path": "./tsconfig.app.json" },
    { "path": "./tsconfig.node.json" }
  ],
  "compilerOptions": {
    "baseUrl": ".",
    "paths": {
      "@/*": ["./src/*"]
    },
    "noImplicitAny": false,
    "noUnusedParameters": false,
    "skipLibCheck": true,
    "allowJs": true,
    "noUnusedLocals": false,
    "strictNullChecks": false
  }
}
</file>

<file path="tsconfig.node.json">
{
  "compilerOptions": {
    "target": "ES2022",
    "lib": ["ES2023"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "isolatedModules": true,
    "moduleDetection": "force",
    "noEmit": true,

    /* Linting */
    "strict": true,
    "noUnusedLocals": false,
    "noUnusedParameters": false,
    "noFallthroughCasesInSwitch": true
  },
  "include": ["vite.config.ts"]
}
</file>

<file path="vite.config.ts">
import { defineConfig } from "vite";
import react from "@vitejs/plugin-react-swc";
import path from "path";
import { componentTagger } from "lovable-tagger";

// https://vitejs.dev/config/
export default defineConfig(({ mode }) => ({
  server: {
    host: "::",
    port: 8080,
  },
  plugins: [
    react(),
    mode === 'development' &&
    componentTagger(),
  ].filter(Boolean),
  resolve: {
    alias: {
      "@": path.resolve(__dirname, "./src"),
    },
  },
}));
</file>

<file path="scripts/package.json">
{
  "name": "local-825-backfill-scripts",
  "version": "1.0.0",
  "description": "Scripts for backfilling WordPress posts",
  "main": "backfill-posts.js",
  "scripts": {
    "backfill": "node backfill-posts.js"
  },
  "dependencies": {
    "@supabase/supabase-js": "^2.39.0",
    "dotenv": "^16.3.1"
  },
  "type": "commonjs"
}
</file>

<file path="src/components/chat/ChatContent.tsx">
import { MessageList } from "./MessageList";
import { Message } from "./types";

interface ChatContentProps {
  messages: Message[];
  isLoading: boolean;
  isExpanded: boolean;
  processingStatus?: string;
}

export const ChatContent = ({
  messages,
  isLoading,
  isExpanded,
  processingStatus
}: ChatContentProps) => (
  <div className="flex-1 overflow-hidden">
    {isExpanded && (
      <MessageList 
        messages={messages} 
        isLoading={isLoading} 
        processingStatus={processingStatus}
      />
    )}
  </div>
);
</file>

<file path="src/components/chat/ChatHeader.tsx">
import { X } from "lucide-react";
import { Button } from "@/components/ui/button";

interface ChatHeaderProps {
  onClose: () => void;
  showClose?: boolean;
}

export const ChatHeader = ({ onClose, showClose = true }: ChatHeaderProps) => (
  <div className="flex items-center justify-between px-4 sm:px-6 py-4 bg-[#5A7FFF] text-white rounded-t-2xl">
    <div className="flex items-center gap-3">
      <img 
        src="https://www.freeiconspng.com/uploads/bulldozer-icon-1.png" 
        alt="Bulldozer" 
        className="h-8 w-8 rounded-full bg-white p-1"
      />
      <div>
        <h2 className="font-semibold text-white text-sm">Bulldozer</h2>
        <p className="text-xs text-blue-200">Local 825 AI Assistant</p>
      </div>
    </div>
    {showClose && (
      <Button
        onClick={onClose}
        variant="ghost"
        size="icon"
        className="text-white hover:bg-blue-600 h-8 w-8 rounded-full"
      >
        <X className="h-4 w-4" />
      </Button>
    )}
  </div>
);
</file>

<file path="src/components/company-profile/CorporateStructureSection.tsx">
import { Card, CardHeader, CardTitle, CardContent } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { 
  Building2, 
  MapPin, 
  Users, 
  Briefcase,
  Network,
  Globe
} from "lucide-react";
import { CompanyResearch } from "@/hooks/useCompanyResearch";

interface CorporateStructureSectionProps {
  company: CompanyResearch;
}

export default function CorporateStructureSection({ company }: CorporateStructureSectionProps) {
  const structure = company.corporate_structure || {};
  const facilities = structure.facilities || [];
  const subsidiaries = structure.subsidiaries || [];
  const services = structure.services || [];
  const coverage = structure.geographic_coverage || [];

  return (
    <div className="space-y-6">
      {/* Company History & Ownership */}
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Building2 className="h-5 w-5" />
              Company History
            </CardTitle>
          </CardHeader>
          <CardContent className="space-y-4">
            {structure.company_history && (
              <p className="text-gray-700 dark:text-gray-300 leading-relaxed">
                {structure.company_history}
              </p>
            )}
            
            {structure.ownership_structure && (
              <div className="p-4 bg-blue-50 dark:bg-blue-950 rounded-lg">
                <div className="flex items-center gap-2 mb-2">
                  <Network className="h-4 w-4 text-blue-600" />
                  <span className="font-medium text-blue-900 dark:text-blue-100">Ownership Structure</span>
                </div>
                <p className="text-sm text-blue-800 dark:text-blue-200">
                  {structure.ownership_structure}
                </p>
              </div>
            )}
          </CardContent>
        </Card>

        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Briefcase className="h-5 w-5" />
              Services & Operations
            </CardTitle>
          </CardHeader>
          <CardContent className="space-y-4">
            {services.length > 0 && (
              <div>
                <h4 className="font-medium text-gray-900 dark:text-gray-100 mb-3">Core Services</h4>
                <div className="flex flex-wrap gap-2">
                  {services.map((service: string, index: number) => (
                    <Badge key={index} variant="outline">
                      {service}
                    </Badge>
                  ))}
                </div>
              </div>
            )}

            {coverage.length > 0 && (
              <div>
                <h4 className="font-medium text-gray-900 dark:text-gray-100 mb-3">Geographic Coverage</h4>
                <div className="space-y-2">
                  {coverage.map((area: string, index: number) => (
                    <div key={index} className="flex items-center gap-2 text-sm">
                      <Globe className="h-3 w-3 text-gray-400" />
                      <span className="text-gray-600 dark:text-gray-400">{area}</span>
                    </div>
                  ))}
                </div>
              </div>
            )}
          </CardContent>
        </Card>
      </div>

      {/* Subsidiaries */}
      {subsidiaries.length > 0 && (
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Network className="h-5 w-5" />
              Subsidiaries & Related Entities
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
              {subsidiaries.map((subsidiary: string, index: number) => (
                <div key={index} className="p-4 border border-gray-200 dark:border-gray-700 rounded-lg">
                  <div className="flex items-center gap-2">
                    <Building2 className="h-4 w-4 text-gray-400" />
                    <span className="font-medium text-gray-900 dark:text-gray-100">{subsidiary}</span>
                  </div>
                </div>
              ))}
            </div>
          </CardContent>
        </Card>
      )}

      {/* Facilities & Locations */}
      {facilities.length > 0 && (
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <MapPin className="h-5 w-5" />
              Facilities & Locations
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="space-y-4">
              {facilities.map((facility: any, index: number) => (
                <div key={index} className="p-4 border border-gray-200 dark:border-gray-700 rounded-lg">
                  <div className="flex items-start justify-between">
                    <div className="flex-1">
                      <div className="flex items-center gap-2 mb-2">
                        <Building2 className="h-4 w-4 text-blue-600" />
                        <span className="font-medium text-gray-900 dark:text-gray-100 capitalize">
                          {facility.type?.replace('_', ' ') || 'Facility'}
                        </span>
                      </div>
                      
                      {facility.address && (
                        <div className="flex items-center gap-2 text-sm text-gray-600 dark:text-gray-400 mb-2">
                          <MapPin className="h-3 w-3" />
                          {facility.address}
                        </div>
                      )}
                      
                      {facility.employees && (
                        <div className="flex items-center gap-2 text-sm text-gray-600 dark:text-gray-400">
                          <Users className="h-3 w-3" />
                          {facility.employees} employees
                        </div>
                      )}
                    </div>
                    
                    <Badge variant="outline" className="capitalize">
                      {facility.type?.replace('_', ' ') || 'Facility'}
                    </Badge>
                  </div>
                </div>
              ))}
            </div>
          </CardContent>
        </Card>
      )}
    </div>
  );
}
</file>

<file path="src/components/company-profile/ExecutiveSummarySection.tsx">
import { Card, CardHeader, CardTitle, CardContent } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { 
  Building2, 
  TrendingUp, 
  Users, 
  Target,
  AlertTriangle,
  CheckCircle,
  DollarSign,
  MapPin,
  Calendar
} from "lucide-react";
import { CompanyResearch } from "@/hooks/useCompanyResearch";

interface ExecutiveSummarySectionProps {
  company: CompanyResearch;
}

export default function ExecutiveSummarySection({ company }: ExecutiveSummarySectionProps) {
  const executiveSummary = company.executive_summary || {};
  const keyMetrics = executiveSummary.key_metrics || {};

  return (
    <div className="space-y-6">
      {/* Key Metrics Grid */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
        <Card className="border-l-4 border-l-blue-500">
          <CardContent className="p-6">
            <div className="flex items-center space-x-4">
              <div className="p-3 bg-blue-100 dark:bg-blue-900 rounded-lg">
                <Building2 className="h-6 w-6 text-blue-600 dark:text-blue-400" />
              </div>
              <div>
                <p className="text-sm font-medium text-gray-600 dark:text-gray-400">Years in Business</p>
                <p className="text-2xl font-bold text-gray-900 dark:text-gray-100">
                  {keyMetrics.years_in_business || 'N/A'}
                </p>
              </div>
            </div>
          </CardContent>
        </Card>

        <Card className="border-l-4 border-l-green-500">
          <CardContent className="p-6">
            <div className="flex items-center space-x-4">
              <div className="p-3 bg-green-100 dark:bg-green-900 rounded-lg">
                <Users className="h-6 w-6 text-green-600 dark:text-green-400" />
              </div>
              <div>
                <p className="text-sm font-medium text-gray-600 dark:text-gray-400">Total Employees</p>
                <p className="text-2xl font-bold text-gray-900 dark:text-gray-100">
                  {company.employee_count?.toLocaleString() || 'N/A'}
                </p>
              </div>
            </div>
          </CardContent>
        </Card>

        <Card className="border-l-4 border-l-purple-500">
          <CardContent className="p-6">
            <div className="flex items-center space-x-4">
              <div className="p-3 bg-purple-100 dark:bg-purple-900 rounded-lg">
                <DollarSign className="h-6 w-6 text-purple-600 dark:text-purple-400" />
              </div>
              <div>
                <p className="text-sm font-medium text-gray-600 dark:text-gray-400">Annual Revenue</p>
                <p className="text-2xl font-bold text-gray-900 dark:text-gray-100">
                  {company.annual_revenue ? `$${(company.annual_revenue / 1000000).toFixed(1)}M` : 'N/A'}
                </p>
              </div>
            </div>
          </CardContent>
        </Card>

        <Card className="border-l-4 border-l-orange-500">
          <CardContent className="p-6">
            <div className="flex items-center space-x-4">
              <div className="p-3 bg-orange-100 dark:bg-orange-900 rounded-lg">
                <TrendingUp className="h-6 w-6 text-orange-600 dark:text-orange-400" />
              </div>
              <div>
                <p className="text-sm font-medium text-gray-600 dark:text-gray-400">Growth Rate</p>
                <p className="text-2xl font-bold text-gray-900 dark:text-gray-100">
                  {keyMetrics.growth_rate || 'N/A'}
                </p>
              </div>
            </div>
          </CardContent>
        </Card>
      </div>

      {/* Main Summary Cards */}
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        {/* Company Overview */}
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Building2 className="h-5 w-5" />
              Company Overview
            </CardTitle>
          </CardHeader>
          <CardContent className="space-y-4">
            <p className="text-gray-700 dark:text-gray-300 leading-relaxed">
              {executiveSummary.overview || company.research_content || 'No overview available.'}
            </p>
            
            {keyMetrics.market_share && (
              <div className="p-4 bg-blue-50 dark:bg-blue-950 rounded-lg">
                <div className="flex items-center gap-2 mb-2">
                  <Target className="h-4 w-4 text-blue-600" />
                  <span className="font-medium text-blue-900 dark:text-blue-100">Market Position</span>
                </div>
                <p className="text-sm text-blue-800 dark:text-blue-200">{keyMetrics.market_share}</p>
              </div>
            )}
          </CardContent>
        </Card>

        {/* Union Status & Organizing Potential */}
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Target className="h-5 w-5" />
              Organizing Assessment
            </CardTitle>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="space-y-3">
              <div className="flex items-center justify-between">
                <span className="text-sm font-medium text-gray-600 dark:text-gray-400">Union Status</span>
                <Badge variant={company.union_status === 'union' ? 'default' : 'destructive'}>
                  {company.union_status?.replace('-', ' ').toUpperCase() || 'NON-UNION'}
                </Badge>
              </div>
              
              <div className="flex items-center justify-between">
                <span className="text-sm font-medium text-gray-600 dark:text-gray-400">Organizing Priority</span>
                <Badge variant={company.organizing_priority === 'high' ? 'destructive' : 
                               company.organizing_priority === 'medium' ? 'default' : 'secondary'}>
                  {company.organizing_priority?.toUpperCase() || 'MEDIUM'}
                </Badge>
              </div>
            </div>

            {executiveSummary.organizing_potential && (
              <div className="p-4 bg-yellow-50 dark:bg-yellow-950 rounded-lg">
                <div className="flex items-center gap-2 mb-2">
                  <AlertTriangle className="h-4 w-4 text-yellow-600" />
                  <span className="font-medium text-yellow-900 dark:text-yellow-100">Organizing Potential</span>
                </div>
                <p className="text-sm text-yellow-800 dark:text-yellow-200">
                  {executiveSummary.organizing_potential}
                </p>
              </div>
            )}

            {executiveSummary.priority_rating && (
              <div className="p-4 bg-red-50 dark:bg-red-950 rounded-lg">
                <div className="flex items-center gap-2 mb-2">
                  <CheckCircle className="h-4 w-4 text-red-600" />
                  <span className="font-medium text-red-900 dark:text-red-100">Priority Assessment</span>
                </div>
                <p className="text-sm text-red-800 dark:text-red-200">
                  {executiveSummary.priority_rating}
                </p>
              </div>
            )}
          </CardContent>
        </Card>
      </div>

      {/* Strategic Recommendations */}
      {executiveSummary.union_status && (
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Target className="h-5 w-5" />
              Current Union Status & History
            </CardTitle>
          </CardHeader>
          <CardContent>
            <p className="text-gray-700 dark:text-gray-300 leading-relaxed">
              {executiveSummary.union_status}
            </p>
          </CardContent>
        </Card>
      )}
    </div>
  );
}
</file>

<file path="src/components/company-profile/FinancialProfileSection.tsx">
import { Card, CardHeader, CardTitle, CardContent } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { 
  DollarSign, 
  TrendingUp, 
  Building,
  CreditCard
} from "lucide-react";
import { CompanyResearch } from "@/hooks/useCompanyResearch";

interface FinancialProfileSectionProps {
  company: CompanyResearch;
}

export default function FinancialProfileSection({ company }: FinancialProfileSectionProps) {
  const financialProfile = company.financial_profile || {};

  return (
    <div className="space-y-6">
      {/* Revenue Overview */}
      <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
        <Card className="border-l-4 border-l-green-500">
          <CardContent className="p-6">
            <div className="flex items-center space-x-4">
              <div className="p-3 bg-green-100 dark:bg-green-900 rounded-lg">
                <DollarSign className="h-6 w-6 text-green-600 dark:text-green-400" />
              </div>
              <div>
                <p className="text-sm font-medium text-gray-600 dark:text-gray-400">Annual Revenue</p>
                <p className="text-2xl font-bold text-gray-900 dark:text-gray-100">
                  {company.annual_revenue ? `$${(company.annual_revenue / 1000000).toFixed(1)}M` : 'N/A'}
                </p>
              </div>
            </div>
          </CardContent>
        </Card>

        <Card className="border-l-4 border-l-blue-500">
          <CardContent className="p-6">
            <div className="flex items-center space-x-4">
              <div className="p-3 bg-blue-100 dark:bg-blue-900 rounded-lg">
                <TrendingUp className="h-6 w-6 text-blue-600 dark:text-blue-400" />
              </div>
              <div>
                <p className="text-sm font-medium text-gray-600 dark:text-gray-400">Financial Status</p>
                <p className="text-lg font-bold text-gray-900 dark:text-gray-100">
                  Private
                </p>
              </div>
            </div>
          </CardContent>
        </Card>

        <Card className="border-l-4 border-l-purple-500">
          <CardContent className="p-6">
            <div className="flex items-center space-x-4">
              <div className="p-3 bg-purple-100 dark:bg-purple-900 rounded-lg">
                <Building className="h-6 w-6 text-purple-600 dark:text-purple-400" />
              </div>
              <div>
                <p className="text-sm font-medium text-gray-600 dark:text-gray-400">Market Cap</p>
                <p className="text-lg font-bold text-gray-900 dark:text-gray-100">
                  Private Co.
                </p>
              </div>
            </div>
          </CardContent>
        </Card>
      </div>

      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <CreditCard className="h-5 w-5" />
            Financial Analysis
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="text-center py-8">
            <CreditCard className="h-12 w-12 text-gray-400 mx-auto mb-4" />
            <h3 className="text-lg font-medium text-gray-900 dark:text-gray-100 mb-2">
              Financial Intelligence Gathering
            </h3>
            <p className="text-gray-600 dark:text-gray-400 mb-4">
              Detailed financial analysis, banking relationships, and funding sources will be researched and populated automatically.
            </p>
            <Badge variant="outline">Research in Progress</Badge>
          </div>
        </CardContent>
      </Card>
    </div>
  );
}
</file>

<file path="src/components/company-profile/LaborRelationsSection.tsx">
import { Card, CardHeader, CardTitle, CardContent } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { 
  Shield, 
  AlertTriangle, 
  FileText,
  Calendar,
  Users,
  Gavel
} from "lucide-react";
import { CompanyResearch } from "@/hooks/useCompanyResearch";

interface LaborRelationsSectionProps {
  company: CompanyResearch;
}

export default function LaborRelationsSection({ company }: LaborRelationsSectionProps) {
  const laborRelations = company.labor_relations || {};
  const nlrbCases = laborRelations.nlrb_cases || [];
  const antiUnionTactics = laborRelations.anti_union_tactics || [];
  const consultants = laborRelations.consultants_used || [];

  return (
    <div className="space-y-6">
      {/* Union History Overview */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Shield className="h-5 w-5" />
            Union History & Current Status
          </CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          {laborRelations.union_history && (
            <div className="p-4 bg-red-50 dark:bg-red-950 rounded-lg">
              <div className="flex items-center gap-2 mb-2">
                <AlertTriangle className="h-4 w-4 text-red-600" />
                <span className="font-medium text-red-900 dark:text-red-100">Union History</span>
              </div>
              <p className="text-sm text-red-800 dark:text-red-200">
                {laborRelations.union_history}
              </p>
            </div>
          )}

          {laborRelations.recent_organizing && (
            <div className="p-4 bg-yellow-50 dark:bg-yellow-950 rounded-lg">
              <div className="flex items-center gap-2 mb-2">
                <Users className="h-4 w-4 text-yellow-600" />
                <span className="font-medium text-yellow-900 dark:text-yellow-100">Recent Organizing Activity</span>
              </div>
              <p className="text-sm text-yellow-800 dark:text-yellow-200">
                {laborRelations.recent_organizing}
              </p>
            </div>
          )}
        </CardContent>
      </Card>

      {/* Anti-Union Tactics */}
      {antiUnionTactics.length > 0 && (
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <AlertTriangle className="h-5 w-5" />
              Anti-Union Tactics
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              {antiUnionTactics.map((tactic: string, index: number) => (
                <div key={index} className="p-4 border border-orange-200 dark:border-orange-800 bg-orange-50 dark:bg-orange-950 rounded-lg">
                  <div className="flex items-center gap-2">
                    <AlertTriangle className="h-4 w-4 text-orange-600" />
                    <span className="text-sm font-medium text-orange-900 dark:text-orange-100">{tactic}</span>
                  </div>
                </div>
              ))}
            </div>
          </CardContent>
        </Card>
      )}

      {/* Labor Relations Consultants */}
      {consultants.length > 0 && (
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Users className="h-5 w-5" />
              Labor Relations Consultants
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              {consultants.map((consultant: string, index: number) => (
                <div key={index} className="p-4 border border-gray-200 dark:border-gray-700 rounded-lg">
                  <div className="flex items-center gap-2">
                    <FileText className="h-4 w-4 text-gray-600" />
                    <span className="font-medium text-gray-900 dark:text-gray-100">{consultant}</span>
                  </div>
                </div>
              ))}
            </div>
          </CardContent>
        </Card>
      )}

      {/* NLRB Cases */}
      {nlrbCases.length > 0 && (
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Gavel className="h-5 w-5" />
              NLRB Case History
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="space-y-4">
              {nlrbCases.map((nlrbCase: any, index: number) => (
                <div key={index} className="p-6 border border-gray-200 dark:border-gray-700 rounded-lg">
                  <div className="flex items-start justify-between mb-4">
                    <div>
                      <div className="flex items-center gap-2 mb-2">
                        <Gavel className="h-4 w-4 text-blue-600" />
                        <span className="font-medium text-gray-900 dark:text-gray-100">
                          Case #{nlrbCase.case_number}
                        </span>
                        <Badge variant="outline">
                          {nlrbCase.year}
                        </Badge>
                      </div>
                      <h4 className="font-medium text-gray-900 dark:text-gray-100 mb-2">
                        {nlrbCase.allegation}
                      </h4>
                    </div>
                  </div>
                  
                  <div className="p-3 bg-blue-50 dark:bg-blue-950 rounded-lg">
                    <div className="flex items-center gap-2 mb-1">
                      <Calendar className="h-3 w-3 text-blue-600" />
                      <span className="text-xs font-medium text-blue-900 dark:text-blue-100">Outcome</span>
                    </div>
                    <p className="text-sm text-blue-800 dark:text-blue-200">{nlrbCase.outcome}</p>
                  </div>
                </div>
              ))}
            </div>
          </CardContent>
        </Card>
      )}
    </div>
  );
}
</file>

<file path="src/components/company-profile/LeadershipSection.tsx">
import { Card, CardHeader, CardTitle, CardContent } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { 
  User, 
  DollarSign, 
  Briefcase,
  Users,
  Award
} from "lucide-react";
import { CompanyResearch } from "@/hooks/useCompanyResearch";

interface LeadershipSectionProps {
  company: CompanyResearch;
}

export default function LeadershipSection({ company }: LeadershipSectionProps) {
  const leadership = company.leadership_management || {};
  const executives = leadership.key_executives || [];

  return (
    <div className="space-y-6">
      {/* Key Executives */}
      {executives.length > 0 && (
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Users className="h-5 w-5" />
              Key Executives
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
              {executives.map((executive: any, index: number) => (
                <div key={index} className="p-6 border border-gray-200 dark:border-gray-700 rounded-lg">
                  <div className="flex items-start gap-4">
                    <div className="p-3 bg-blue-100 dark:bg-blue-900 rounded-lg">
                      <User className="h-6 w-6 text-blue-600 dark:text-blue-400" />
                    </div>
                    <div className="flex-1">
                      <h3 className="font-semibold text-gray-900 dark:text-gray-100 mb-1">
                        {executive.name}
                      </h3>
                      <div className="flex items-center gap-2 mb-2">
                        <Briefcase className="h-4 w-4 text-gray-400" />
                        <span className="text-sm text-gray-600 dark:text-gray-400">
                          {executive.title}
                        </span>
                      </div>
                      
                      {executive.background && (
                        <p className="text-sm text-gray-700 dark:text-gray-300 mb-3 leading-relaxed">
                          {executive.background}
                        </p>
                      )}
                      
                      {executive.compensation_est && (
                        <div className="flex items-center gap-2">
                          <DollarSign className="h-4 w-4 text-green-600" />
                          <Badge variant="outline" className="text-xs">
                            Est. {executive.compensation_est}
                          </Badge>
                        </div>
                      )}
                    </div>
                  </div>
                </div>
              ))}
            </div>
          </CardContent>
        </Card>
      )}

      {/* Management Style & Philosophy */}
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        {leadership.management_style && (
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <Award className="h-5 w-5" />
                Management Style
              </CardTitle>
            </CardHeader>
            <CardContent>
              <p className="text-gray-700 dark:text-gray-300 leading-relaxed">
                {leadership.management_style}
              </p>
            </CardContent>
          </Card>
        )}

        {leadership.political_affiliations && (
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <Users className="h-5 w-5" />
                Political Affiliations
              </CardTitle>
            </CardHeader>
            <CardContent>
              <div className="p-4 bg-yellow-50 dark:bg-yellow-950 rounded-lg">
                <p className="text-sm text-yellow-800 dark:text-yellow-200">
                  {leadership.political_affiliations}
                </p>
              </div>
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}
</file>

<file path="src/components/company-profile/OrganizingStrategySection.tsx">
import { Card, CardHeader, CardTitle, CardContent } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { 
  Target, 
  AlertTriangle, 
  CheckCircle,
  TrendingUp,
  Users,
  Clock
} from "lucide-react";
import { CompanyResearch } from "@/hooks/useCompanyResearch";

interface OrganizingStrategySectionProps {
  company: CompanyResearch;
}

export default function OrganizingStrategySection({ company }: OrganizingStrategySectionProps) {
  const organizingStrategy = company.organizing_strategy || {};
  const pressurePoints = company.strategic_pressure_points || {};

  const getPriorityColor = (priority: string) => {
    switch (priority?.toLowerCase()) {
      case 'high': return 'bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200';
      case 'medium': return 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200';
      case 'low': return 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200';
      default: return 'bg-gray-100 text-gray-800 dark:bg-gray-900 dark:text-gray-200';
    }
  };

  return (
    <div className="space-y-6">
      {/* Organizing Priority Assessment */}
      <Card className="border-l-4 border-l-red-500">
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Target className="h-5 w-5" />
            Organizing Priority Assessment
          </CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="flex items-center justify-between">
            <span className="font-medium text-gray-900 dark:text-gray-100">Current Priority Level</span>
            <Badge className={getPriorityColor(company.organizing_priority || 'medium')}>
              {company.organizing_priority?.toUpperCase() || 'MEDIUM'} PRIORITY
            </Badge>
          </div>
          
          <div className="p-4 bg-red-50 dark:bg-red-950 rounded-lg">
            <div className="flex items-center gap-2 mb-2">
              <AlertTriangle className="h-4 w-4 text-red-600" />
              <span className="font-medium text-red-900 dark:text-red-100">Strategic Assessment</span>
            </div>
            <p className="text-sm text-red-800 dark:text-red-200">
              This company represents a high-value organizing target due to its workforce size, 
              public sector contracts, and growth trajectory. The anti-union history indicates 
              resistance but also reveals organizational vulnerabilities.
            </p>
          </div>
        </CardContent>
      </Card>

      {/* Key Organizing Opportunities */}
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <CheckCircle className="h-5 w-5" />
              Organizing Opportunities
            </CardTitle>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="space-y-3">
              <div className="p-3 bg-green-50 dark:bg-green-950 rounded-lg">
                <div className="flex items-center gap-2 mb-1">
                  <Users className="h-4 w-4 text-green-600" />
                  <span className="text-sm font-medium text-green-900 dark:text-green-100">Large Workforce</span>
                </div>
                <p className="text-xs text-green-800 dark:text-green-200">
                  150+ employees across multiple job classifications
                </p>
              </div>
              
              <div className="p-3 bg-blue-50 dark:bg-blue-950 rounded-lg">
                <div className="flex items-center gap-2 mb-1">
                  <Target className="h-4 w-4 text-blue-600" />
                  <span className="text-sm font-medium text-blue-900 dark:text-blue-100">Public Sector Work</span>
                </div>
                <p className="text-xs text-blue-800 dark:text-blue-200">
                  Prevailing wage projects create leverage opportunities
                </p>
              </div>
              
              <div className="p-3 bg-purple-50 dark:bg-purple-950 rounded-lg">
                <div className="flex items-center gap-2 mb-1">
                  <TrendingUp className="h-4 w-4 text-purple-600" />
                  <span className="text-sm font-medium text-purple-900 dark:text-purple-100">Growing Company</span>
                </div>
                <p className="text-xs text-purple-800 dark:text-purple-200">
                  15% annual growth creates job security concerns
                </p>
              </div>
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <AlertTriangle className="h-5 w-5" />
              Strategic Challenges
            </CardTitle>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="space-y-3">
              <div className="p-3 bg-red-50 dark:bg-red-950 rounded-lg">
                <div className="flex items-center gap-2 mb-1">
                  <AlertTriangle className="h-4 w-4 text-red-600" />
                  <span className="text-sm font-medium text-red-900 dark:text-red-100">Anti-Union History</span>
                </div>
                <p className="text-xs text-red-800 dark:text-red-200">
                  Previous organizing attempt failed in 2019
                </p>
              </div>
              
              <div className="p-3 bg-orange-50 dark:bg-orange-950 rounded-lg">
                <div className="flex items-center gap-2 mb-1">
                  <Users className="h-4 w-4 text-orange-600" />
                  <span className="text-sm font-medium text-orange-900 dark:text-orange-100">Family Business</span>
                </div>
                <p className="text-xs text-orange-800 dark:text-orange-200">
                  Family ownership may create loyalty challenges
                </p>
              </div>
              
              <div className="p-3 bg-yellow-50 dark:bg-yellow-950 rounded-lg">
                <div className="flex items-center gap-2 mb-1">
                  <Clock className="h-4 w-4 text-yellow-600" />
                  <span className="text-sm font-medium text-yellow-900 dark:text-yellow-100">High Turnover</span>
                </div>
                <p className="text-xs text-yellow-800 dark:text-yellow-200">
                  22% annual turnover may indicate worker dissatisfaction
                </p>
              </div>
            </div>
          </CardContent>
        </Card>
      </div>

      {/* Recommended Strategy */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Target className="h-5 w-5" />
            Recommended Organizing Strategy
          </CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="p-6 bg-blue-50 dark:bg-blue-950 rounded-lg">
            <h4 className="font-medium text-blue-900 dark:text-blue-100 mb-3">Primary Approach</h4>
            <p className="text-sm text-blue-800 dark:text-blue-200 leading-relaxed">
              Focus on equipment operators and experienced workers who understand the value of union representation. 
              Leverage safety concerns and the need for fair compensation on public projects. Target workers during 
              busy season when their value is highest.
            </p>
          </div>
          
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div className="p-4 border border-gray-200 dark:border-gray-700 rounded-lg">
              <h5 className="font-medium text-gray-900 dark:text-gray-100 mb-2">Key Messages</h5>
              <ul className="text-sm text-gray-700 dark:text-gray-300 space-y-1">
                <li>• Job security and career advancement</li>
                <li>• Fair wages matching union scale</li>
                <li>• Enhanced safety protections</li>
                <li>• Pension and benefits improvements</li>
              </ul>
            </div>
            
            <div className="p-4 border border-gray-200 dark:border-gray-700 rounded-lg">
              <h5 className="font-medium text-gray-900 dark:text-gray-100 mb-2">Timeline</h5>
              <ul className="text-sm text-gray-700 dark:text-gray-300 space-y-1">
                <li>• Phase 1: Relationship building (3 months)</li>
                <li>• Phase 2: Card drive (2 months)</li>
                <li>• Phase 3: Election campaign (6 weeks)</li>
                <li>• Success metrics: 60%+ card signatures</li>
              </ul>
            </div>
          </div>
        </CardContent>
      </Card>
    </div>
  );
}
</file>

<file path="src/components/company-profile/SafetyComplianceSection.tsx">
import { Card, CardHeader, CardTitle, CardContent } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { 
  Shield, 
  AlertTriangle, 
  FileText,
  Calendar,
  ExternalLink
} from "lucide-react";
import { CompanyResearch } from "@/hooks/useCompanyResearch";

interface SafetyComplianceSectionProps {
  company: CompanyResearch;
}

export default function SafetyComplianceSection({ company }: SafetyComplianceSectionProps) {
  const safetyCompliance = company.safety_compliance || {};

  return (
    <div className="space-y-6">
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Shield className="h-5 w-5" />
            Safety & Compliance Overview
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="text-center py-8">
            <Shield className="h-12 w-12 text-gray-400 mx-auto mb-4" />
            <h3 className="text-lg font-medium text-gray-900 dark:text-gray-100 mb-2">
              Safety Data Collection in Progress
            </h3>
            <p className="text-gray-600 dark:text-gray-400 mb-4">
              OSHA violations, safety incidents, and compliance data will be populated through our automated research agents.
            </p>
            <Badge variant="outline">Coming Soon</Badge>
          </div>
        </CardContent>
      </Card>
    </div>
  );
}
</file>

<file path="src/components/company-profile/WorkforceAnalysisSection.tsx">
import { Card, CardHeader, CardTitle, CardContent } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { 
  Users, 
  DollarSign, 
  TrendingUp,
  Clock,
  Shield,
  PieChart
} from "lucide-react";
import { CompanyResearch } from "@/hooks/useCompanyResearch";

interface WorkforceAnalysisSectionProps {
  company: CompanyResearch;
}

export default function WorkforceAnalysisSection({ company }: WorkforceAnalysisSectionProps) {
  const workforce = company.workforce_analysis || {};
  const breakdown = workforce.breakdown || {};
  const demographics = workforce.demographics || {};
  const compensation = workforce.compensation || {};

  return (
    <div className="space-y-6">
      {/* Workforce Overview */}
      <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
        <Card className="border-l-4 border-l-blue-500">
          <CardContent className="p-6">
            <div className="flex items-center space-x-4">
              <div className="p-3 bg-blue-100 dark:bg-blue-900 rounded-lg">
                <Users className="h-6 w-6 text-blue-600 dark:text-blue-400" />
              </div>
              <div>
                <p className="text-sm font-medium text-gray-600 dark:text-gray-400">Total Employees</p>
                <p className="text-2xl font-bold text-gray-900 dark:text-gray-100">
                  {workforce.total_employees || company.employee_count || 'N/A'}
                </p>
              </div>
            </div>
          </CardContent>
        </Card>

        <Card className="border-l-4 border-l-green-500">
          <CardContent className="p-6">
            <div className="flex items-center space-x-4">
              <div className="p-3 bg-green-100 dark:bg-green-900 rounded-lg">
                <Clock className="h-6 w-6 text-green-600 dark:text-green-400" />
              </div>
              <div>
                <p className="text-sm font-medium text-gray-600 dark:text-gray-400">Avg Tenure</p>
                <p className="text-2xl font-bold text-gray-900 dark:text-gray-100">
                  {demographics.tenure_avg || 'N/A'}
                </p>
              </div>
            </div>
          </CardContent>
        </Card>

        <Card className="border-l-4 border-l-red-500">
          <CardContent className="p-6">
            <div className="flex items-center space-x-4">
              <div className="p-3 bg-red-100 dark:bg-red-900 rounded-lg">
                <TrendingUp className="h-6 w-6 text-red-600 dark:text-red-400" />
              </div>
              <div>
                <p className="text-sm font-medium text-gray-600 dark:text-gray-400">Turnover Rate</p>
                <p className="text-2xl font-bold text-gray-900 dark:text-gray-100">
                  {demographics.turnover_rate || 'N/A'}
                </p>
              </div>
            </div>
          </CardContent>
        </Card>
      </div>

      {/* Employee Breakdown */}
      {Object.keys(breakdown).length > 0 && (
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <PieChart className="h-5 w-5" />
              Employee Breakdown by Classification
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
              {Object.entries(breakdown).map(([role, count]: [string, any]) => (
                <div key={role} className="p-4 border border-gray-200 dark:border-gray-700 rounded-lg">
                  <div className="text-center">
                    <div className="text-2xl font-bold text-gray-900 dark:text-gray-100 mb-1">
                      {count}
                    </div>
                    <div className="text-sm text-gray-600 dark:text-gray-400 capitalize">
                      {role.replace('_', ' ')}
                    </div>
                  </div>
                </div>
              ))}
            </div>
          </CardContent>
        </Card>
      )}

      {/* Union Representation & Demographics */}
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Shield className="h-5 w-5" />
              Union Representation
            </CardTitle>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="p-4 bg-red-50 dark:bg-red-950 rounded-lg">
              <div className="flex items-center justify-between mb-2">
                <span className="font-medium text-red-900 dark:text-red-100">Current Status</span>
                <Badge variant="destructive">
                  {workforce.union_representation || 'Non-Union'}
                </Badge>
              </div>
            </div>

            {demographics.avg_age && (
              <div className="space-y-2">
                <div className="flex justify-between">
                  <span className="text-sm text-gray-600 dark:text-gray-400">Average Age</span>
                  <span className="text-sm font-medium">{demographics.avg_age} years</span>
                </div>
              </div>
            )}
          </CardContent>
        </Card>

        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <DollarSign className="h-5 w-5" />
              Compensation Structure
            </CardTitle>
          </CardHeader>
          <CardContent className="space-y-4">
            {compensation.operators_avg && (
              <div className="p-3 border border-gray-200 dark:border-gray-700 rounded-lg">
                <div className="flex justify-between items-center">
                  <span className="text-sm font-medium">Equipment Operators</span>
                  <Badge variant="outline">{compensation.operators_avg}</Badge>
                </div>
              </div>
            )}
            
            {compensation.laborers_avg && (
              <div className="p-3 border border-gray-200 dark:border-gray-700 rounded-lg">
                <div className="flex justify-between items-center">
                  <span className="text-sm font-medium">Laborers</span>
                  <Badge variant="outline">{compensation.laborers_avg}</Badge>
                </div>
              </div>
            )}

            {compensation.benefits && (
              <div className="p-4 bg-blue-50 dark:bg-blue-950 rounded-lg">
                <div className="text-sm font-medium text-blue-900 dark:text-blue-100 mb-2">Benefits Package</div>
                <p className="text-sm text-blue-800 dark:text-blue-200">{compensation.benefits}</p>
              </div>
            )}
          </CardContent>
        </Card>
      </div>
    </div>
  );
}
</file>

<file path="src/components/ui/select.tsx">
import * as React from "react"
import * as SelectPrimitive from "@radix-ui/react-select"
import { Check, ChevronDown, ChevronUp } from "lucide-react"

import { cn } from "@/lib/utils"

const Select = SelectPrimitive.Root

const SelectGroup = SelectPrimitive.Group

const SelectValue = SelectPrimitive.Value

const SelectTrigger = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Trigger
    ref={ref}
    className={cn(
      "flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1",
      className
    )}
    {...props}
  >
    {children}
    <SelectPrimitive.Icon asChild>
      <ChevronDown className="h-4 w-4 opacity-50" />
    </SelectPrimitive.Icon>
  </SelectPrimitive.Trigger>
))
SelectTrigger.displayName = SelectPrimitive.Trigger.displayName

const SelectScrollUpButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollUpButton
    ref={ref}
    className={cn(
      "flex cursor-default items-center justify-center py-1",
      className
    )}
    {...props}
  >
    <ChevronUp className="h-4 w-4" />
  </SelectPrimitive.ScrollUpButton>
))
SelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName

const SelectScrollDownButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollDownButton
    ref={ref}
    className={cn(
      "flex cursor-default items-center justify-center py-1",
      className
    )}
    {...props}
  >
    <ChevronDown className="h-4 w-4" />
  </SelectPrimitive.ScrollDownButton>
))
SelectScrollDownButton.displayName =
  SelectPrimitive.ScrollDownButton.displayName

const SelectContent = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>
>(({ className, children, position = "popper", ...props }, ref) => (
  <SelectPrimitive.Portal>
    <SelectPrimitive.Content
      ref={ref}
      className={cn(
        "relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        position === "popper" &&
          "data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1",
        className
      )}
      position={position}
      {...props}
    >
      <SelectScrollUpButton />
      <SelectPrimitive.Viewport
        className={cn(
          "p-1",
          position === "popper" &&
            "h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]"
        )}
      >
        {children}
      </SelectPrimitive.Viewport>
      <SelectScrollDownButton />
    </SelectPrimitive.Content>
  </SelectPrimitive.Portal>
))
SelectContent.displayName = SelectPrimitive.Content.displayName

const SelectLabel = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Label
    ref={ref}
    className={cn("py-1.5 pl-8 pr-2 text-sm font-semibold", className)}
    {...props}
  />
))
SelectLabel.displayName = SelectPrimitive.Label.displayName

const SelectItem = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <SelectPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </SelectPrimitive.ItemIndicator>
    </span>

    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>
  </SelectPrimitive.Item>
))
SelectItem.displayName = SelectPrimitive.Item.displayName

const SelectSeparator = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
SelectSeparator.displayName = SelectPrimitive.Separator.displayName

export {
  Select,
  SelectGroup,
  SelectValue,
  SelectTrigger,
  SelectScrollUpButton,
  SelectScrollDownButton,
  SelectContent,
  SelectLabel,
  SelectItem,
  SelectSeparator,
}
</file>

<file path="src/components/ui/textarea.tsx">
import * as React from "react"

import { cn } from "@/lib/utils"

const Textarea = React.forwardRef<
  HTMLTextAreaElement,
  React.ComponentProps<"textarea">
>(({ className, ...props }, ref) => {
  return (
    <textarea
      className={cn(
        "flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
        className
      )}
      ref={ref}
      {...props}
    />
  )
})
Textarea.displayName = "Textarea"

export { Textarea }
</file>

<file path="src/components/CompanyRequestForm.tsx">
import { useState } from "react";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import { Button } from "@/components/ui/button";
import { DialogHeader, DialogTitle, DialogFooter } from "@/components/ui/dialog";

interface CompanyRequestFormProps {
  onSubmit: (request: { company_name: string; company_address: string; reason: string }) => void;
  onCancel: () => void;
  submitting?: boolean;
}

export default function CompanyRequestForm({ onSubmit, onCancel, submitting = false }: CompanyRequestFormProps) {
  const [companyName, setCompanyName] = useState("");
  const [companyAddress, setCompanyAddress] = useState("");
  const [reason, setReason] = useState("");

  const handleSubmit = () => {
    if (!companyName.trim()) return;
    
    onSubmit({
      company_name: companyName,
      company_address: companyAddress,
      reason: reason,
    });
  };

  return (
    <>
      <DialogHeader>
        <DialogTitle>Request New Company</DialogTitle>
        <p className="text-sm text-muted-foreground">
          Submit a request to add a new company to our tracking database.
        </p>
      </DialogHeader>
      <div className="space-y-4 py-4">
        <div className="space-y-2">
          <Label htmlFor="company-name">Company Name *</Label>
          <Input
            id="company-name"
            placeholder="Enter company name"
            value={companyName}
            onChange={(e) => setCompanyName(e.target.value)}
          />
        </div>
        
        <div className="space-y-2">
          <Label htmlFor="company-address">Company Address</Label>
          <Input
            id="company-address"
            placeholder="Enter company address (optional)"
            value={companyAddress}
            onChange={(e) => setCompanyAddress(e.target.value)}
          />
        </div>
        
        <div className="space-y-2">
          <Label htmlFor="reason">Why should we track this company?</Label>
          <Textarea
            id="reason"
            placeholder="Why is this company relevant to Local 825?"
            value={reason}
            onChange={(e) => setReason(e.target.value)}
            rows={3}
          />
        </div>
      </div>
      <DialogFooter>
        <Button variant="outline" onClick={onCancel} disabled={submitting}>Cancel</Button>
        <Button onClick={handleSubmit} disabled={!companyName.trim() || submitting}>
          {submitting ? 'Submitting...' : 'Submit Request'}
        </Button>
      </DialogFooter>
    </>
  );
}
</file>

<file path="src/components/DataPointChart.tsx">
import { ChartContainer, ChartTooltip, ChartTooltipContent } from "@/components/ui/chart";
import { Bar, BarChart, ResponsiveContainer, XAxis, YAxis } from "recharts";

interface DataPointChartProps {
  data: Array<{
    name: string;
    value: number;
  }>;
  title?: string;
  height?: number;
  valuePrefix?: string;
  valueSuffix?: string;
  color?: string;
}

export function DataPointChart({ 
  data, 
  title, 
  height = 300, 
  valuePrefix = "", 
  valueSuffix = "",
  color = "hsl(var(--primary))"
}: DataPointChartProps) {
  return (
    <div className="w-full h-full flex flex-col">
      {title && <h3 className="text-sm font-medium text-muted-foreground mb-2">{title}</h3>}
      <div className="flex-1 min-h-0">
        <ChartContainer
          config={{
            primary: { 
              color: "hsl(var(--primary))" 
            },
            secondary: {
              color: "hsl(var(--muted))"
            }
          }}
          className="w-full h-full"
        >
          <ResponsiveContainer width="100%" height="100%">
            <BarChart 
              data={data} 
              margin={{ top: 20, right: 20, left: 10, bottom: 30 }}
            >
              <XAxis
                dataKey="name"
                tickLine={false}
                axisLine={false}
                tickMargin={12}
                fontSize={12}
                tick={{ fontSize: 12, fill: "hsl(var(--muted-foreground))" }}
              />
              <YAxis
                tickLine={false}
                axisLine={false}
                tickFormatter={(value) => `${valuePrefix}${value}${valueSuffix}`}
                fontSize={12}
                tick={{ fontSize: 12, fill: "hsl(var(--muted-foreground))" }}
                width={50}
              />
              <Bar 
                dataKey="value" 
                fill={color} 
                radius={[4, 4, 0, 0]}
                maxBarSize={60}
              />
              <ChartTooltip
                cursor={{ fill: "hsl(var(--muted) / 0.2)" }}
                content={<CustomTooltipContent valuePrefix={valuePrefix} valueSuffix={valueSuffix} />}
              />
            </BarChart>
          </ResponsiveContainer>
        </ChartContainer>
      </div>
    </div>
  );
}

interface TooltipProps {
  active?: boolean;
  payload?: Array<{
    value: number;
    color: string;
    payload: {
      name: string;
    };
  }>;
  valuePrefix?: string;
  valueSuffix?: string;
}

// Custom tooltip that can format values with prefix/suffix
function CustomTooltipContent(props: TooltipProps) {
  const { active, payload, valuePrefix = "", valueSuffix = "" } = props;
  
  if (!active || !payload?.length) {
    return null;
  }

  return (
    <div className="grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background/95 backdrop-blur-sm px-3 py-2 text-xs shadow-lg">
      <div className="grid gap-1.5">
        {payload.map((item, index: number) => (
          <div key={index} className="flex items-center gap-2">
            <div
              className="h-2.5 w-2.5 shrink-0 rounded-[2px]"
              style={{ backgroundColor: item.color || "hsl(var(--primary))" }}
            />
            <div className="flex flex-1 justify-between leading-none items-center">
              <span className="text-muted-foreground">{item.payload.name}</span>
              {item.value && (
                <span className="font-mono font-medium tabular-nums text-foreground pl-4">
                  {valuePrefix}{item.value.toLocaleString()}{valueSuffix}
                </span>
              )}
            </div>
          </div>
        ))}
      </div>
    </div>
  );
}
</file>

<file path="src/components/EdgarTestComponent.tsx">
import { useState } from 'react';
import { useEdgarInsights } from '@/hooks/useEdgarInsights';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Card, CardHeader, CardTitle, CardContent } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Loader2, FileText, AlertCircle } from 'lucide-react';

export default function EdgarTestComponent() {
  const [cik, setCik] = useState('0000320193'); // Apple's CIK as default
  const [activeCik, setActiveCik] = useState<string | undefined>();
  
  const { data, loading, error, refetch } = useEdgarInsights(activeCik);

  const handleFetch = () => {
    if (cik.trim()) {
      setActiveCik(cik.trim());
    }
  };

  return (
    <div className="space-y-6 p-6">
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <FileText className="h-5 w-5" />
            SEC EDGAR MCP Test
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="space-y-4">
            <div className="flex gap-2">
              <Input
                placeholder="Enter CIK (e.g., 0000320193 for Apple)"
                value={cik}
                onChange={(e) => setCik(e.target.value)}
                className="flex-1"
              />
              <Button onClick={handleFetch} disabled={loading}>
                {loading ? (
                  <>
                    <Loader2 className="h-4 w-4 mr-2 animate-spin" />
                    Fetching...
                  </>
                ) : (
                  'Fetch Data'
                )}
              </Button>
            </div>

            {error && (
              <div className="flex items-center gap-2 p-3 bg-red-50 dark:bg-red-950/20 border border-red-200 dark:border-red-800 rounded-md">
                <AlertCircle className="h-4 w-4 text-red-600 dark:text-red-400" />
                <span className="text-red-700 dark:text-red-300">{error}</span>
              </div>
            )}

            {data && (
              <div className="space-y-4">
                <div className="flex items-center gap-2">
                  <Badge variant="outline">Data Retrieved</Badge>
                  <span className="text-sm text-gray-600 dark:text-gray-400">
                    CIK: {activeCik}
                  </span>
                </div>
                
                <Card>
                  <CardHeader>
                    <CardTitle className="text-sm">Raw Response</CardTitle>
                  </CardHeader>
                  <CardContent>
                    <pre className="bg-gray-50 dark:bg-gray-900 p-4 rounded-md overflow-auto text-xs">
                      {JSON.stringify(data, null, 2)}
                    </pre>
                  </CardContent>
                </Card>
              </div>
            )}
          </div>
        </CardContent>
      </Card>
    </div>
  );
}
</file>

<file path="src/components/RootRedirect.tsx">
import { useEffect, useState } from 'react';
import { Navigate, useLocation } from 'react-router-dom';
import { useAuth } from '@/contexts/AuthContext';
import { supabase } from "@/integrations/supabase/client";

export default function RootRedirect() {
  const { user, loading } = useAuth();
  const location = useLocation();
  const [maintenanceCheck, setMaintenanceCheck] = useState<{
    loading: boolean;
    isMaintenanceMode: boolean;
    isAdminUser: boolean;
    isPasswordAuthenticated: boolean;
  }>({
    loading: true,
    isMaintenanceMode: false,
    isAdminUser: false,
    isPasswordAuthenticated: false
  });

  const checkUserRole = async (userId: string) => {
    try {
      const { data, error } = await supabase
        .rpc('has_role', { 
          _user_id: userId, 
          _role: 'admin' 
        });
      
      if (error) {
        console.error("Error checking user role:", error);
        return false;
      }
      
      return data === true;
    } catch (error) {
      console.error("Error checking user role:", error);
      return false;
    }
  };

  // Check maintenance mode first
  useEffect(() => {
    const checkMaintenanceMode = async () => {
      try {
        // Check if user is admin
        let adminStatus = false;
        if (user) {
          adminStatus = await checkUserRole(user.id);
        }

        // Check for password authentication
        const passwordAuth = localStorage.getItem("adminAuthenticated") === "true";
        
        // Check Supabase for maintenance mode setting
        const { data, error } = await supabase
          .from('site_settings')
          .select('setting_value')
          .eq('setting_key', 'maintenance_mode')
          .single();
        
        if (error) {
          console.error("Error fetching maintenance mode:", error);
          setMaintenanceCheck({
            loading: false,
            isMaintenanceMode: false,
            isAdminUser: adminStatus,
            isPasswordAuthenticated: passwordAuth
          });
        } else {
          const isMaintenanceActive = data?.setting_value === 'true';
          
          setMaintenanceCheck({
            loading: false,
            isMaintenanceMode: isMaintenanceActive,
            isAdminUser: adminStatus,
            isPasswordAuthenticated: passwordAuth
          });
          
          console.log("RootRedirect maintenance check:", { 
            maintenanceMode: data?.setting_value, 
            isMaintenanceActive, 
            isAdmin: adminStatus,
            isPasswordAuth: passwordAuth,
            userId: user?.id
          });
        }
      } catch (error) {
        console.error("Error checking maintenance mode:", error);
        setMaintenanceCheck({
          loading: false,
          isMaintenanceMode: false,
          isAdminUser: false,
          isPasswordAuthenticated: false
        });
      }
    };

    checkMaintenanceMode();
  }, [user]);

  // Don't redirect if user is already on a specific page
  if (location.pathname !== '/') {
    return null;
  }

  // Show loading while checking maintenance mode or authentication
  if (maintenanceCheck.loading || loading) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-gradient-to-br from-background to-secondary/20">
        <div className="text-center">
          <div className="w-16 h-16 border-4 border-primary border-t-transparent rounded-full animate-spin mx-auto"></div>
          <p className="mt-4 text-muted-foreground">Loading...</p>
        </div>
      </div>
    );
  }

  // If maintenance mode is active and user is not an admin (either role-based or password), let MaintenanceWrapper handle it
  if (maintenanceCheck.isMaintenanceMode && !maintenanceCheck.isAdminUser && !maintenanceCheck.isPasswordAuthenticated) {
    console.log("RootRedirect: Maintenance mode active, letting MaintenanceWrapper handle it");
    return null;
  }

  // Redirect based on authentication status
  if (user || maintenanceCheck.isPasswordAuthenticated) {
    return <Navigate to="/feed" replace />;
  } else {
    return <Navigate to="/auth" replace />;
  }
}
</file>

<file path="src/components/SystemInfo.tsx">
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";

interface SystemInfoProps {
  maintenanceMode: boolean;
}

export default function SystemInfo({ maintenanceMode }: SystemInfoProps) {
  return (
    <Card>
      <CardHeader>
        <CardTitle>System Information</CardTitle>
      </CardHeader>
      <CardContent>
        <div className="space-y-2">
          <div className="flex justify-between">
            <span className="text-sm text-muted-foreground">Current Mode:</span>
            <span className="text-sm font-medium">
              {maintenanceMode ? "Maintenance (Admin Role Bypass Active)" : "Live"}
            </span>
          </div>
          <div className="flex justify-between">
            <span className="text-sm text-muted-foreground">Access Control:</span>
            <span className="text-sm font-medium">Role-Based (Admin)</span>
          </div>
          <div className="flex justify-between">
            <span className="text-sm text-muted-foreground">Your Role:</span>
            <span className="text-sm font-medium text-green-600">Admin</span>
          </div>
        </div>
      </CardContent>
    </Card>
  );
}
</file>

<file path="src/components/ThemeToggle.tsx">
import { Button } from "@/components/ui/button";
import { Moon, Sun, Monitor } from "lucide-react";
import { useTheme } from "@/hooks/useTheme";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";

export default function ThemeToggle() {
  const { theme, setTheme } = useTheme();
  
  return (
    <DropdownMenu>
      <DropdownMenuTrigger asChild>
        <Button 
          variant="ghost" 
          size="icon" 
          className="rounded-full w-9 h-9"
        >
          {theme === "dark" ? (
            <Moon className="h-[1.2rem] w-[1.2rem]" />
          ) : theme === "light" ? (
            <Sun className="h-[1.2rem] w-[1.2rem]" />
          ) : (
            <Monitor className="h-[1.2rem] w-[1.2rem]" />
          )}
          <span className="sr-only">Toggle theme</span>
        </Button>
      </DropdownMenuTrigger>
      <DropdownMenuContent className="bg-background border-border shadow-lg">
        <DropdownMenuItem onClick={() => setTheme("light")} className="cursor-pointer">
          <Sun className="mr-2 h-4 w-4" />
          Light
        </DropdownMenuItem>
        <DropdownMenuItem onClick={() => setTheme("dark")} className="cursor-pointer">
          <Moon className="mr-2 h-4 w-4" />
          Dark
        </DropdownMenuItem>
        <DropdownMenuItem onClick={() => setTheme("system")} className="cursor-pointer">
          <Monitor className="mr-2 h-4 w-4" />
          System
        </DropdownMenuItem>
      </DropdownMenuContent>
    </DropdownMenu>
  );
}
</file>

<file path="src/hooks/useAdminStatus.ts">
import { useState, useEffect } from "react";
import { supabase } from "@/integrations/supabase/client";
import { useAuth } from "@/contexts/AuthContext";

export function useAdminStatus() {
  const { user } = useAuth();
  const [isAdmin, setIsAdmin] = useState(false);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const checkAdminStatus = async () => {
      if (!user) {
        setIsAdmin(false);
        setLoading(false);
        return;
      }

      try {
        const { data, error } = await supabase
          .rpc('has_role', { 
            _user_id: user.id, 
            _role: 'admin' 
          });
        
        if (error) {
          console.error("Error checking admin status:", error);
          setIsAdmin(false);
        } else {
          setIsAdmin(data === true);
        }
      } catch (error) {
        console.error("Error checking admin status:", error);
        setIsAdmin(false);
      } finally {
        setLoading(false);
      }
    };

    checkAdminStatus();
  }, [user]);

  return { isAdmin, loading };
}
</file>

<file path="src/hooks/useBulldozerSync.ts">
import { useState } from "react";
import { supabase } from "@/integrations/supabase/client";
import { toast } from "@/hooks/use-toast";

export function useBulldozerSync() {
  const [refreshing, setRefreshing] = useState(false);

  const triggerBulldozerSync = async () => {
    setRefreshing(true);
    try {
      console.log('Triggering Bulldozer feed sync...');
      
      const { data, error } = await supabase.functions.invoke('sync-rss-feeds', {
        body: {}
      });
      
      if (error) {
        throw error;
      }
      
      console.log('Bulldozer sync response:', data);
      
      if (data.success) {
        toast({
          title: "Bulldozer Feed Sync Complete",
          description: `Found ${data.totalNewArticles} new articles from ${data.totalSources} sources`,
        });
        
        return true;
      } else {
        throw new Error(data.error || 'Bulldozer feed sync failed');
      }
    } catch (error: unknown) {
      const errorMessage = error instanceof Error ? error.message : "Failed to sync Bulldozer feeds";
      console.error('Error triggering Bulldozer sync:', error);
      toast({
        title: "Bulldozer Feed Sync Failed",
        description: errorMessage,
        variant: "destructive",
      });
      return false;
    } finally {
      setRefreshing(false);
    }
  };

  return {
    refreshing,
    triggerBulldozerSync
  };
}
</file>

<file path="src/hooks/useCompanyProfile.ts">
import { useState, useEffect, useCallback } from "react";
import { supabase } from "@/integrations/supabase/client";
import { toast } from "sonner";
import { CompanyProfile, NewsArticle, JobPosting } from "@/types";

export interface RelatedContent {
  articles_count: number;
  jobs_count: number;
  recent_articles: NewsArticle[];
  recent_jobs: JobPosting[];
}

export const useCompanyProfile = (companyId: string) => {
  const [company, setCompany] = useState<CompanyProfile | null>(null);
  const [relatedContent, setRelatedContent] = useState<RelatedContent | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  const fetchCompanyProfile = useCallback(async () => {
    try {
      setLoading(true);
      setError(null);

      // Fetch company profile
      const { data: companyData, error: companyError } = await supabase
        .from('main_companies')
        .select('*')
        .eq('id', companyId)
        .single();

      if (companyError) throw companyError;

      setCompany(companyData);

      // Fetch related content using the database function
      if (companyData?.name) {
        const { data: contentData, error: contentError } = await supabase
          .rpc('get_company_related_content', {
            company_name_param: companyData.name
          });

        if (contentError) {
          console.error('Error fetching related content:', contentError);
        } else if (contentData && contentData.length > 0) {
          const content = contentData[0];
          setRelatedContent({
            articles_count: content.articles_count || 0,
            jobs_count: content.jobs_count || 0,
            recent_articles: Array.isArray(content.recent_articles) ? content.recent_articles : [],
            recent_jobs: Array.isArray(content.recent_jobs) ? content.recent_jobs : []
          });
        }
      }
    } catch (err: unknown) {
      const errorMessage = err instanceof Error ? err.message : "Failed to load company profile";
      console.error('Error fetching company profile:', err);
      setError(errorMessage);
      toast.error('Failed to load company profile');
    } finally {
      setLoading(false);
    }
  }, [companyId]);

  useEffect(() => {
    if (companyId) {
      fetchCompanyProfile();
    }
  }, [companyId, fetchCompanyProfile]);

  return {
    company,
    relatedContent,
    loading,
    error,
    refetch: fetchCompanyProfile
  };
};
</file>

<file path="src/hooks/useDailyAnalytics.ts">
import { useState, useEffect } from "react";
import { supabase } from "@/integrations/supabase/client";

interface DailyAnalytics {
  id: string;
  analysis_date: string;
  analysis_time: string;
  created_at: string;
  active_news_sources: number;
  companies_tracked: number;
  news_articles_count: number;
  labor_alerts_count: number;
  company_news_activity: Array<{ name: string; value: number }>;
  labor_activity_tracking: Array<{ name: string; value: number }>;
  daily_summary: string | null;
  key_insights: string[] | null;
  high_priority_alerts: string[] | null;
  trend_analysis: string | null;
  detailed_analysis?: string | null;
  verified_headlines?: Array<{ title: string; source: string; url: string }> | null;
  strategic_takeaways?: string[] | null;
  action_items?: {
    next_7_days: string[];
    next_30_days: string[];
    next_90_days: string[];
  } | null;
  // Add the missing AI analysis fields
  ai_analysis_version?: string | null;
  executive_summary?: string | null;
  risk_assessment?: Array<{ riskLevel: string; description: string }> | null;
  labor_updates?: Array<{ description: string; changes: string[] }> | null;
  key_headlines?: Array<{ title: string; source: string; url: string; impact?: string }> | null;
}

export const useDailyAnalytics = () => {
  const [analytics, setAnalytics] = useState<DailyAnalytics | null>(null);
  const [historicalReports, setHistoricalReports] = useState<DailyAnalytics[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    fetchLatestAnalytics();
    fetchHistoricalReports();
  }, []);

  const fetchLatestAnalytics = async () => {
    try {
      setLoading(true);
      setError(null);

      // Get the most recent analytics
      const { data, error: fetchError } = await supabase
        .from('daily_analytics')
        .select('*')
        .order('analysis_date', { ascending: false })
        .order('analysis_time', { ascending: false })
        .limit(1)
        .single();

      if (fetchError && fetchError.code !== 'PGRST116') {
        throw fetchError;
      }

      if (data) {
        setAnalytics(transformAnalyticsData(data));
      } else {
        setAnalytics(null);
      }
    } catch (err: any) {
      console.error('Error fetching daily analytics:', err);
      setError(err.message);
    } finally {
      setLoading(false);
    }
  };

  const fetchHistoricalReports = async () => {
    try {
      const { data, error } = await supabase
        .from('daily_analytics')
        .select('*')
        .order('analysis_date', { ascending: false })
        .order('analysis_time', { ascending: false });

      if (error) throw error;
      
      const transformedData = (data || []).map(transformAnalyticsData);
      setHistoricalReports(transformedData);
    } catch (err: any) {
      console.error('Error fetching historical reports:', err);
    }
  };

  const transformAnalyticsData = (data: any): DailyAnalytics => {
    const transformedData: DailyAnalytics = {
      ...data,
      company_news_activity: Array.isArray(data.company_news_activity) 
        ? data.company_news_activity as Array<{ name: string; value: number }>
        : [],
      labor_activity_tracking: Array.isArray(data.labor_activity_tracking)
        ? data.labor_activity_tracking as Array<{ name: string; value: number }>
        : []
    };

    // Parse detailed analysis if it exists
    if (data.detailed_analysis) {
      try {
        const parsedDetailedAnalysis = JSON.parse(data.detailed_analysis);
        transformedData.verified_headlines = parsedDetailedAnalysis.verified_headlines || null;
        transformedData.strategic_takeaways = parsedDetailedAnalysis.strategic_takeaways || null;
        transformedData.action_items = parsedDetailedAnalysis.action_items || null;
      } catch (error) {
        console.error('Error parsing detailed analysis:', error);
      }
    }

    return transformedData;
  };

  const fetchAnalyticsByDate = async (date: string): Promise<DailyAnalytics | null> => {
    try {
      const { data, error } = await supabase
        .from('daily_analytics')
        .select('*')
        .eq('analysis_date', date)
        .order('analysis_time', { ascending: false })
        .limit(1)
        .single();

      if (error && error.code !== 'PGRST116') throw error;
      
      return data ? transformAnalyticsData(data) : null;
    } catch (err: any) {
      console.error('Error fetching analytics by date:', err);
      return null;
    }
  };

  const fetchAnalyticsByDateRange = async (startDate: string, endDate: string) => {
    try {
      const { data, error } = await supabase
        .from('daily_analytics')
        .select('*')
        .gte('analysis_date', startDate)
        .lte('analysis_date', endDate)
        .order('analysis_date', { ascending: false })
        .order('analysis_time', { ascending: false });

      if (error) throw error;
      
      return (data || []).map(transformAnalyticsData);
    } catch (err: any) {
      console.error('Error fetching analytics by date range:', err);
      return [];
    }
  };

  const triggerAnalyticsGeneration = async () => {
    try {
      console.log('Triggering analytics generation...');
      
      const { data, error } = await supabase.functions.invoke('generate-daily-analytics', {
        body: { 
          manual_trigger: true,
          timestamp: new Date().toISOString()
        }
      });
      
      if (error) {
        throw error;
      }
      
      console.log('Analytics generation response:', data);
      
      if (data.success) {
        // Refresh the analytics data
        await fetchLatestAnalytics();
        await fetchHistoricalReports();
        return true;
      } else {
        throw new Error(data.error || 'Analytics generation failed');
      }
    } catch (error: any) {
      console.error('Error triggering analytics generation:', error);
      setError(error.message);
      return false;
    }
  };

  const generateHistoricalReport = async (targetDate: string) => {
    try {
      console.log(`Generating historical report for ${targetDate}...`);
      
      const { data, error } = await supabase.functions.invoke('generate-historical-report', {
        body: { 
          targetDate: targetDate
        }
      });
      
      if (error) {
        throw error;
      }
      
      console.log('Historical report generation response:', data);
      
      if (data.success) {
        // Refresh the historical reports
        await fetchHistoricalReports();
        return { success: true, data: data };
      } else {
        throw new Error(data.error || data.message || 'Historical report generation failed');
      }
    } catch (error: any) {
      console.error('Error generating historical report:', error);
      setError(error.message);
      return { success: false, error: error.message };
    }
  };

  const deleteHistoricalReport = async (targetDate?: string, deleteAll: boolean = false) => {
    try {
      console.log(`Deleting historical report${deleteAll ? 's' : ''}...`);
      
      const { data, error } = await supabase.functions.invoke('delete-historical-report', {
        body: { 
          targetDate: targetDate,
          deleteAll: deleteAll
        }
      });
      
      if (error) {
        throw error;
      }
      
      console.log('Delete response:', data);
      
      if (data.success) {
        // Refresh the historical reports
        await fetchHistoricalReports();
        return { success: true, data: data };
      } else {
        throw new Error(data.error || data.message || 'Delete operation failed');
      }
    } catch (error: any) {
      console.error('Error deleting historical report:', error);
      setError(error.message);
      return { success: false, error: error.message };
    }
  };

  return {
    analytics,
    historicalReports,
    loading,
    error,
    refetch: fetchLatestAnalytics,
    fetchAnalyticsByDate,
    fetchAnalyticsByDateRange,
    triggerAnalyticsGeneration,
    generateHistoricalReport,
    deleteHistoricalReport
  };
};
</file>

<file path="src/hooks/useEdgarInsights.ts">
import { useState, useEffect, useCallback } from 'react';
import { getCompanySubmissions } from '@/integrations/edgarMcp';

export function useEdgarInsights(cik?: string) {
  const [data, setData] = useState<any>(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  const fetchData = useCallback(async () => {
    if (!cik) return;
    setLoading(true);
    setError(null);
    try {
      const result = await getCompanySubmissions(cik);
      setData(result);
    } catch (err: any) {
      setError(err.message || 'Failed to fetch SEC EDGAR data');
      setData(null);
    } finally {
      setLoading(false);
    }
  }, [cik]);

  useEffect(() => {
    if (cik) {
      fetchData();
    }
  }, [cik, fetchData]);

  return { data, loading, error, refetch: fetchData };
}
</file>

<file path="src/hooks/useJobsScraper.ts">
import { useState } from "react";
import { supabase } from "@/integrations/supabase/client";
import { toast } from "@/hooks/use-toast";
import { useQuery } from "@tanstack/react-query";

export interface JobListing {
  id: string;
  title: string;
  company?: string;
  location?: string;
  url: string;
  priority: 'high' | 'medium' | 'low';
  job_type: 'field' | 'office' | 'mechanic' | 'admin';
  pay_range?: string;
  insights?: string;
  scraped_at: string;
  is_processed: boolean;
  ai_analysis?: string;
  raw_content?: string;
  source_type?: string;
  wordpress_category?: string;
  content_type?: string;
  is_active?: boolean;
  enhanced_at?: string;
  processed_at?: string;
  local_825_relevance?: string;
  formatted_description?: string;
  content?: string;
}

const JOBS_PER_PAGE = 10;

export function useJobsScraper(page: number = 1) {
  const [isProcessing, setIsProcessing] = useState(false);

  // Fetch existing processed jobs with pagination
  const { data: jobsData, isLoading: isLoadingJobs, refetch: refetchJobs } = useQuery({
    queryKey: ['job-listings', page],
    queryFn: async () => {
      const offset = (page - 1) * JOBS_PER_PAGE;
      
      // Get total count - only from employer-watch category
      const { count } = await supabase
        .from('job_listings')
        .select('*', { count: 'exact', head: true })
        .eq('is_processed', true)
        .eq('is_active', true)
        .eq('wordpress_category', 'employer-watch');

      // Get paginated data - only from employer-watch category
      const { data, error } = await supabase
        .from('job_listings')
        .select('*')
        .eq('is_processed', true)
        .eq('is_active', true)
        .eq('wordpress_category', 'employer-watch')
        .order('scraped_at', { ascending: false })
        .range(offset, offset + JOBS_PER_PAGE - 1);
      
      if (error) {
        console.error('Error fetching job listings:', error);
        throw error;
      }
      
      return {
        jobs: (data || []) as JobListing[],
        totalCount: count || 0,
        totalPages: Math.ceil((count || 0) / JOBS_PER_PAGE)
      };
    },
  });

  const triggerJobScraping = async () => {
    setIsProcessing(true);
    try {
      console.log('Triggering job scraping...');
      
      const { data, error } = await supabase.functions.invoke('scrape-jobs', {
        body: {}
      });
      
      if (error) {
        throw error;
      }
      
      console.log('Job scraping response:', data);
      
      if (data.success) {
        // Only show toast if there are actually new jobs processed
        if (data.processedJobs > 0) {
          toast({
            title: "New Jobs Found",
            description: `Found ${data.processedJobs} new opportunities`,
          });
        }
        
        // Refetch jobs to show new data
        await refetchJobs();
        return true;
      } else {
        throw new Error(data.error || 'Job scraping failed');
      }
    } catch (error: unknown) {
      const errorMessage = error instanceof Error ? error.message : "Failed to sync job opportunities";
      console.error('Error triggering job scraping:', error);
      // Only show error toast for actual errors, not "no new jobs" scenarios
      if (!errorMessage.includes('No new jobs')) {
        toast({
          title: "Sync Failed",
          description: errorMessage,
          variant: "destructive",
        });
      }
      return false;
    } finally {
      setIsProcessing(false);
    }
  };

  return {
    jobs: jobsData?.jobs || [],
    totalCount: jobsData?.totalCount || 0,
    totalPages: jobsData?.totalPages || 1,
    isLoadingJobs,
    isProcessing,
    triggerJobScraping,
    refetchJobs
  };
}
</file>

<file path="src/hooks/useMainCompanies.ts">
import { useState, useEffect } from "react";
import { supabase } from "@/integrations/supabase/client";

interface MainCompany {
  id: string;
  name: string;
  description?: string;
  priority: number;
  is_active: boolean;
  status?: string;
  updated_at: string;
  created_at: string;
}

export const useMainCompanies = () => {
  const [companies, setCompanies] = useState<MainCompany[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    fetchMainCompanies();
  }, []);

  const fetchMainCompanies = async () => {
    try {
      const { data, error } = await supabase
        .from('main_companies')
        .select('*')
        .eq('is_active', true)
        .order('priority', { ascending: true });

      if (error) throw error;

      setCompanies(data || []);
    } catch (err: unknown) {
      const errorMessage = err instanceof Error ? err.message : "Failed to load companies";
      setError(errorMessage);
    } finally {
      setLoading(false);
    }
  };

  return { companies, loading, error, refetch: fetchMainCompanies };
};
</file>

<file path="src/hooks/useMaintenanceTasks.ts">
import { useState, useEffect } from "react";
import { supabase } from "@/integrations/supabase/client";
import { Tables } from "@/integrations/supabase/types";

type MaintenanceTask = Tables<"maintenance_tasks">;

interface MaintenanceProgress {
  total_tasks: number;
  completed_tasks: number;
  processing_tasks: number;
  completion_percentage: number;
  estimated_minutes_remaining: number;
}

export function useMaintenanceTasks() {
  const [tasks, setTasks] = useState<MaintenanceTask[]>([]);
  const [progress, setProgress] = useState<MaintenanceProgress | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    const fetchData = async () => {
      try {
        // Fetch tasks
        const { data: tasksData, error: tasksError } = await supabase
          .from('maintenance_tasks')
          .select('*')
          .order('display_order', { ascending: true });

        if (tasksError) {
          console.error("Error fetching maintenance tasks:", tasksError);
          setError(tasksError.message);
          return;
        }

        setTasks(tasksData || []);

        // Fetch progress using the database function
        const { data: progressData, error: progressError } = await supabase
          .rpc('get_maintenance_progress');

        if (progressError) {
          console.error("Error fetching maintenance progress:", progressError);
          setError(progressError.message);
          return;
        }

        if (progressData && progressData.length > 0) {
          setProgress(progressData[0]);
        }

      } catch (error) {
        console.error("Error in useMaintenanceTasks:", error);
        setError("Failed to fetch maintenance data");
      } finally {
        setLoading(false);
      }
    };

    fetchData();

    // Set up real-time subscription for task updates
    const channel = supabase
      .channel('maintenance-task-changes')
      .on(
        'postgres_changes',
        {
          event: '*',
          schema: 'public',
          table: 'maintenance_tasks',
        },
        () => {
          console.log('Maintenance task updated, refetching data');
          fetchData();
        }
      )
      .subscribe();

    return () => {
      supabase.removeChannel(channel);
    };
  }, []);

  return { tasks, progress, loading, error };
}
</file>

<file path="src/hooks/useNewsSourceCompanies.ts">
import { useState, useEffect } from "react";
import { supabase } from "@/integrations/supabase/client";

interface NewsSourceWithCompanies {
  id: string;
  name: string;
  company_names: string[] | null;
}

export const useNewsSourceCompanies = () => {
  const [companies, setCompanies] = useState<{ id: string; name: string; type: 'news_source' }[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  const fetchCompanies = async () => {
    try {
      setLoading(true);
      setError(null);
      
      const { data: newsSources, error: fetchError } = await supabase
        .from('news_sources')
        .select('id, name, company_names')
        .eq('is_active', true);

      if (fetchError) {
        throw fetchError;
      }

      // Extract all unique company names from all news sources
      const allCompanyNames = new Set<string>();
      
      newsSources?.forEach((source: NewsSourceWithCompanies) => {
        if (source.company_names && Array.isArray(source.company_names)) {
          source.company_names.forEach(companyName => {
            if (companyName && typeof companyName === 'string') {
              allCompanyNames.add(companyName.trim());
            }
          });
        }
      });

      // Convert to array and create company objects
      const uniqueCompanies = Array.from(allCompanyNames)
        .filter(name => name.length > 0)
        .map((name, index) => ({
          id: `news_source_${index}`,
          name: name,
          type: 'news_source' as const
        }))
        .sort((a, b) => a.name.localeCompare(b.name));

      setCompanies(uniqueCompanies);
    } catch (err: unknown) {
      const errorMessage = err instanceof Error ? err.message : "Failed to load news source companies";
      console.error('Error fetching news source companies:', err);
      setError(errorMessage);
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchCompanies();
  }, []);

  return { companies, loading, error, refetch: fetchCompanies };
};
</file>

<file path="src/hooks/useNewsSources.ts">
import { useState, useEffect } from "react";
import { supabase } from "@/integrations/supabase/client";

interface NewsSource {
  id: string;
  name: string;
  description: string | null;
  rss_url: string;
  company_names: string[] | null;
  is_active: boolean;
  created_at: string;
  updated_at: string;
}

export const useNewsSources = () => {
  const [sources, setSources] = useState<NewsSource[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  const fetchSources = async () => {
    try {
      setLoading(true);
      setError(null);
      
      const { data, error: fetchError } = await supabase
        .from('news_sources')
        .select('*')
        .eq('is_active', true)
        .order('name');

      if (fetchError) {
        throw fetchError;
      }

      setSources(data || []);
    } catch (err: unknown) {
      const errorMessage = err instanceof Error ? err.message : "Failed to load news sources";
      console.error('Error fetching news sources:', err);
      setError(errorMessage);
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchSources();
  }, []);

  return { sources, loading, error, refetch: fetchSources };
};
</file>

<file path="src/hooks/useRSSSync.ts">
import { useState } from "react";
import { supabase } from "@/integrations/supabase/client";
import { toast } from "@/hooks/use-toast";

export function useRSSSync() {
  const [refreshing, setRefreshing] = useState(false);

  const triggerRSSSync = async () => {
    setRefreshing(true);
    try {
      console.log('Triggering RSS sync...');
      
      const { data, error } = await supabase.functions.invoke('sync-rss-feeds', {
        body: {}
      });
      
      if (error) {
        throw error;
      }
      
      console.log('RSS sync response:', data);
      
      if (data.success) {
        const summary = data.summary;
        toast({
          title: "RSS Sync Complete",
          description: `Found ${summary.total_new_articles} new articles from ${summary.total_sources} sources`,
        });
        
        return true;
      } else {
        throw new Error(data.error || 'RSS sync failed');
      }
    } catch (error: unknown) {
      const errorMessage = error instanceof Error ? error.message : "Failed to sync RSS feeds";
      console.error('Error triggering RSS sync:', error);
      toast({
        title: "RSS Sync Failed",
        description: errorMessage,
        variant: "destructive",
      });
      return false;
    } finally {
      setRefreshing(false);
    }
  };

  return {
    refreshing,
    triggerRSSSync
  };
}
</file>

<file path="src/integrations/edgarMcp.ts">
// SEC EDGAR MCP Integration
// This module provides functions to interact with the SEC EDGAR MCP server (via HTTP JSON-RPC)

const MCP_SERVER_URL = 'http://localhost:3333'; // TODO: make configurable

export async function getCompanySubmissions(cik: string) {
  const body = {
    jsonrpc: '2.0',
    method: 'get_submissions',
    params: { cik },
    id: 1,
  };

  const response = await fetch(MCP_SERVER_URL + '/rpc', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify(body),
  });

  if (!response.ok) {
    throw new Error(`EDGAR MCP server error: ${response.status}`);
  }

  const data = await response.json();
  if (data.error) {
    throw new Error(data.error.message || 'Unknown EDGAR MCP error');
  }
  return data.result;
}

// TODO: Add more functions (get_company_facts, get_company_concepts, etc.) as needed.
</file>

<file path="src/pages/Auth.tsx">
import { useState, useEffect } from "react";
import { Navigate, useNavigate } from "react-router-dom";
import { supabase } from "@/integrations/supabase/client";
import { toast } from "@/hooks/use-toast";
import { motion } from "framer-motion";
import { Check, Loader, Mail, User, Lock, CreditCard } from "lucide-react";

type AuthMode = "signIn" | "signUp" | "magicLink" | "checkEmail" | "trialOffer";

// Helper function to clean up auth state
const cleanupAuthState = () => {
  localStorage.removeItem('supabase.auth.token');
  // Remove all Supabase auth keys from localStorage
  Object.keys(localStorage).forEach((key) => {
    if (key.startsWith('supabase.auth.') || key.includes('sb-')) {
      localStorage.removeItem(key);
    }
  });
  // Remove from sessionStorage if in use
  Object.keys(sessionStorage || {}).forEach((key) => {
    if (key.startsWith('supabase.auth.') || key.includes('sb-')) {
      sessionStorage.removeItem(key);
    }
  });
};

// Helper function to send webhook on signup
const sendSignupWebhook = async (email: string) => {
  try {
    // Extract name from email (before @ symbol)
    const name = email.split('@')[0];
    
    // Get IP address (basic implementation)
    let ip_address = '';
    try {
      const ipResponse = await fetch('https://api.ipify.org?format=json');
      const ipData = await ipResponse.json();
      ip_address = ipData.ip;
    } catch (ipError) {
      console.log('Could not get IP address:', ipError);
    }

    const { error } = await supabase.functions.invoke('send-signup-webhook', {
      body: {
        email,
        name,
        ip_address
      },
    });

    if (error) {
      console.error('Webhook error:', error);
    } else {
      console.log('Signup webhook sent successfully');
    }
  } catch (error) {
    console.error('Error sending signup webhook:', error);
  }
};

export default function Auth() {
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const [loading, setLoading] = useState(false);
  const [success, setSuccess] = useState(false);
  const [mode, setMode] = useState<AuthMode>("signIn");
  const [session, setSession] = useState<any>(null);
  const [authLoading, setAuthLoading] = useState(true);
  const navigate = useNavigate();

  useEffect(() => {
    let mounted = true;

    const checkSession = async () => {
      try {
        const { data: { session }, error } = await supabase.auth.getSession();
        if (error) {
          console.error('Session check error:', error);
          cleanupAuthState();
        }
        if (mounted) {
          setSession(session);
          setAuthLoading(false);
        }
      } catch (error) {
        console.error('Session check failed:', error);
        if (mounted) {
          cleanupAuthState();
          setSession(null);
          setAuthLoading(false);
        }
      }
    };

    checkSession();

    const { data: { subscription } } = supabase.auth.onAuthStateChange(
      async (event, session) => {
        console.log('Auth state changed:', event, session?.user?.id);
        
        if (mounted) {
          setSession(session);
          setAuthLoading(false);
          
          // Handle successful sign in
          if (event === 'SIGNED_IN' && session) {
            // Use setTimeout to avoid potential conflicts
            setTimeout(() => {
              window.location.href = '/';
            }, 100);
          }
          
          // Handle sign out
          if (event === 'SIGNED_OUT') {
            cleanupAuthState();
            setSession(null);
          }
        }
      }
    );

    return () => {
      mounted = false;
      subscription.unsubscribe();
    };
  }, []);

  // Show loading while checking auth state
  if (authLoading) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <Loader className="h-8 w-8 animate-spin" />
      </div>
    );
  }

  // Redirect if logged in
  if (session) {
    return <Navigate to="/" replace />;
  }

  const handleEmailAuth = async (e: React.FormEvent) => {
    e.preventDefault();
    setLoading(true);
    
    try {
      // Clean up existing auth state first
      cleanupAuthState();
      
      // Attempt global sign out first (to clear any existing sessions)
      try {
        await supabase.auth.signOut({ scope: 'global' });
        // Wait a moment for cleanup
        await new Promise(resolve => setTimeout(resolve, 500));
      } catch (err) {
        console.log('Sign out during cleanup failed (this is normal):', err);
      }
      
      if (mode === "magicLink") {
        const { error } = await supabase.auth.signInWithOtp({
          email,
          options: {
            emailRedirectTo: window.location.origin,
          },
        });
        
        if (error) throw error;
        
        setMode("checkEmail");
        setSuccess(true);
      } else if (mode === "signIn") {
        const { data, error } = await supabase.auth.signInWithPassword({
          email,
          password,
        });
        
        if (error) throw error;
        
        if (data.user) {
          // Force page reload for a clean state
          setTimeout(() => {
            window.location.href = '/';
          }, 100);
        }
      } else if (mode === "signUp") {
        const { data, error } = await supabase.auth.signUp({
          email,
          password,
          options: {
            emailRedirectTo: window.location.origin,
          }
        });
        
        if (error) throw error;
        
        // Send webhook after successful signup
        await sendSignupWebhook(email);
        
        // If user is immediately confirmed, redirect
        if (data.user && !data.user.email_confirmed_at) {
          setMode("checkEmail");
        } else if (data.user && data.user.email_confirmed_at) {
          setTimeout(() => {
            window.location.href = '/';
          }, 100);
        }
      }
    } catch (error: any) {
      console.error('Auth error:', error);
      toast({
        title: "Error",
        description: error.message || "Authentication failed",
        variant: "destructive",
      });
    } finally {
      setLoading(false);
    }
  };

  const handleGoogleSignIn = async () => {
    setLoading(true);
    try {
      // Clean up existing auth state first
      cleanupAuthState();
      
      // Attempt global sign out first
      try {
        await supabase.auth.signOut({ scope: 'global' });
        await new Promise(resolve => setTimeout(resolve, 500));
      } catch (err) {
        console.log('Sign out during cleanup failed (this is normal):', err);
      }
      
      const { error } = await supabase.auth.signInWithOAuth({
        provider: "google",
        options: {
          redirectTo: window.location.origin,
        },
      });
      
      if (error) throw error;
    } catch (error: any) {
      console.error('Google auth error:', error);
      toast({
        title: "Error",
        description: error.message || "Google authentication failed",
        variant: "destructive",
      });
    } finally {
      setLoading(false);
    }
  };

  const startFreeTrial = () => {
    // In a real app, this would initiate the payment flow
    // For now, just navigate to the dashboard
    navigate("/dashboard");
  };

  // Sign In and Sign Up Forms
  if (mode === "signIn" || mode === "signUp" || mode === "magicLink") {
    return (
      <div className="relative flex min-h-screen flex-col">
        {/* Background blur gradient */}
        <div className="absolute inset-0 bg-gradient-to-br from-background/80 to-background dark:from-background/95 dark:to-background z-[-1]" />
        <div className="absolute inset-0 bg-[radial-gradient(ellipse_at_center,_var(--tw-gradient-stops))] from-primary/10 via-transparent to-transparent dark:from-primary/5 z-[-1]" />
        
        <main className="flex-1 container px-4 sm:px-6 flex flex-col items-center justify-center">
          <motion.div 
            initial={{ opacity: 0, scale: 0.95 }}
            animate={{ opacity: 1, scale: 1 }}
            transition={{ duration: 0.3, ease: "easeOut" }}
            className="w-full max-w-md p-8 rounded-xl backdrop-blur-md bg-card/80 dark:bg-card/30 border border-border/50 shadow-lg"
          >
            {/* Local 825 Logo */}
            <div className="flex justify-center mb-6">
              <img 
                src="https://www.iuoe825.org/wp-content/uploads/2016/03/825_2_120x120.png" 
                alt="Local 825" 
                className="w-16 h-16"
              />
            </div>

            <h2 className="text-3xl font-bold text-left mb-2 bg-clip-text text-transparent bg-gradient-to-r from-foreground to-foreground/80">
              {mode === "signIn" ? "Welcome back" : mode === "signUp" ? "Create account" : "Magic link"}
            </h2>
            
            <p className="text-left mb-6 text-muted-foreground">
              {mode === "signIn" ? "Sign in to use Bulldozer" : 
               mode === "signUp" ? "Sign up to get starte" : 
               "Get a secure login link sent to your email"}
            </p>
            
            <form onSubmit={handleEmailAuth} className="space-y-4">
              <div className="space-y-2">
                <div className="relative">
                  <User className="absolute left-3 top-1/2 -translate-y-1/2 text-muted-foreground h-4 w-4" />
                  <input
                    type="email"
                    value={email}
                    onChange={(e) => setEmail(e.target.value)}
                    placeholder="Email address"
                    required
                    className="flex h-10 w-full rounded-md pl-10 pr-3 py-2 bg-secondary/50 dark:bg-secondary/30 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2"
                  />
                </div>
              </div>
              
              {mode !== "magicLink" && (
                <div className="space-y-2">
                  <div className="relative">
                    <Lock className="absolute left-3 top-1/2 -translate-y-1/2 text-muted-foreground h-4 w-4" />
                    <input
                      type="password"
                      value={password}
                      onChange={(e) => setPassword(e.target.value)}
                      placeholder="Password"
                      required
                      className="flex h-10 w-full rounded-md pl-10 pr-3 py-2 bg-secondary/50 dark:bg-secondary/30 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2"
                    />
                  </div>
                </div>
              )}
              
              <button 
                type="submit" 
                disabled={loading}
                className={`w-full flex items-center justify-center h-10 rounded-md px-4 py-2 text-sm font-medium transition-all duration-300 ${
                  loading ? 
                    'bg-primary/80 text-primary-foreground cursor-not-allowed' : 
                    success ? 
                      'bg-green-500 text-white hover:bg-green-600' :
                      'bg-primary text-primary-foreground hover:bg-primary/90'
                }`}
              >
                {loading ? (
                  <Loader className="h-4 w-4 animate-spin" />
                ) : success ? (
                  <Check className="h-4 w-4" />
                ) : (
                  <>
                    {mode === "signIn" ? "Sign In" : 
                     mode === "signUp" ? "Sign Up" :
                     "Send Magic Link"}
                  </>
                )}
              </button>
            </form>
            
            <div className="mt-6">
              <div className="relative">
                <div className="absolute inset-0 flex items-center">
                  <div className="w-full border-t border-gray-300 dark:border-gray-700"></div>
                </div>
                <div className="relative flex justify-center text-xs">
                  <span className="px-2 bg-card/80 dark:bg-card/30 text-muted-foreground">
                    Or continue with
                  </span>
                </div>
              </div>
              
              <button 
                onClick={handleGoogleSignIn} 
                disabled={loading}
                className="w-full mt-4 flex items-center justify-center h-10 rounded-md px-4 py-2 text-sm font-medium border border-border bg-transparent hover:bg-secondary/50 transition-colors"
              >
                <svg viewBox="0 0 24 24" className="h-5 w-5 mr-2" aria-hidden="true">
                  <path
                    d="M12.0003 4.75C13.7703 4.75 15.3553 5.36002 16.6053 6.54998L20.0303 3.125C17.9502 1.19 15.2353 0 12.0003 0C7.31028 0 3.25527 2.69 1.28027 6.60998L5.27028 9.70498C6.21525 6.86002 8.87028 4.75 12.0003 4.75Z"
                    fill="#EA4335"
                  />
                  <path
                    d="M23.49 12.275C23.49 11.49 23.415 10.73 23.3 10H12V14.51H18.47C18.18 15.99 17.34 17.25 16.08 18.08L19.945 21.1C22.2 19.01 23.49 15.92 23.49 12.275Z"
                    fill="#4285F4"
                  />
                  <path
                    d="M5.26498 14.2949C5.02498 13.5699 4.88501 12.7999 4.88501 11.9999C4.88501 11.1999 5.01998 10.4299 5.26498 9.7049L1.275 6.60986C0.46 8.22986 0 10.0599 0 11.9999C0 13.9399 0.46 15.7699 1.28 17.3899L5.26498 14.2949Z"
                    fill="#FBBC05"
                  />
                  <path
                    d="M12.0004 24.0001C15.2404 24.0001 17.9654 22.935 19.9454 21.095L16.0804 18.075C15.0054 18.675 13.6204 19.0051 12.0004 19.0051C8.8704 19.0051 6.21537 16.8901 5.26540 14.0451L1.27539 17.14C3.25539 21.0601 7.31040 24.0001 12.0004 24.0001Z"
                    fill="#34A853"
                  />
                </svg>
                Google
              </button>
            </div>
            
            <div className="mt-6 text-center text-xs">
              {mode === "signIn" ? (
                <>
                  <button 
                    type="button"
                    onClick={() => setMode("signUp")}
                    className="text-primary hover:underline"
                  >
                    Create an account
                  </button>
                  {" · "}
                  <button 
                    type="button"
                    onClick={() => navigate("/local-825-signup")}
                    className="text-primary hover:underline font-medium"
                  >
                    Local 825 Sign up
                  </button>
                  {" · "}
                  <button 
                    type="button"
                    onClick={() => setMode("magicLink")}
                    className="text-primary hover:underline"
                  >
                    Use magic link
                  </button>
                </>
              ) : mode === "signUp" ? (
                <>
                  <button 
                    type="button"
                    onClick={() => setMode("signIn")}
                    className="text-primary hover:underline"
                  >
                    Sign in instead
                  </button>
                  {" · "}
                  <button 
                    type="button"
                    onClick={() => navigate("/local-825-signup")}
                    className="text-primary hover:underline font-medium"
                  >
                    Local 825 Sign up
                  </button>
                  {" · "}
                  <button 
                    type="button"
                    onClick={() => setMode("magicLink")}
                    className="text-primary hover:underline"
                  >
                    Use magic link
                  </button>
                </>
              ) : (
                <>
                  <button 
                    type="button"
                    onClick={() => setMode("signIn")}
                    className="text-primary hover:underline"
                  >
                    Sign in with password
                  </button>
                  {" · "}
                  <button 
                    type="button"
                    onClick={() => setMode("signUp")}
                    className="text-primary hover:underline"
                  >
                    Create an account
                  </button>
                  {" · "}
                  <button 
                    type="button"
                    onClick={() => navigate("/local-825-signup")}
                    className="text-primary hover:underline font-medium"
                  >
                    Local 825 Sign up
                  </button>
                </>
              )}
            </div>
          </motion.div>
        </main>
        
        <footer className="text-center py-6 text-xs text-muted-foreground">
          <p>By continuing, you agree to DataPilot+'s Terms of Service</p>
          <p className="mt-1">© 2025 DataPilot+. Built for Local 825.</p>
        </footer>
      </div>
    );
  }

  // Check Email Confirmation Screen
  if (mode === "checkEmail") {
    return (
      <div className="relative flex min-h-screen flex-col">
        {/* Background blur gradient */}
        <div className="absolute inset-0 bg-gradient-to-br from-background/80 to-background dark:from-background/95 dark:to-background z-[-1]" />
        <div className="absolute inset-0 bg-[radial-gradient(ellipse_at_center,_var(--tw-gradient-stops))] from-primary/10 via-transparent to-transparent dark:from-primary/5 z-[-1]" />
        
        <main className="flex-1 container px-4 sm:px-6 flex flex-col items-center justify-center">
          <motion.div 
            initial={{ opacity: 0, scale: 0.95 }}
            animate={{ opacity: 1, scale: 1 }}
            transition={{ duration: 0.3 }}
            className="w-full max-w-md p-8 rounded-xl backdrop-blur-md bg-card/80 dark:bg-card/30 border border-border/50 shadow-lg"
          >
            {/* Local 825 Logo */}
            <div className="flex justify-center mb-6">
              <img 
                src="https://www.iuoe825.org/wp-content/uploads/2016/03/825_2_120x120.png" 
                alt="Local 825" 
                className="w-16 h-16"
              />
            </div>

            <div className="flex justify-center">
              <div className="h-16 w-16 rounded-full flex items-center justify-center bg-primary/10 dark:bg-primary/20 mb-6">
                <Mail className="h-8 w-8 text-primary" />
              </div>
            </div>

            <h2 className="text-3xl font-bold text-left mb-3 bg-clip-text text-transparent bg-gradient-to-r from-foreground to-foreground/80">
              Check your inbox
            </h2>
            
            <p className="text-left mb-6 text-muted-foreground">
              We've sent you a secure login link. Please check your email to authenticate your account.
            </p>
            
            <div className="mt-4 p-3 bg-secondary/40 dark:bg-secondary/20 rounded-md border border-border/30 flex items-center">
              <div className="bg-green-500/20 dark:bg-green-500/10 p-1 rounded-full mr-3">
                <Check className="h-4 w-4 text-green-500" />
              </div>
              <span className="text-sm">{email}</span>
            </div>
            
            <div className="mt-6">
              <button 
                onClick={() => setMode("signIn")}
                className="w-full flex justify-center items-center h-10 rounded-md bg-secondary dark:bg-secondary/50 hover:bg-secondary/70 dark:hover:bg-secondary/70 text-sm font-medium transition-colors"
              >
                Back to Sign In
              </button>
            </div>
          </motion.div>
        </main>
        
        <footer className="text-center py-6 text-xs text-muted-foreground">
          <p>By continuing, you agree to DataPilot+'s Terms of Service</p>
          <p className="mt-1">© 2025 DataPilot+. Built for Local 825.</p>
        </footer>
      </div>
    );
  }

  // Trial Offer Screen
  if (mode === "trialOffer") {
    return (
      <div className="relative flex min-h-screen flex-col">
        {/* Background blur gradient */}
        <div className="absolute inset-0 bg-gradient-to-br from-background/80 to-background dark:from-background/95 dark:to-background z-[-1]" />
        <div className="absolute inset-0 bg-[radial-gradient(ellipse_at_center,_var(--tw-gradient-stops))] from-primary/10 via-transparent to-transparent dark:from-primary/5 z-[-1]" />
        
        <main className="flex-1 container px-4 sm:px-6 flex flex-col items-center justify-center">
          <motion.div 
            initial={{ opacity: 0, scale: 0.95 }}
            animate={{ opacity: 1, scale: 1 }}
            transition={{ duration: 0.3 }}
            className="w-full max-w-md p-8 rounded-xl backdrop-blur-md bg-card/80 dark:bg-card/30 border border-border/50 shadow-lg"
          >
            <h2 className="text-3xl font-bold text-left mb-2 bg-clip-text text-transparent bg-gradient-to-r from-foreground to-foreground/80">
              Secure your trial access
            </h2>
            
            <p className="text-left mb-8 text-muted-foreground">
              Your payment will only be processed after your 7-day free trial.
              For peace of mind, we will remind you 24 hours in advance.
            </p>
            
            <div className="grid gap-4">
              <div className="p-4 border border-primary/20 rounded-lg bg-secondary/20 dark:bg-secondary/10">
                <div className="flex items-start justify-between">
                  <div>
                    <h3 className="text-lg font-medium">Union+ Plan</h3>
                    <p className="text-sm text-muted-foreground">$30/month after 7 days</p>
                  </div>
                  <div className="h-6 w-6 rounded-full border border-primary flex items-center justify-center">
                    <Check className="h-3 w-3 text-primary" />
                  </div>
                </div>
                
                <div className="mt-4 space-y-2">
                  <div className="flex items-center">
                    <Check className="h-4 w-4 mr-2 text-green-500" />
                    <span className="text-sm">Lower usage costs</span>
                  </div>
                  <div className="flex items-center">
                    <Check className="h-4 w-4 mr-2 text-green-500" />
                    <span className="text-sm">Faster AI models</span>
                  </div>
                  <div className="flex items-center">
                    <Check className="h-4 w-4 mr-2 text-green-500" />
                    <span className="text-sm">Early access to new features</span>
                  </div>
                </div>
              </div>
              
              <div className="space-y-4">
                <div className="relative">
                  <CreditCard className="absolute left-3 top-1/2 -translate-y-1/2 text-muted-foreground h-4 w-4" />
                  <input
                    type="text"
                    placeholder="Card number"
                    className="flex h-10 w-full rounded-md pl-10 pr-3 py-2 bg-secondary/50 dark:bg-secondary/30 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2"
                  />
                </div>
                
                <div className="grid grid-cols-2 gap-4">
                  <input
                    type="text"
                    placeholder="MM / YY"
                    className="flex h-10 rounded-md px-3 py-2 bg-secondary/50 dark:bg-secondary/30 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2"
                  />
                  <input
                    type="text"
                    placeholder="CVC"
                    className="flex h-10 rounded-md px-3 py-2 bg-secondary/50 dark:bg-secondary/30 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2"
                  />
                </div>
                
                <input
                  type="text"
                  placeholder="Cardholder name"
                  className="flex h-10 w-full rounded-md px-3 py-2 bg-secondary/50 dark:bg-secondary/30 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2"
                />
              </div>
              
              <button 
                onClick={startFreeTrial}
                className="w-full flex justify-center items-center h-10 rounded-md bg-primary text-primary-foreground hover:bg-primary/90 text-sm font-medium transition-colors"
              >
                Start your free trial
              </button>
              
              <p className="text-xs text-center text-muted-foreground mt-2">
                No charges will be made until your trial expires, and you can cancel at any time.
              </p>
            </div>
            
            <div className="mt-6 text-center">
              <button
                onClick={() => navigate("/")} 
                className="text-xs text-primary hover:underline"
              >
                Skip for now and continue with free plan
              </button>
            </div>
          </motion.div>
        </main>
        
        <footer className="text-center py-6 text-xs text-muted-foreground">
          <p>By continuing, you agree to DataPilot+'s Terms of Service</p>
          <p className="mt-1">© 2025 DataPilot+. Built for Local 825.</p>
        </footer>
      </div>
    );
  }

  return null;
}
</file>

<file path="src/pages/CompanyProfile.tsx">
import { useState, useEffect } from "react";
import { useParams, useNavigate } from "react-router-dom";
import { useAuth } from "@/contexts/AuthContext";
import { useCompanyResearch, CompanyResearch } from "@/hooks/useCompanyResearch";
import NavBar from "@/components/NavBar";
import { Card, CardHeader, CardTitle, CardContent } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Separator } from "@/components/ui/separator";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { 
  ArrowLeft, 
  Building2, 
  Globe, 
  MapPin, 
  Users, 
  DollarSign,
  AlertTriangle,
  TrendingUp,
  Shield,
  Briefcase,
  Target,
  FileText,
  Calendar,
  ExternalLink,
  Download,
  RefreshCw
} from "lucide-react";
import { motion } from "framer-motion";
import { toast } from "sonner";

// Component imports for different sections
import ExecutiveSummarySection from "@/components/company-profile/ExecutiveSummarySection";
import CorporateStructureSection from "@/components/company-profile/CorporateStructureSection";
import LeadershipSection from "@/components/company-profile/LeadershipSection";
import WorkforceAnalysisSection from "@/components/company-profile/WorkforceAnalysisSection";
import LaborRelationsSection from "@/components/company-profile/LaborRelationsSection";
import SafetyComplianceSection from "@/components/company-profile/SafetyComplianceSection";
import FinancialProfileSection from "@/components/company-profile/FinancialProfileSection";
import OrganizingStrategySection from "@/components/company-profile/OrganizingStrategySection";

export default function CompanyProfile() {
  const { user } = useAuth();
  const navigate = useNavigate();
  const { id } = useParams<{ id: string }>();
  const { getResearchById, generateResearch, generating } = useCompanyResearch();
  
  const [company, setCompany] = useState<CompanyResearch | null>(null);
  const [loading, setLoading] = useState(true);
  const [activeTab, setActiveTab] = useState("overview");

  useEffect(() => {
    if (id && user) {
      fetchCompanyProfile();
    }
  }, [id, user]);

  const fetchCompanyProfile = async () => {
    if (!id) return;
    
    setLoading(true);
    try {
      const data = await getResearchById(id);
      if (data) {
        setCompany(data);
      } else {
        toast.error('Company profile not found');
        navigate('/company-reports');
      }
    } catch (error) {
      console.error('Error fetching company profile:', error);
      toast.error('Failed to load company profile');
    } finally {
      setLoading(false);
    }
  };

  const handleRegenerateResearch = async () => {
    if (!company) return;
    
    const result = await generateResearch(company.company_name);
    if (result) {
      setCompany(result);
      toast.success('Company profile regenerated');
    }
  };

  const getPriorityColor = (priority: string) => {
    switch (priority?.toLowerCase()) {
      case 'high': return 'bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200';
      case 'medium': return 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200';
      case 'low': return 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200';
      default: return 'bg-gray-100 text-gray-800 dark:bg-gray-900 dark:text-gray-200';
    }
  };

  const getUnionStatusColor = (status: string) => {
    switch (status?.toLowerCase()) {
      case 'union': return 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200';
      case 'partial-union': return 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200';
      case 'non-union': return 'bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200';
      default: return 'bg-gray-100 text-gray-800 dark:bg-gray-900 dark:text-gray-200';
    }
  };

  if (!user) {
    navigate('/auth');
    return null;
  }

  if (loading) {
    return (
      <div className="min-h-screen bg-gray-50 dark:bg-gray-900">
        <NavBar />
        <div className="flex items-center justify-center py-12">
          <RefreshCw className="h-8 w-8 animate-spin text-gray-400" />
          <span className="ml-2 text-gray-600 dark:text-gray-400">Loading company profile...</span>
        </div>
      </div>
    );
  }

  if (!company) {
    return (
      <div className="min-h-screen bg-gray-50 dark:bg-gray-900">
        <NavBar />
        <div className="container mx-auto px-4 py-8">
          <div className="text-center">
            <h1 className="text-2xl font-bold text-gray-900 dark:text-gray-100 mb-4">
              Company Profile Not Found
            </h1>
            <Button onClick={() => navigate('/company-reports')}>
              <ArrowLeft className="h-4 w-4 mr-2" />
              Back to Company Reports
            </Button>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50 dark:bg-gray-900">
      <NavBar />
      
      <main className="container mx-auto px-4 py-8 max-w-7xl">
        {/* Header */}
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.5 }}
          className="mb-8"
        >
          <div className="flex items-center gap-4 mb-6">
            <Button
              variant="outline"
              onClick={() => navigate('/company-reports')}
              className="print:hidden"
            >
              <ArrowLeft className="h-4 w-4 mr-2" />
              Back to Reports
            </Button>
            <div className="flex items-center gap-3 print:hidden">
              <Button variant="outline" onClick={handleRegenerateResearch} disabled={generating}>
                {generating ? (
                  <RefreshCw className="h-4 w-4 mr-2 animate-spin" />
                ) : (
                  <RefreshCw className="h-4 w-4 mr-2" />
                )}
                Update Profile
              </Button>
              <Button variant="outline">
                <Download className="h-4 w-4 mr-2" />
                Export PDF
              </Button>
            </div>
          </div>

          {/* Company Header Card */}
          <Card className="border-0 shadow-lg bg-gradient-to-r from-blue-50 to-indigo-50 dark:from-blue-950 dark:to-indigo-950">
            <CardContent className="p-8">
              <div className="flex items-start justify-between">
                <div className="flex items-start gap-6">
                  {company.logo_url && (
                    <div className="flex-shrink-0">
                      <img 
                        src={company.logo_url} 
                        alt={`${company.company_name} logo`}
                        className="w-20 h-20 object-contain rounded-lg bg-white p-2 shadow-sm"
                      />
                    </div>
                  )}
                  <div className="flex-1">
                    <h1 className="text-4xl font-bold text-gray-900 dark:text-gray-100 mb-2">
                      {company.company_name}
                    </h1>
                    <p className="text-lg text-gray-600 dark:text-gray-400 mb-4">
                      {company.industry_sector || 'Construction Industry'}
                    </p>
                    <div className="flex items-center gap-6 text-sm text-gray-600 dark:text-gray-400">
                      {company.headquarters_location && (
                        <div className="flex items-center gap-1">
                          <MapPin className="h-4 w-4" />
                          {company.headquarters_location}
                        </div>
                      )}
                      {company.employee_count && (
                        <div className="flex items-center gap-1">
                          <Users className="h-4 w-4" />
                          {company.employee_count.toLocaleString()} employees
                        </div>
                      )}
                      {company.company_website && (
                        <a 
                          href={company.company_website} 
                          target="_blank" 
                          rel="noopener noreferrer"
                          className="flex items-center gap-1 hover:text-blue-600"
                        >
                          <Globe className="h-4 w-4" />
                          Website
                          <ExternalLink className="h-3 w-3" />
                        </a>
                      )}
                    </div>
                  </div>
                </div>
                <div className="flex flex-col gap-3 items-end">
                  <Badge className={getPriorityColor(company.organizing_priority || 'medium')}>
                    {company.organizing_priority?.toUpperCase() || 'MEDIUM'} Priority
                  </Badge>
                  <Badge className={getUnionStatusColor(company.union_status || 'non-union')}>
                    {company.union_status?.replace('-', ' ').toUpperCase() || 'NON-UNION'}
                  </Badge>
                  {company.last_research_update && (
                    <div className="text-xs text-gray-500 flex items-center gap-1">
                      <Calendar className="h-3 w-3" />
                      Updated {new Date(company.last_research_update).toLocaleDateString()}
                    </div>
                  )}
                </div>
              </div>
            </CardContent>
          </Card>
        </motion.div>

        {/* Main Content Tabs */}
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.5, delay: 0.2 }}
        >
          <Tabs value={activeTab} onValueChange={setActiveTab} className="space-y-6">
            <TabsList className="grid w-full grid-cols-8 lg:grid-cols-8">
              <TabsTrigger value="overview" className="flex items-center gap-2">
                <Building2 className="h-4 w-4" />
                Overview
              </TabsTrigger>
              <TabsTrigger value="structure" className="flex items-center gap-2">
                <Briefcase className="h-4 w-4" />
                Structure
              </TabsTrigger>
              <TabsTrigger value="leadership" className="flex items-center gap-2">
                <Users className="h-4 w-4" />
                Leadership
              </TabsTrigger>
              <TabsTrigger value="workforce" className="flex items-center gap-2">
                <Users className="h-4 w-4" />
                Workforce
              </TabsTrigger>
              <TabsTrigger value="labor" className="flex items-center gap-2">
                <Shield className="h-4 w-4" />
                Labor Relations
              </TabsTrigger>
              <TabsTrigger value="safety" className="flex items-center gap-2">
                <AlertTriangle className="h-4 w-4" />
                Safety
              </TabsTrigger>
              <TabsTrigger value="financial" className="flex items-center gap-2">
                <DollarSign className="h-4 w-4" />
                Financial
              </TabsTrigger>
              <TabsTrigger value="strategy" className="flex items-center gap-2">
                <Target className="h-4 w-4" />
                Strategy
              </TabsTrigger>
            </TabsList>

            <TabsContent value="overview">
              <ExecutiveSummarySection company={company} />
            </TabsContent>

            <TabsContent value="structure">
              <CorporateStructureSection company={company} />
            </TabsContent>

            <TabsContent value="leadership">
              <LeadershipSection company={company} />
            </TabsContent>

            <TabsContent value="workforce">
              <WorkforceAnalysisSection company={company} />
            </TabsContent>

            <TabsContent value="labor">
              <LaborRelationsSection company={company} />
            </TabsContent>

            <TabsContent value="safety">
              <SafetyComplianceSection company={company} />
            </TabsContent>

            <TabsContent value="financial">
              <FinancialProfileSection company={company} />
            </TabsContent>

            <TabsContent value="strategy">
              <OrganizingStrategySection company={company} />
            </TabsContent>
          </Tabs>
        </motion.div>
      </main>

      {/* Footer */}
      <footer className="text-center py-6 text-sm text-muted-foreground print:hidden">
        © 2025 DataPilot+. Built for union intelligence.
      </footer>
    </div>
  );
}
</file>

<file path="src/pages/DailyJobsReport.tsx">
import React, { useState, useEffect } from "react";
import { useAuth } from "@/contexts/AuthContext";
import { useNavigate } from "react-router-dom";
import NavBar from "@/components/NavBar";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Briefcase, MapPin, Calendar, ExternalLink, RefreshCw, TrendingUp, Building, Filter, ArrowUpDown } from "lucide-react";
import { useJobsScraper } from "@/hooks/useJobsScraper";
import LoadingState from "@/components/feed/LoadingState";

export default function DailyJobsReport() {
  const { user } = useAuth();
  const navigate = useNavigate();
  const [currentPage, setCurrentPage] = useState(1);
  const [sortBy, setSortBy] = useState<'date' | 'priority' | 'title'>('date');
  const [filterPriority, setFilterPriority] = useState<'all' | 'high' | 'medium'>('all');
  const [showLowPriority, setShowLowPriority] = useState(false);
  
  const { 
    jobs, 
    totalCount,
    totalPages,
    isLoadingJobs, 
    isProcessing, 
    triggerJobScraping, 
    refetchJobs 
  } = useJobsScraper(currentPage);

  useEffect(() => {
    if (!user) {
      navigate("/auth");
      return;
    }
    
    // Auto-sync and analyze on page load
    const initializeData = async () => {
      console.log('Initializing jobs data...');
      await triggerJobScraping();
      await refetchJobs();
    };
    
    initializeData();
  }, [user, navigate]);

  const handleRefresh = async () => {
    await triggerJobScraping();
    await refetchJobs();
  };

  const handlePageChange = (page: number) => {
    setCurrentPage(page);
    window.scrollTo({ top: 0, behavior: 'smooth' });
  };

  // Filter and sort jobs
  const filteredAndSortedJobs = jobs
    .filter(job => {
      // Filter out low priority jobs unless explicitly shown
      if (!showLowPriority && job.priority === 'low') return false;
      
      // Apply priority filter
      if (filterPriority !== 'all' && job.priority !== filterPriority) return false;
      
      return true;
    })
    .sort((a, b) => {
      switch (sortBy) {
        case 'date':
          return new Date(b.scraped_at).getTime() - new Date(a.scraped_at).getTime();
        case 'priority':
          const priorityOrder = { high: 3, medium: 2, low: 1 };
          return priorityOrder[b.priority as keyof typeof priorityOrder] - priorityOrder[a.priority as keyof typeof priorityOrder];
        case 'title':
          return a.title.localeCompare(b.title);
        default:
          return 0;
      }
    });

  if (isLoadingJobs && jobs.length === 0) {
    return (
      <div className="min-h-screen flex flex-col bg-gradient-to-br from-background to-secondary/20">
        <NavBar />
        <main className="flex-1 container max-w-6xl mx-auto px-3 sm:px-4 lg:px-6 py-4 sm:py-8">
          <LoadingState />
        </main>
      </div>
    );
  }

  return (
    <div className="min-h-screen flex flex-col bg-gradient-to-br from-background to-secondary/20">
      <NavBar />
      
      <main className="flex-1 container max-w-6xl mx-auto px-3 sm:px-4 lg:px-6 py-4 sm:py-8 overflow-auto">
        <div className="space-y-3 sm:space-y-4">
          {/* Mobile-optimized header */}
          <div className="text-left">
            <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-2 sm:gap-0">
              <div className="min-w-0 flex-1">
                <h1 className="text-lg sm:text-xl lg:text-2xl font-bold tracking-tight text-gray-900 dark:text-gray-100 leading-tight truncate text-left">
                  Local 825 Job Intelligence
                </h1>
                <p className="text-xs sm:text-sm text-muted-foreground mt-0.5 sm:mt-1 leading-snug text-left">
                  AI-analyzed construction opportunities for union members
                </p>
              </div>
              <Button 
                onClick={handleRefresh}
                disabled={isProcessing}
                size="sm"
                className="text-xs px-3 py-1.5 h-7 sm:h-8 rounded-lg sm:rounded-xl bg-primary hover:bg-primary/90 self-center sm:self-auto flex-shrink-0"
              >
                <RefreshCw className={`h-3 w-3 mr-1.5 ${isProcessing ? 'animate-spin' : ''}`} />
                <span className="whitespace-nowrap">{isProcessing ? 'Syncing...' : 'Refresh Jobs'}</span>
              </Button>
            </div>
          </div>

          {/* Mobile-optimized stats */}
          <div className="grid grid-cols-3 gap-2 sm:gap-3">
            <Card className="glass border-0 sm:border">
              <CardHeader className="pb-1.5 sm:pb-2">
                <div className="flex items-center justify-between">
                  <CardTitle className="text-xs font-medium text-gray-900 dark:text-gray-100 truncate">
                    Total Jobs
                  </CardTitle>
                  <Briefcase className="h-3 w-3 text-primary flex-shrink-0" />
                </div>
              </CardHeader>
              <CardContent className="pt-0">
                <div className="text-base sm:text-lg font-bold text-primary">{totalCount}</div>
              </CardContent>
            </Card>

            <Card className="glass border-0 sm:border">
              <CardHeader className="pb-1.5 sm:pb-2">
                <div className="flex items-center justify-between">
                  <CardTitle className="text-xs font-medium text-gray-900 dark:text-gray-100 truncate">
                    High Priority
                  </CardTitle>
                  <TrendingUp className="h-3 w-3 text-orange-500 flex-shrink-0" />
                </div>
              </CardHeader>
              <CardContent className="pt-0">
                <div className="text-base sm:text-lg font-bold text-orange-500">
                  {jobs.filter(job => job.priority === 'high').length}
                </div>
              </CardContent>
            </Card>

            <Card className="glass border-0 sm:border">
              <CardHeader className="pb-1.5 sm:pb-2">
                <div className="flex items-center justify-between">
                  <CardTitle className="text-xs font-medium text-gray-900 dark:text-gray-100 truncate">
                    Companies
                  </CardTitle>
                  <Building className="h-3 w-3 text-blue-500 flex-shrink-0" />
                </div>
              </CardHeader>
              <CardContent className="pt-0">
                <div className="text-base sm:text-lg font-bold text-blue-500">
                  {new Set(jobs.map(job => job.company).filter(Boolean)).size}
                </div>
              </CardContent>
            </Card>
          </div>

          {/* Filters and sorting - Mobile optimized */}
          <div className="flex flex-col sm:flex-row gap-2 sm:gap-3">
            <div className="flex flex-wrap gap-2 flex-1">
              <Button
                variant={sortBy === 'date' ? 'default' : 'outline'}
                size="sm"
                onClick={() => setSortBy('date')}
                className="text-xs px-2.5 py-1.5 h-7 rounded-lg"
              >
                <ArrowUpDown className="h-2.5 w-2.5 mr-1" />
                Date
              </Button>
              <Button
                variant={sortBy === 'priority' ? 'default' : 'outline'}
                size="sm"
                onClick={() => setSortBy('priority')}
                className="text-xs px-2.5 py-1.5 h-7 rounded-lg"
              >
                <ArrowUpDown className="h-2.5 w-2.5 mr-1" />
                Priority
              </Button>
              <Button
                variant={sortBy === 'title' ? 'default' : 'outline'}
                size="sm"
                onClick={() => setSortBy('title')}
                className="text-xs px-2.5 py-1.5 h-7 rounded-lg"
              >
                <ArrowUpDown className="h-2.5 w-2.5 mr-1" />
                Title
              </Button>
            </div>
            <div className="flex gap-2">
              <Button
                variant={filterPriority === 'all' ? 'default' : 'outline'}
                size="sm"
                onClick={() => setFilterPriority('all')}
                className="text-xs px-2.5 py-1.5 h-7 rounded-lg"
              >
                <Filter className="h-2.5 w-2.5 mr-1" />
                All
              </Button>
              <Button
                variant={filterPriority === 'high' ? 'default' : 'outline'}
                size="sm"
                onClick={() => setFilterPriority('high')}
                className="text-xs px-2.5 py-1.5 h-7 rounded-lg"
              >
                High
              </Button>
              <Button
                variant={filterPriority === 'medium' ? 'default' : 'outline'}
                size="sm"
                onClick={() => setFilterPriority('medium')}
                className="text-xs px-2.5 py-1.5 h-7 rounded-lg"
              >
                Medium
              </Button>
              <Button
                variant={showLowPriority ? 'default' : 'outline'}
                size="sm"
                onClick={() => setShowLowPriority(!showLowPriority)}
                className="text-xs px-2.5 py-1.5 h-7 rounded-lg"
              >
                Show Low
              </Button>
            </div>
          </div>

          {/* Mobile-optimized job listings */}
          <div className="space-y-2 sm:space-y-3">
            {filteredAndSortedJobs.map((job) => (
              <Card 
                key={job.id} 
                className="glass hover:shadow-md transition-all duration-200 cursor-pointer border-0 sm:border"
                onClick={() => navigate(`/job/${job.id}`)}
              >
                <CardHeader className="pb-2 sm:pb-3">
                  <div className="flex flex-col sm:flex-row sm:items-start sm:justify-between gap-1.5 sm:gap-3">
                    <div className="flex-1 min-w-0">
                      <CardTitle className="text-sm sm:text-base font-semibold text-gray-900 dark:text-gray-100 leading-tight line-clamp-2">
                        {job.title}
                      </CardTitle>
                      <div className="flex flex-wrap items-center gap-1 sm:gap-1.5 mt-1 sm:mt-1.5">
                        <span className="text-xs sm:text-sm font-medium text-primary truncate">
                          {job.company || 'Company TBD'}
                        </span>
                        {job.location && (
                          <>
                            <span className="text-xs text-muted-foreground">•</span>
                            <div className="flex items-center gap-0.5 sm:gap-1 min-w-0">
                              <MapPin className="h-2.5 w-2.5 sm:h-3 sm:w-3 text-muted-foreground flex-shrink-0" />
                              <span className="text-xs sm:text-sm text-muted-foreground truncate">
                                {job.location}
                              </span>
                            </div>
                          </>
                        )}
                      </div>
                    </div>
                    <div className="flex items-center gap-1.5 sm:gap-2 flex-shrink-0">
                      {job.priority && (
                        <Badge 
                          variant={
                            job.priority === 'high' ? "default" :
                            job.priority === 'medium' ? "secondary" : "outline"
                          }
                          className="text-xs px-1.5 py-0.5"
                        >
                          {job.priority}
                        </Badge>
                      )}
                      {job.is_processed && (
                        <Badge 
                          variant="secondary"
                          className="text-xs px-1.5 py-0.5 bg-green-100 text-green-700 hover:bg-green-200"
                        >
                          Analyzed
                        </Badge>
                      )}
                      <ExternalLink className="h-3 w-3 text-muted-foreground" />
                    </div>
                  </div>
                </CardHeader>
                <CardContent className="pt-0">
                  <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-1.5 sm:gap-0">
                    <div className="flex items-center gap-1 text-xs sm:text-sm text-muted-foreground">
                      <Calendar className="h-2.5 w-2.5 sm:h-3 sm:w-3 flex-shrink-0" />
                      {new Date(job.scraped_at).toLocaleDateString()}
                    </div>
                    {job.job_type && (
                      <div className="text-xs sm:text-sm text-muted-foreground">
                        <span className="font-medium capitalize">
                          {job.job_type.replace('_', ' ')}
                        </span>
                      </div>
                    )}
                  </div>
                  {job.insights && (
                    <div className="mt-2 text-xs text-muted-foreground line-clamp-2">
                      {job.insights}
                    </div>
                  )}
                </CardContent>
              </Card>
            ))}
          </div>

          {/* Show message if no jobs match filters */}
          {filteredAndSortedJobs.length === 0 && jobs.length > 0 && (
            <Card className="glass border-0 sm:border">
              <CardContent className="p-8 text-center">
                <p className="text-muted-foreground mb-4">No jobs match your current filters</p>
                <Button 
                  variant="outline" 
                  onClick={() => {
                    setFilterPriority('all');
                    setShowLowPriority(true);
                  }}
                  className="text-xs px-3 py-1.5 h-7 rounded-lg"
                >
                  Show All Jobs
                </Button>
              </CardContent>
            </Card>
          )}

          {/* Mobile-optimized pagination */}
          {totalPages > 1 && (
            <div className="flex flex-col sm:flex-row items-center justify-between gap-2 sm:gap-0 pt-3 sm:pt-4">
              <div className="text-xs sm:text-sm text-muted-foreground order-2 sm:order-1">
                Page {currentPage} of {totalPages} • Showing {filteredAndSortedJobs.length} of {totalCount} jobs
              </div>
              <div className="flex gap-2 order-1 sm:order-2">
                <Button
                  variant="outline"
                  size="sm"
                  onClick={() => handlePageChange(currentPage - 1)}
                  disabled={currentPage === 1}
                  className="text-xs px-2.5 py-1.5 h-7 sm:h-8 rounded-lg"
                >
                  Previous
                </Button>
                <Button
                  variant="outline"
                  size="sm"
                  onClick={() => handlePageChange(currentPage + 1)}
                  disabled={currentPage === totalPages}
                  className="text-xs px-2.5 py-1.5 h-7 sm:h-8 rounded-lg"
                >
                  Next
                </Button>
              </div>
            </div>
          )}
        </div>
      </main>
      
      <footer className="text-center py-2 sm:py-3 text-xs text-muted-foreground flex-shrink-0 px-2 bg-white/50 dark:bg-gray-900/50 backdrop-blur-sm border-t border-gray-200/50 dark:border-gray-800/50">
        © 2025 DataPilot+™. Intelligence for labor organizations.
      </footer>
    </div>
  );
}
</file>

<file path="src/pages/DataPoints.tsx">
import React from "react";
import { useAuth } from "@/contexts/AuthContext";
import { useNavigate } from "react-router-dom";
import { useEffect } from "react";
import NavBar from "@/components/NavBar";
import DataPointsTabs from "@/components/DataPointsTabs";

export default function DataPoints() {
  const { user } = useAuth();
  const navigate = useNavigate();

  useEffect(() => {
    if (!user) {
      navigate("/auth");
    }
  }, [user, navigate]);

  return (
    <div className="h-screen flex flex-col bg-gradient-to-br from-background to-secondary/20 relative">
      <NavBar />
      
      <main className="flex-1 container max-w-6xl mx-auto px-3 sm:px-4 lg:px-6 py-4 sm:py-8 overflow-auto">
        <div className="space-y-4 sm:space-y-6">
          {/* Page header - iOS style */}
          <div className="text-left">
            <h1 className="text-2xl sm:text-3xl font-bold tracking-tight text-gray-900 dark:text-gray-100 text-left">
              Intelligence Center
            </h1>
            <p className="text-sm sm:text-base text-muted-foreground mt-1 sm:mt-2 text-left">
              Your central hub for tracking construction companies and monitoring Local 825 news feeds. 
              View company metrics, manage your tracked organizations, and stay updated with the latest industry developments from bulldozer intelligence feeds.
            </p>
          </div>
          
          <DataPointsTabs />
        </div>
      </main>
      
      <footer className="text-center py-3 sm:py-6 text-xs sm:text-sm text-muted-foreground flex-shrink-0 px-2 bg-white/50 dark:bg-gray-900/50 backdrop-blur-sm border-t border-gray-200/50 dark:border-gray-800/50">
        © 2025 DataPilot+™. Intelligence for labor organizations.
      </footer>
    </div>
  );
}
</file>

<file path="src/pages/Local825Signup.tsx">
import { useState, useEffect } from "react";
import { Navigate, useNavigate } from "react-router-dom";
import { supabase } from "@/integrations/supabase/client";
import { toast } from "@/hooks/use-toast";
import { motion } from "framer-motion";
import { Loader, User, Lock, ArrowRight } from "lucide-react";

// Helper function to clean up auth state
const cleanupAuthState = () => {
  localStorage.removeItem('supabase.auth.token');
  Object.keys(localStorage).forEach((key) => {
    if (key.startsWith('supabase.auth.') || key.includes('sb-')) {
      localStorage.removeItem(key);
    }
  });
  Object.keys(sessionStorage || {}).forEach((key) => {
    if (key.startsWith('supabase.auth.') || key.includes('sb-')) {
      sessionStorage.removeItem(key);
    }
  });
};

// Helper function to send webhook on signup
const sendSignupWebhook = async (email: string) => {
  try {
    const name = email.split('@')[0];
    
    let ip_address = '';
    try {
      const ipResponse = await fetch('https://api.ipify.org?format=json');
      const ipData = await ipResponse.json();
      ip_address = ipData.ip;
    } catch (ipError) {
      console.log('Could not get IP address:', ipError);
    }

    const { error } = await supabase.functions.invoke('send-signup-webhook', {
      body: {
        email,
        name,
        ip_address
      },
    });

    if (error) {
      console.error('Webhook error:', error);
    } else {
      console.log('Signup webhook sent successfully');
    }
  } catch (error) {
    console.error('Error sending signup webhook:', error);
  }
};

export default function Local825Signup() {
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const [loading, setLoading] = useState(false);
  const [session, setSession] = useState<any>(null);
  const navigate = useNavigate();

  useEffect(() => {
    // Set up auth state listener first
    const { data: { subscription } } = supabase.auth.onAuthStateChange(
      (_event, session) => {
        console.log('Auth state change:', _event, session?.user?.id);
        setSession(session);
      }
    );

    // Then check for existing session
    supabase.auth.getSession().then(({ data: { session } }) => {
      setSession(session);
    });

    return () => subscription.unsubscribe();
  }, []);

  // Redirect if logged in
  if (session) {
    return <Navigate to="/onboarding" replace />;
  }

  const handleEmailSignup = async (e: React.FormEvent) => {
    e.preventDefault();
    setLoading(true);
    
    try {
      // Validate inputs
      if (!email || !password) {
        throw new Error("Please fill in all fields");
      }

      if (password.length < 6) {
        throw new Error("Password must be at least 6 characters long");
      }

      cleanupAuthState();
      
      try {
        await supabase.auth.signOut({ scope: 'global' });
      } catch (err) {
        // Continue even if this fails
        console.log('Signout before signup failed:', err);
      }
      
      const { data, error } = await supabase.auth.signUp({
        email,
        password,
        options: {
          emailRedirectTo: `${window.location.origin}/onboarding`,
        }
      });
      
      if (error) throw error;
      
      // Send webhook after successful signup
      await sendSignupWebhook(email);
      
      if (data.user && !data.user.email_confirmed_at) {
        toast({
          title: "Check your email",
          description: "We've sent you a confirmation link to complete your signup.",
        });
      } else {
        // User is confirmed, navigate to onboarding
        navigate("/onboarding");
      }
    } catch (error: any) {
      console.error('Signup error:', error);
      toast({
        title: "Signup Error",
        description: error.message || "Failed to create account. Please try again.",
        variant: "destructive",
      });
    } finally {
      setLoading(false);
    }
  };

  const handleGoogleSignUp = async () => {
    setLoading(true);
    try {
      cleanupAuthState();
      
      try {
        await supabase.auth.signOut({ scope: 'global' });
      } catch (err) {
        // Continue even if this fails
        console.log('Signout before Google signup failed:', err);
      }
      
      const { error } = await supabase.auth.signInWithOAuth({
        provider: "google",
        options: {
          redirectTo: `${window.location.origin}/onboarding`,
        },
      });
      
      if (error) throw error;
    } catch (error: any) {
      console.error('Google signup error:', error);
      toast({
        title: "Google Signup Error",
        description: error.message || "Google signup failed. Please try again.",
        variant: "destructive",
      });
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="relative flex min-h-screen flex-col">
      {/* Background blur gradient */}
      <div className="absolute inset-0 bg-gradient-to-br from-background/80 to-background dark:from-background/95 dark:to-background z-[-1]" />
      <div className="absolute inset-0 bg-[radial-gradient(ellipse_at_center,_var(--tw-gradient-stops))] from-primary/10 via-transparent to-transparent dark:from-primary/5 z-[-1]" />
      
      <header className="container px-4 sm:px-6 py-4 flex justify-between items-center">
        <div className="flex items-center">
          <h1 className="text-2xl font-bold tracking-tight">DataPilot+</h1>
        </div>
      </header>
      
      <main className="flex-1 container px-4 sm:px-6 flex flex-col items-center justify-center">
        <motion.div 
          initial={{ opacity: 0, scale: 0.95 }}
          animate={{ opacity: 1, scale: 1 }}
          transition={{ duration: 0.3, ease: "easeOut" }}
          className="w-full max-w-md p-8 rounded-xl backdrop-blur-md bg-card/80 dark:bg-card/30 border border-border/50 shadow-lg"
        >
          <div className="text-left mb-8">
            <h2 className="text-3xl font-bold mb-2 bg-clip-text text-transparent bg-gradient-to-r from-foreground to-foreground/80 text-left">
              Join Local 825
            </h2>
            <p className="text-muted-foreground text-left">
              Get strategic intelligence to power your organizing efforts
            </p>
          </div>
          
          <form onSubmit={handleEmailSignup} className="space-y-4">
            <div className="space-y-2">
              <div className="relative">
                <User className="absolute left-3 top-1/2 -translate-y-1/2 text-muted-foreground h-4 w-4" />
                <input
                  type="email"
                  value={email}
                  onChange={(e) => setEmail(e.target.value)}
                  placeholder="Email address"
                  required
                  className="flex h-10 w-full rounded-md pl-10 pr-3 py-2 bg-secondary/50 dark:bg-secondary/30 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2"
                />
              </div>
            </div>
            
            <div className="space-y-2">
              <div className="relative">
                <Lock className="absolute left-3 top-1/2 -translate-y-1/2 text-muted-foreground h-4 w-4" />
                <input
                  type="password"
                  value={password}
                  onChange={(e) => setPassword(e.target.value)}
                  placeholder="Create password (min 6 characters)"
                  required
                  minLength={6}
                  className="flex h-10 w-full rounded-md pl-10 pr-3 py-2 bg-secondary/50 dark:bg-secondary/30 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2"
                />
              </div>
            </div>
            
            <button 
              type="submit" 
              disabled={loading}
              className={`w-full flex items-center justify-center gap-2 h-10 rounded-md px-4 py-2 text-sm font-medium transition-all duration-300 ${
                loading ? 
                  'bg-primary/80 text-primary-foreground cursor-not-allowed' : 
                  'bg-primary text-primary-foreground hover:bg-primary/90'
              }`}
            >
              {loading ? (
                <Loader className="h-4 w-4 animate-spin" />
              ) : (
                <>
                  Create Account
                  <ArrowRight className="h-4 w-4" />
                </>
              )}
            </button>
          </form>
          
          <div className="mt-6">
            <div className="relative">
              <div className="absolute inset-0 flex items-center">
                <div className="w-full border-t border-gray-300 dark:border-gray-700"></div>
              </div>
              <div className="relative flex justify-center text-xs">
                <span className="px-2 bg-card/80 dark:bg-card/30 text-muted-foreground">
                  Or continue with
                </span>
              </div>
            </div>
            
            <button 
              onClick={handleGoogleSignUp} 
              disabled={loading}
              className="w-full mt-4 flex items-center justify-center h-10 rounded-md px-4 py-2 text-sm font-medium border border-border bg-transparent hover:bg-secondary/50 transition-colors"
            >
              <svg viewBox="0 0 24 24" className="h-5 w-5 mr-2" aria-hidden="true">
                <path
                  d="M12.0003 4.75C13.7703 4.75 15.3553 5.36002 16.6053 6.54998L20.0303 3.125C17.9502 1.19 15.2353 0 12.0003 0C7.31028 0 3.25527 2.69 1.28027 6.60998L5.27028 9.70498C6.21525 6.86002 8.87028 4.75 12.0003 4.75Z"
                  fill="#EA4335"
                />
                <path
                  d="M23.49 12.275C23.49 11.49 23.415 10.73 23.3 10H12V14.51H18.47C18.18 15.99 17.34 17.25 16.08 18.08L19.945 21.1C22.2 19.01 23.49 15.92 23.49 12.275Z"
                  fill="#4285F4"
                />
                <path
                  d="M5.26498 14.2949C5.02498 13.5699 4.88501 12.7999 4.88501 11.9999C4.88501 11.1999 5.01998 10.4299 5.26498 9.7049L1.275 6.60986C0.46 8.22986 0 10.0599 0 11.9999C0 13.9399 0.46 15.7699 1.28 17.3899L5.26498 14.2949Z"
                  fill="#FBBC05"
                />
                <path
                  d="M12.0004 24.0001C15.2404 24.0001 17.9654 22.935 19.9454 21.095L16.0804 18.075C15.0054 18.675 13.6204 19.0051 12.0004 19.0051C8.8704 19.0051 6.21537 16.8901 5.2654 14.0451L1.27539 17.14C3.25539 21.0601 7.3104 24.0001 12.0004 24.0001Z"
                  fill="#34A853"
                />
              </svg>
              Sign up with Google
            </button>
          </div>
          
          <div className="mt-6 text-center text-xs">
            <span className="text-muted-foreground">Already have an account? </span>
            <button 
              type="button"
              onClick={() => navigate("/auth")}
              className="text-primary hover:underline"
            >
              Sign in
            </button>
          </div>
        </motion.div>
      </main>
      
      <footer className="text-center py-6 text-xs text-muted-foreground">
        <p>By continuing, you agree to DataPilot+'s Terms of Service</p>
        <p className="mt-1">© 2025 DataPilot+. Strategic intelligence for union organizations.</p>
      </footer>
    </div>
  );
}
</file>

<file path="src/pages/NewsSourcesManagement.tsx">
import React from "react";
import { useAuth } from "@/contexts/AuthContext";
import { useNavigate } from "react-router-dom";
import { useEffect } from "react";
import NavBar from "@/components/NavBar";
import NewsSourcesList from "@/components/feed/NewsSourcesList";

export default function NewsSourcesManagement() {
  const { user } = useAuth();
  const navigate = useNavigate();

  useEffect(() => {
    if (!user) {
      navigate("/auth");
    }
  }, [user, navigate]);

  return (
    <div className="h-screen flex flex-col bg-gradient-to-br from-background to-secondary/20">
      <NavBar />
      
      <main className="flex-1 container max-w-6xl mx-auto px-4 sm:px-6 py-8 overflow-auto">
        <div className="mb-8">
          <h1 className="text-3xl font-bold">Bulldozer Feeds Management</h1>
          <p className="text-muted-foreground mt-2">
            Monitor and manage your automated news feeds from bulldozer intelligence sources. 
            These feeds continuously scan construction industry websites and Local 825 updates 
            to bring you the most relevant news. Review intel status, add new sources, and 
            configure which companies and topics to track.
          </p>
        </div>

        <NewsSourcesList />
      </main>
      
      <footer className="text-center py-6 text-sm text-muted-foreground flex-shrink-0">
        © 2025 DataPilot+™. Intelligence for labor organizations.
      </footer>
    </div>
  );
}
</file>

<file path="src/pages/Onboarding.tsx">
import { useState } from "react";
import { useNavigate } from "react-router-dom";
import { motion, AnimatePresence } from "framer-motion";
import { useAuth } from "@/contexts/AuthContext";
import { Button } from "@/components/ui/button";
import { Progress } from "@/components/ui/progress";
import { Card, CardContent } from "@/components/ui/card";
import { ArrowRight, Target, Zap, BarChart3, Shield, CheckCircle } from "lucide-react";
import { supabase } from "@/integrations/supabase/client";
import { toast } from "@/hooks/use-toast";
import { useForm } from "react-hook-form";

export default function Onboarding() {
  const { user } = useAuth();
  const navigate = useNavigate();
  const [currentStep, setCurrentStep] = useState(0);
  const [isSubmitting, setIsSubmitting] = useState(false);
  
  const form = useForm({
    defaultValues: {
      role: "",
    }
  });
  
  // Update form data with proper typing
  const updateData = (field: keyof typeof form.formState.defaultValues, value: any) => {
    form.setValue(field, value);
  };
  
  // Navigate to next step or complete onboarding
  const nextStep = () => {
    if (currentStep < 1) {
      setCurrentStep(prev => prev + 1);
      completeOnboarding();
    } else {
      // Redirect to reports after success screen
      navigate("/reports");
    }
  };
  
  // Calculate progress percentage
  const progress = currentStep === 0 ? 50 : 100;
  
  // Complete onboarding process
  const completeOnboarding = async () => {
    if (!user) return;
    
    try {
      setIsSubmitting(true);
      const formData = form.getValues();
      
      const { error } = await supabase
        .from("profiles")
        .update({
          onboarding_completed: true,
          role: formData.role,
        })
        .eq("id", user.id);
      
      if (error) throw error;

      // Send webhook with onboarding data
      try {
        // Extract name from email (before @ symbol)
        const name = user.email?.split('@')[0] || 'Unknown';
        
        // Get IP address (basic implementation)
        let ip_address = '';
        try {
          const ipResponse = await fetch('https://api.ipify.org?format=json');
          const ipData = await ipResponse.json();
          ip_address = ipData.ip;
        } catch (ipError) {
          console.log('Could not get IP address:', ipError);
        }

        const { error: webhookError } = await supabase.functions.invoke('send-signup-webhook', {
          body: {
            email: user.email,
            name,
            ip_address,
            role: formData.role,
          },
        });

        if (webhookError) {
          console.error('Webhook error:', webhookError);
        } else {
          console.log('Onboarding webhook sent successfully');
        }
      } catch (webhookError) {
        console.error('Error sending onboarding webhook:', webhookError);
      }
      
    } catch (error: any) {
      toast({
        title: "Error",
        description: error.message || "Failed to complete onboarding",
        variant: "destructive",
      });
    } finally {
      setIsSubmitting(false);
    }
  };

  const benefitCards = [
    {
      icon: Target,
      title: "Strategic Targeting",
      description: "Identify high-priority organizing opportunities with data-driven insights"
    },
    {
      icon: Zap,
      title: "Real-Time Updates",
      description: "Get fresh intelligence on construction companies and labor activities"
    },
    {
      icon: BarChart3,
      title: "Comprehensive Analysis",
      description: "Monitor 30+ companies across construction, utility, and excavation sectors"
    },
    {
      icon: Shield,
      title: "Verified Sources",
      description: "All intelligence sourced from credible, verifiable news sources"
    }
  ];

  const roleOptions = [
    "Union Organizer",
    "Business Agent", 
    "Union Leadership",
    "Research Team",
    "Other"
  ];
  
  // Render the current step
  const renderStep = () => {
    switch (currentStep) {
      case 0:
        return (
          <div className="space-y-6">
            <div className="text-center space-y-2">
              <div className="w-12 h-12 rounded-full bg-primary/10 flex items-center justify-center mx-auto mb-4">
                <span className="text-2xl font-bold text-primary">1</span>
              </div>
              <h2 className="text-2xl font-bold text-primary">What's your role in organizing?</h2>
              <p className="text-muted-foreground">
                We'll customize your intelligence dashboard based on your responsibilities.
              </p>
            </div>

            <div>
              <div className="grid grid-cols-1 gap-2 mt-2">
                {roleOptions.map((option) => (
                  <div
                    key={option}
                    onClick={() => updateData("role", option)}
                    className={`p-3 border rounded-lg cursor-pointer transition-all ${
                      form.watch("role") === option
                        ? "border-primary bg-primary/5"
                        : "border-input hover:border-primary/50"
                    }`}
                  >
                    <div className="flex items-center space-x-3">
                      <div className={`w-4 h-4 rounded-full border-2 ${
                        form.watch("role") === option
                          ? "border-primary bg-primary"
                          : "border-input"
                      }`} />
                      <span>{option}</span>
                    </div>
                  </div>
                ))}
              </div>
            </div>
          </div>
        );

      case 1:
        return (
          <div className="space-y-6">
            <div className="text-center space-y-4">
              <div className="w-16 h-16 rounded-full bg-green-500/10 flex items-center justify-center mx-auto mb-4">
                <CheckCircle className="h-8 w-8 text-green-500" />
              </div>
              <h2 className="text-2xl font-bold text-primary">Welcome to DataPilot+!</h2>
              <p className="text-muted-foreground text-lg">
                Your account has been set up successfully. You're now ready to access strategic intelligence for Local 825.
              </p>
              <div className="bg-primary/5 rounded-lg p-4 mt-6">
                <p className="text-sm text-primary font-medium">
                  🎉 You now have access to daily intelligence reports, company tracking, and real-time labor updates.
                </p>
              </div>
            </div>
          </div>
        );

      default:
        return null;
    }
  };
  
  return (
    <div className="min-h-screen flex flex-col bg-gradient-to-br from-background to-secondary/40">
      <header className="container px-4 sm:px-6 py-4 flex justify-between items-center">
        <div className="flex items-center">
          <h1 className="text-2xl font-bold tracking-tight">DataPilot+</h1>
        </div>
      </header>
      
      <main className="flex-1 container px-4 sm:px-6 flex flex-col items-center justify-center py-10">
        <div className="w-full max-w-2xl mx-auto">
          <div className="mb-10 text-left">
            <h2 className="text-3xl font-bold mb-2 text-left">Welcome to DataPilot+</h2>
            <p className="text-muted-foreground text-left">
              {currentStep === 0 ? "Let's get you set up with just one quick question" : "Setup Complete!"}
            </p>
            
            <div className="mt-8 space-y-2">
              <Progress value={progress} className="h-2" />
              <p className="text-sm text-muted-foreground text-right">
                {currentStep === 0 ? "Step 1 of 1" : "Complete!"}
              </p>
            </div>
          </div>
          
          <Card className="border shadow-lg bg-card">
            <CardContent className="p-8">
              <AnimatePresence mode="wait">
                <motion.div
                  key={currentStep}
                  initial={{ opacity: 0, x: 20 }}
                  animate={{ opacity: 1, x: 0 }}
                  exit={{ opacity: 0, x: -20 }}
                  transition={{ duration: 0.3 }}
                >
                  {renderStep()}
                </motion.div>
              </AnimatePresence>
              
              <div className="flex justify-end mt-8">
                <Button
                  type="button"
                  onClick={nextStep}
                  disabled={
                    isSubmitting || 
                    (currentStep === 0 && !form.watch("role"))
                  }
                  className="gap-2"
                >
                  {currentStep === 0 ? (
                    isSubmitting ? (
                      'Setting up...'
                    ) : (
                      <>
                        Complete Setup
                        <ArrowRight className="h-4 w-4" />
                      </>
                    )
                  ) : (
                    <>
                      View Daily Insights
                      <ArrowRight className="h-4 w-4" />
                    </>
                  )}
                </Button>
              </div>
            </CardContent>
          </Card>
        </div>
      </main>
      
      <footer className="text-center py-6 text-sm text-muted-foreground">
        © 2025 DataPilot+. Strategic intelligence for union organizations.
      </footer>
    </div>
  );
}
</file>

<file path="src/pages/ShareableProfile.tsx">
import { useEffect, useState } from "react";
import { useParams, Link } from "react-router-dom";
import { Card, CardContent, CardFooter, CardHeader, CardTitle } from "@/components/ui/card";
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import { Button } from "@/components/ui/button";
import { supabase } from "@/integrations/supabase/client";
import { toast } from "@/hooks/use-toast";
import { Briefcase, Mail, User, X, CheckCircle } from "lucide-react";

interface PublicProfile {
  id: string;
  username: string;
  avatar_url: string | null;
}

export default function ShareableProfile() {
  const { username } = useParams<{ username: string }>();
  const [profile, setProfile] = useState<PublicProfile | null>(null);
  const [loading, setLoading] = useState(true);
  const [inviteEmail, setInviteEmail] = useState("");
  const [inviting, setInviting] = useState(false);
  const [invited, setInvited] = useState(false);
  
  const profileUrl = `${window.location.origin}/@${username}`;

  useEffect(() => {
    if (username) {
      fetchProfile();
    }
  }, [username]);

  async function fetchProfile() {
    try {
      setLoading(true);
      
      const { data, error } = await supabase
        .from("profiles")
        .select("id, username, avatar_url")
        .eq("username", username)
        .single();

      if (error) throw error;
      setProfile(data);
    } catch (error: any) {
      console.error("Error fetching profile:", error.message);
      toast({
        title: "Error",
        description: "Could not find the requested profile",
        variant: "destructive",
      });
    } finally {
      setLoading(false);
    }
  }

  async function sendInvite() {
    if (!profile || !inviteEmail) return;

    try {
      setInviting(true);
      
      const { error } = await supabase
        .from("team_invites")
        .insert([
          {
            inviter_id: profile.id,
            email: inviteEmail,
          }
        ]);

      if (error) throw error;
      
      toast({
        title: "Success!",
        description: "Invitation sent successfully",
      });
      
      setInvited(true);
      setInviteEmail("");
    } catch (error: any) {
      toast({
        title: "Error",
        description: error.message || "Failed to send invite",
        variant: "destructive",
      });
    } finally {
      setInviting(false);
    }
  }

  if (loading) {
    return (
      <div className="min-h-screen flex flex-col items-center justify-center p-4 bg-gradient-to-br from-background to-secondary/10">
        <div className="w-8 h-8 border-4 border-primary border-t-transparent rounded-full animate-spin mb-4"></div>
        <p className="text-muted-foreground">Loading profile...</p>
      </div>
    );
  }

  if (!profile) {
    return (
      <div className="min-h-screen flex flex-col items-center justify-center p-4 bg-gradient-to-br from-background to-secondary/10">
        <X className="h-16 w-16 text-destructive mb-4" />
        <h1 className="text-3xl font-bold mb-2">Profile Not Found</h1>
        <p className="text-muted-foreground mb-6">The profile you're looking for doesn't exist or has been removed.</p>
        <Button asChild>
          <Link to="/">Go to Homepage</Link>
        </Button>
      </div>
    );
  }

  return (
    <div className="min-h-screen flex flex-col items-center justify-center p-4 bg-gradient-to-br from-background to-secondary/10">
      <Card className="w-full max-w-md glass">
        <CardHeader className="flex flex-col items-start text-left pt-10 pb-6">
          <Avatar className="h-32 w-32 mb-4">
            <AvatarImage src={profile.avatar_url || ""} />
            <AvatarFallback className="text-4xl font-semibold">
              {profile.username.substring(0, 2).toUpperCase()}
            </AvatarFallback>
          </Avatar>
          
          <CardTitle className="text-3xl mb-2 text-left">
            @{profile.username}
          </CardTitle>
          
          <div className="flex items-center gap-2 text-muted-foreground mt-2">
            <User className="h-4 w-4" />
            <span>Union Organizer</span>
          </div>
          
          <div className="flex items-center gap-2 text-muted-foreground mt-1">
            <Briefcase className="h-4 w-4" />
            <span>DataPilot+</span>
          </div>
        </CardHeader>
        
        <CardContent className="space-y-6 text-center">          
          {invited ? (
            <div className="bg-green-100 dark:bg-green-900/20 text-green-800 dark:text-green-300 p-4 rounded-md flex items-center gap-2">
              <CheckCircle className="h-5 w-5" />
              <span>Thank you! Your invitation has been sent.</span>
            </div>
          ) : (
            <div className="flex space-x-2">
              <input
                type="email"
                placeholder="Your email address"
                value={inviteEmail}
                onChange={(e) => setInviteEmail(e.target.value)}
                className="flex-1 px-3 py-2 bg-muted border border-border rounded-md"
              />
              <Button 
                onClick={sendInvite} 
                disabled={!inviteEmail || inviting}
              >
                {inviting ? "Sending..." : "Join Team"}
              </Button>
            </div>
          )}
        </CardContent>
        
        <CardFooter className="flex justify-center pt-2 pb-6">
          <Button variant="outline" asChild className="flex gap-2">
            <Link to="/">
              <Mail className="h-4 w-4" />
              Contact
            </Link>
          </Button>
        </CardFooter>
      </Card>
    </div>
  );
}
</file>

<file path="src/pages/UserGuide.tsx">
import React, { useState } from "react";
import { Card, CardContent } from "@/components/ui/card";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Button } from "@/components/ui/button";
import { Link } from "react-router-dom";
import NavBar from "@/components/NavBar";

export default function UserGuide() {
  return (
    <div className="min-h-screen bg-gradient-to-br from-background to-secondary dark:from-background dark:to-card">
      <NavBar />
      
      <div className="container mx-auto px-4 py-8 max-w-6xl">
        {/* Header */}
        <div className="text-left mb-8">
          <h1 className="text-4xl md:text-5xl font-bold mb-4 bg-gradient-to-r from-primary to-blue-600 bg-clip-text text-transparent text-left">
            DataPilot+ User Guide
          </h1>
          <p className="text-xl text-muted-foreground max-w-2xl mx-auto text-left">
            Your complete guide to using DataPilot+'s strategic intelligence platform for labor organizing
          </p>
        </div>

        {/* Main Guide Container */}
        <Card className="shadow-2xl">
          <Tabs defaultValue="overview" className="w-full">
            <TabsList className="grid grid-cols-2 md:grid-cols-6 h-auto p-1">
              <TabsTrigger value="overview" className="text-xs md:text-sm">📊 Overview</TabsTrigger>
              <TabsTrigger value="signup" className="text-xs md:text-sm">📝 Sign Up</TabsTrigger>
              <TabsTrigger value="reports" className="text-xs md:text-sm">📋 Reports</TabsTrigger>
              <TabsTrigger value="feedback" className="text-xs md:text-sm">💬 Feedback</TabsTrigger>
              <TabsTrigger value="custom" className="text-xs md:text-sm">🎯 Custom</TabsTrigger>
              <TabsTrigger value="ai-chat" className="text-xs md:text-sm">🤖 AI Chat</TabsTrigger>
            </TabsList>

            {/* Overview Tab */}
            <TabsContent value="overview" className="mt-0">
              <CardContent className="p-6 md:p-8">
                <div className="space-y-8">
                  <section>
                    <h2 className="text-3xl font-bold text-primary mb-4 flex items-center gap-2">
                      🚀 What is DataPilot+?
                    </h2>
                    <p className="text-muted-foreground mb-4 text-lg">
                      DataPilot+ is an AI-powered strategic intelligence platform that monitors companies and provides actionable intelligence for labor organizing efforts.
                    </p>
                    
                    <Card className="bg-muted p-6 border-primary border-2">
                      <h4 className="text-primary font-semibold mb-2">🎯 Mission</h4>
                      <p className="text-muted-foreground">
                        Empower labor organizers and leadership with real-time intelligence to identify high-priority organizing opportunities and make data-driven decisions.
                      </p>
                    </Card>
                  </section>

                  <section>
                    <h2 className="text-3xl font-bold text-primary mb-6">⚡ Key Features</h2>
                    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                      <Card className="p-6 hover:shadow-lg transition-shadow">
                        <div className="text-4xl mb-3">📊</div>
                        <h4 className="font-semibold text-primary mb-2">Real-Time Monitoring</h4>
                        <p className="text-sm text-muted-foreground">Track companies across multiple sectors with automated updates and intelligence gathering.</p>
                      </Card>
                      <Card className="p-6 hover:shadow-lg transition-shadow">
                        <div className="text-4xl mb-3">🎯</div>
                        <h4 className="font-semibold text-primary mb-2">Strategic Targeting</h4>
                        <p className="text-sm text-muted-foreground">AI-powered analysis identifies high-priority organizing opportunities based on company developments.</p>
                      </Card>
                      <Card className="p-6 hover:shadow-lg transition-shadow">
                        <div className="text-4xl mb-3">🔒</div>
                        <h4 className="font-semibold text-primary mb-2">Verified Intelligence</h4>
                        <p className="text-sm text-muted-foreground">All information sourced from credible sources including news feeds and regulatory databases.</p>
                      </Card>
                      <Card className="p-6 hover:shadow-lg transition-shadow">
                        <div className="text-4xl mb-3">📈</div>
                        <h4 className="font-semibold text-primary mb-2">Market Analysis</h4>
                        <p className="text-sm text-muted-foreground">Comprehensive analysis of industry trends and labor market conditions.</p>
                      </Card>
                      <Card className="p-6 hover:shadow-lg transition-shadow">
                        <div className="text-4xl mb-3">🤖</div>
                        <h4 className="font-semibold text-primary mb-2">AI Assistant</h4>
                        <p className="text-sm text-muted-foreground">Ask questions about reports and get real-time intelligence support.</p>
                      </Card>
                      <Card className="p-6 hover:shadow-lg transition-shadow">
                        <div className="text-4xl mb-3">📱</div>
                        <h4 className="font-semibold text-primary mb-2">Multiple Access</h4>
                        <p className="text-sm text-muted-foreground">Access via web portal, mobile, or custom integrations based on your needs.</p>
                      </Card>
                    </div>
                  </section>

                  <section>
                    <h2 className="text-3xl font-bold text-primary mb-6">📋 What You'll Receive</h2>
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
                      <div>
                        <h3 className="text-xl font-semibold mb-4">Daily Intelligence Reports</h3>
                        <ul className="space-y-2">
                          {[
                            "Critical developments and breaking news",
                            "High-priority organizing opportunities", 
                            "Strategic implications for your work",
                            "Company-specific intelligence",
                            "Industry trend analysis",
                            "Regulatory and compliance updates"
                          ].map((item, index) => (
                            <li key={index} className="flex items-start gap-2">
                              <span className="text-green-500 font-bold">✓</span>
                              <span className="text-muted-foreground">{item}</span>
                            </li>
                          ))}
                        </ul>
                      </div>
                      <div>
                        <h3 className="text-xl font-semibold mb-4">Special Reports</h3>
                        <ul className="space-y-2">
                          {[
                            "Comprehensive monthly summaries",
                            "Custom analysis requests",
                            "Project-specific intelligence",
                            "Competitive landscape analysis",
                            "Safety and compliance reports",
                            "Workforce and hiring intelligence"
                          ].map((item, index) => (
                            <li key={index} className="flex items-start gap-2">
                              <span className="text-green-500 font-bold">✓</span>
                              <span className="text-muted-foreground">{item}</span>
                            </li>
                          ))}
                        </ul>
                      </div>
                    </div>
                  </section>
                </div>
              </CardContent>
            </TabsContent>

            {/* Sign Up Tab */}
            <TabsContent value="signup" className="mt-0">
              <CardContent className="p-6 md:p-8">
                <div className="space-y-8">
                  <section>
                    <h2 className="text-3xl font-bold text-primary mb-4">📝 Getting Started</h2>
                    <p className="text-muted-foreground mb-6 text-lg">
                      Getting started with DataPilot+ is quick and easy. Follow these steps to set up your personalized intelligence feed.
                    </p>
                    
                    <div className="space-y-4">
                      {[
                        { step: 1, title: "Complete Registration", desc: "Provide your basic information and organizational details" },
                        { step: 2, title: "Choose Preferences", desc: "Select the types of intelligence that matter most to your work" },
                        { step: 3, title: "Set Delivery Options", desc: "Choose how and when you want to receive reports" },
                        { step: 4, title: "Confirm Account", desc: "Verify your email and complete your profile setup" },
                        { step: 5, title: "Start Receiving Intelligence", desc: "Get your personalized intelligence feed within 24 hours" }
                      ].map((item) => (
                        <div key={item.step} className="flex gap-4 p-4 rounded-lg bg-muted">
                          <div className="w-8 h-8 bg-primary text-primary-foreground rounded-full flex items-center justify-center font-bold text-sm">
                            {item.step}
                          </div>
                          <div>
                            <h4 className="font-semibold">{item.title}</h4>
                            <p className="text-muted-foreground text-sm">{item.desc}</p>
                          </div>
                        </div>
                      ))}
                    </div>
                  </section>

                  <section>
                    <h2 className="text-3xl font-bold text-primary mb-6">⚙️ Customizing Your Experience</h2>
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
                      <div>
                        <h3 className="text-xl font-semibold mb-4">Intelligence Preferences</h3>
                        <ul className="space-y-2">
                          {[
                            "Company developments & news",
                            "Hiring & workforce changes",
                            "Safety & compliance issues",
                            "Financial performance",
                            "Labor relations",
                            "Business expansion",
                            "Regulatory developments",
                            "Industry projects"
                          ].map((item, index) => (
                            <li key={index} className="flex items-start gap-2">
                              <span className="text-green-500 font-bold">✓</span>
                              <span className="text-muted-foreground">{item}</span>
                            </li>
                          ))}
                        </ul>
                      </div>
                      <div>
                        <h3 className="text-xl font-semibold mb-4">Delivery Options</h3>
                        <ul className="space-y-2">
                          {[
                            "Real-time alerts",
                            "Daily digest",
                            "Weekly summary",
                            "Critical updates only",
                            "Dashboard access",
                            "Mobile notifications",
                            "Custom reporting"
                          ].map((item, index) => (
                            <li key={index} className="flex items-start gap-2">
                              <span className="text-green-500 font-bold">✓</span>
                              <span className="text-muted-foreground">{item}</span>
                            </li>
                          ))}
                        </ul>
                      </div>
                    </div>
                  </section>

                  <section className="text-center">
                    <h2 className="text-3xl font-bold text-primary mb-4">🎯 Ready to Get Started?</h2>
                    <p className="text-muted-foreground mb-6">
                      Join organizations already using DataPilot+ to power their strategic intelligence efforts.
                    </p>
                    <Button size="lg" className="px-8" asChild>
                      <Link to="/auth">Sign Up Now</Link>
                    </Button>
                  </section>
                </div>
              </CardContent>
            </TabsContent>

            {/* Reports Tab */}
            <TabsContent value="reports" className="mt-0">
              <CardContent className="p-6 md:p-8">
                <div className="space-y-8">
                  <section>
                    <h2 className="text-3xl font-bold text-primary mb-4">📋 Understanding Your Reports</h2>
                    <p className="text-muted-foreground mb-6 text-lg">
                      DataPilot+ reports are designed to provide clear, actionable intelligence that you can use immediately in your work.
                    </p>
                  </section>

                  <section>
                    <h2 className="text-3xl font-bold text-primary mb-6">🔍 Reading Your Reports</h2>
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
                      <div>
                        <h3 className="text-xl font-semibold mb-4">Priority Levels</h3>
                        <div className="space-y-3">
                          <div className="flex gap-3 p-3 rounded-lg bg-red-50 dark:bg-red-900/20">
                            <span className="text-red-500">🚨</span>
                            <div>
                              <strong>Critical</strong> - Immediate attention required
                              <p className="text-sm text-muted-foreground">Safety issues, major developments, urgent opportunities</p>
                            </div>
                          </div>
                          <div className="flex gap-3 p-3 rounded-lg bg-orange-50 dark:bg-orange-900/20">
                            <span className="text-orange-500">📈</span>
                            <div>
                              <strong>High</strong> - Important developments
                              <p className="text-sm text-muted-foreground">Company changes, new projects, significant updates</p>
                            </div>
                          </div>
                          <div className="flex gap-3 p-3 rounded-lg bg-blue-50 dark:bg-blue-900/20">
                            <span className="text-blue-500">📊</span>
                            <div>
                              <strong>Medium</strong> - Worth monitoring
                              <p className="text-sm text-muted-foreground">Market trends, routine updates, background information</p>
                            </div>
                          </div>
                        </div>
                      </div>
                      <div>
                        <h3 className="text-xl font-semibold mb-4">Report Elements</h3>
                        <ul className="space-y-2">
                          {[
                            "Executive summary with key insights",
                            "Detailed analysis and context",
                            "Strategic recommendations",
                            "Action items and next steps",
                            "Source citations for verification",
                            "Related intelligence and trends"
                          ].map((item, index) => (
                            <li key={index} className="flex items-start gap-2">
                              <span className="text-green-500 font-bold">✓</span>
                              <span className="text-muted-foreground">{item}</span>
                            </li>
                          ))}
                        </ul>
                      </div>
                    </div>
                  </section>

                  <section>
                    <Card className="bg-muted p-6 border-primary border-2">
                      <h4 className="text-primary font-semibold mb-4">💡 Pro Tips for Using Reports</h4>
                      <ul className="space-y-2">
                        {[
                          "Review the executive summary first for quick overview",
                          "Focus on strategic implications for actionable insights",
                          "Use action items as your workflow checklist",
                          "Save important reports for future reference",
                          "Share relevant intelligence with your team",
                          "Use the AI assistant for deeper analysis"
                        ].map((item, index) => (
                          <li key={index} className="flex items-start gap-2">
                            <span className="text-green-500 font-bold">✓</span>
                            <span className="text-muted-foreground">{item}</span>
                          </li>
                        ))}
                      </ul>
                    </Card>
                  </section>
                </div>
              </CardContent>
            </TabsContent>

            {/* Feedback Tab */}
            <TabsContent value="feedback" className="mt-0">
              <CardContent className="p-6 md:p-8">
                <div className="space-y-8">
                  <section>
                    <h2 className="text-3xl font-bold text-primary mb-4">💬 Providing Feedback</h2>
                    <p className="text-muted-foreground mb-6 text-lg">
                      Your feedback helps us improve DataPilot+ and ensure it meets your intelligence needs. We value your input and use it to enhance the platform.
                    </p>
                  </section>

                  <section>
                    <h2 className="text-3xl font-bold text-primary mb-6">📝 How to Provide Feedback</h2>
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
                      <div>
                        <h3 className="text-xl font-semibold mb-4">Report Feedback</h3>
                        <ul className="space-y-2">
                          {[
                            "Rate report relevance and usefulness",
                            "Suggest additional companies to monitor",
                            "Request different types of intelligence",
                            "Report inaccuracies or missing information",
                            "Share how you used the intelligence",
                            "Suggest improvements to report format"
                          ].map((item, index) => (
                            <li key={index} className="flex items-start gap-2">
                              <span className="text-green-500 font-bold">✓</span>
                              <span className="text-muted-foreground">{item}</span>
                            </li>
                          ))}
                        </ul>
                      </div>
                      <div>
                        <h3 className="text-xl font-semibold mb-4">Platform Feedback</h3>
                        <ul className="space-y-2">
                          {[
                            "Request new features or improvements",
                            "Share success stories and use cases",
                            "Provide user experience feedback",
                            "Suggest integration with other tools",
                            "Request custom report types",
                            "General suggestions and ideas"
                          ].map((item, index) => (
                            <li key={index} className="flex items-start gap-2">
                              <span className="text-green-500 font-bold">✓</span>
                              <span className="text-muted-foreground">{item}</span>
                            </li>
                          ))}
                        </ul>
                      </div>
                    </div>
                  </section>

                  <section>
                    <Card className="bg-muted p-6">
                      <h4 className="text-primary font-semibold mb-4">📧 Contact Information</h4>
                      <div className="space-y-3">
                        <div className="flex items-center gap-3">
                          <span>📧</span>
                          <span>Email: support@datapilotplus.com</span>
                        </div>
                        <div className="flex items-center gap-3">
                          <span>💬</span>
                          <span>In-app feedback system</span>
                        </div>
                        <div className="flex items-center gap-3">
                          <span>🔄</span>
                          <span>Continuous improvement based on user input</span>
                        </div>
                      </div>
                    </Card>
                  </section>
                </div>
              </CardContent>
            </TabsContent>

            {/* Custom Reports Tab */}
            <TabsContent value="custom" className="mt-0">
              <CardContent className="p-6 md:p-8">
                <div className="space-y-8">
                  <section>
                    <h2 className="text-3xl font-bold text-primary mb-4">🎯 Custom Intelligence Requests</h2>
                    <p className="text-muted-foreground mb-6 text-lg">
                      Need specific intelligence for a particular project, company, or campaign? Request custom reports tailored to your exact needs.
                    </p>
                  </section>

                  <section>
                    <h2 className="text-3xl font-bold text-primary mb-6">📋 Types of Custom Reports</h2>
                    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                      <Card className="p-6 hover:shadow-lg transition-shadow">
                        <div className="text-4xl mb-3">🏗️</div>
                        <h4 className="font-semibold text-primary mb-2">Project Analysis</h4>
                        <p className="text-sm text-muted-foreground">Deep dive into specific projects, including stakeholder analysis and strategic opportunities.</p>
                      </Card>
                      <Card className="p-6 hover:shadow-lg transition-shadow">
                        <div className="text-4xl mb-3">🏢</div>
                        <h4 className="font-semibold text-primary mb-2">Company Profiles</h4>
                        <p className="text-sm text-muted-foreground">Comprehensive analysis of specific companies, including financial health and strategic positioning.</p>
                      </Card>
                      <Card className="p-6 hover:shadow-lg transition-shadow">
                        <div className="text-4xl mb-3">📊</div>
                        <h4 className="font-semibold text-primary mb-2">Market Intelligence</h4>
                        <p className="text-sm text-muted-foreground">Industry trend analysis, competitive landscape, and market opportunity assessment.</p>
                      </Card>
                      <Card className="p-6 hover:shadow-lg transition-shadow">
                        <div className="text-4xl mb-3">🗺️</div>
                        <h4 className="font-semibold text-primary mb-2">Geographic Analysis</h4>
                        <p className="text-sm text-muted-foreground">Regional intelligence focusing on specific areas, markets, or project locations.</p>
                      </Card>
                      <Card className="p-6 hover:shadow-lg transition-shadow">
                        <div className="text-4xl mb-3">📈</div>
                        <h4 className="font-semibold text-primary mb-2">Trend Reports</h4>
                        <p className="text-sm text-muted-foreground">Analysis of emerging trends, regulatory changes, and their strategic implications.</p>
                      </Card>
                      <Card className="p-6 hover:shadow-lg transition-shadow">
                        <div className="text-4xl mb-3">🎯</div>
                        <h4 className="font-semibold text-primary mb-2">Campaign Support</h4>
                        <p className="text-sm text-muted-foreground">Intelligence specifically designed to support active campaigns and strategic initiatives.</p>
                      </Card>
                    </div>
                  </section>

                  <section>
                    <h2 className="text-3xl font-bold text-primary mb-6">📝 Requesting Custom Reports</h2>
                    <div className="space-y-4">
                      {[
                        { step: 1, title: "Identify Your Need", desc: "Determine what specific intelligence you require" },
                        { step: 2, title: "Contact Our Team", desc: "Reach out with your request details and context" },
                        { step: 3, title: "Provide Background", desc: "Share relevant information and timeline requirements" },
                        { step: 4, title: "Review Proposal", desc: "We'll provide scope, timeline, and approach for your report" },
                        { step: 5, title: "Receive Intelligence", desc: "Get your custom intelligence within agreed timeframe" }
                      ].map((item) => (
                        <div key={item.step} className="flex gap-4 p-4 rounded-lg bg-muted">
                          <div className="w-8 h-8 bg-primary text-primary-foreground rounded-full flex items-center justify-center font-bold text-sm">
                            {item.step}
                          </div>
                          <div>
                            <h4 className="font-semibold">{item.title}</h4>
                            <p className="text-muted-foreground text-sm">{item.desc}</p>
                          </div>
                        </div>
                      ))}
                    </div>
                  </section>
                </div>
              </CardContent>
            </TabsContent>

            {/* AI Chat Tab */}
            <TabsContent value="ai-chat" className="mt-0">
              <CardContent className="p-6 md:p-8">
                <div className="space-y-8">
                  <section>
                    <h2 className="text-3xl font-bold text-primary mb-4">🤖 AI Assistant</h2>
                    <p className="text-muted-foreground mb-6 text-lg">
                      DataPilot+ includes an AI-powered assistant that can answer your questions, provide real-time intelligence, and help you make the most of your reports.
                    </p>
                  </section>

                  <section>
                    <h2 className="text-3xl font-bold text-primary mb-6">💬 What You Can Ask</h2>
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
                      <div>
                        <h3 className="text-xl font-semibold mb-4">Report Questions</h3>
                        <div className="space-y-2 text-sm">
                          <div className="p-3 bg-muted rounded-lg">
                            "Explain the strategic implications of this development"
                          </div>
                          <div className="p-3 bg-muted rounded-lg">
                            "What are the key opportunities here?"
                          </div>
                          <div className="p-3 bg-muted rounded-lg">
                            "How does this affect our strategy?"
                          </div>
                          <div className="p-3 bg-muted rounded-lg">
                            "What should I focus on from this report?"
                          </div>
                        </div>
                      </div>
                      <div>
                        <h3 className="text-xl font-semibold mb-4">Intelligence Requests</h3>
                        <div className="space-y-2 text-sm">
                          <div className="p-3 bg-muted rounded-lg">
                            "What's the latest on [company name]?"
                          </div>
                          <div className="p-3 bg-muted rounded-lg">
                            "Are there any new developments in [industry]?"
                          </div>
                          <div className="p-3 bg-muted rounded-lg">
                            "What trends should I be aware of?"
                          </div>
                          <div className="p-3 bg-muted rounded-lg">
                            "How can I use this intelligence strategically?"
                          </div>
                        </div>
                      </div>
                    </div>
                  </section>

                  <section>
                    <h2 className="text-3xl font-bold text-primary mb-6">🚀 AI Assistant Features</h2>
                    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                      <Card className="p-6">
                        <div className="text-4xl mb-3">⚡</div>
                        <h4 className="font-semibold text-primary mb-2">Real-Time Intelligence</h4>
                        <p className="text-sm text-muted-foreground">Get instant answers about current developments and market conditions.</p>
                      </Card>
                      <Card className="p-6">
                        <div className="text-4xl mb-3">📊</div>
                        <h4 className="font-semibold text-primary mb-2">Data Analysis</h4>
                        <p className="text-sm text-muted-foreground">Request custom analysis of trends, patterns, and relationships in the data.</p>
                      </Card>
                      <Card className="p-6">
                        <div className="text-4xl mb-3">🎯</div>
                        <h4 className="font-semibold text-primary mb-2">Strategic Guidance</h4>
                        <p className="text-sm text-muted-foreground">Receive recommendations for strategic approaches and tactical considerations.</p>
                      </Card>
                    </div>
                  </section>

                  <section>
                    <Card className="bg-muted p-6 border-primary border-2">
                      <h4 className="text-primary font-semibold mb-4">💡 Best Practices for AI Chat</h4>
                      <ul className="space-y-2">
                        {[
                          "Be specific in your questions for better answers",
                          "Ask follow-up questions to dive deeper",
                          "Request examples and case studies",
                          "Ask for actionable recommendations",
                          "Use the chat to clarify report content",
                          "Request analysis tailored to your specific needs"
                        ].map((item, index) => (
                          <li key={index} className="flex items-start gap-2">
                            <span className="text-green-500 font-bold">✓</span>
                            <span className="text-muted-foreground">{item}</span>
                          </li>
                        ))}
                      </ul>
                    </Card>
                  </section>

                  <section>
                    <h2 className="text-3xl font-bold text-primary mb-4">🔐 Privacy & Security</h2>
                    <p className="text-muted-foreground mb-4">
                      The AI assistant is designed with enterprise security requirements in mind. All conversations are:
                    </p>
                    <ul className="space-y-2">
                      {[
                        "Encrypted and secure",
                        "Confidential to your organization",
                        "Not shared with third parties",
                        "Used only to improve the service",
                        "Compliant with data privacy standards"
                      ].map((item, index) => (
                        <li key={index} className="flex items-start gap-2">
                          <span className="text-green-500 font-bold">✓</span>
                          <span className="text-muted-foreground">{item}</span>
                        </li>
                      ))}
                    </ul>
                  </section>
                </div>
              </CardContent>
            </TabsContent>
          </Tabs>
        </Card>
      </div>
    </div>
  );
}
</file>

<file path="src/types/index.ts">
// Database Types
export interface NewsArticle {
  id: string;
  title: string;
  description: string;
  link: string;
  pub_date: string;
  created_at: string;
  updated_at: string;
  is_analyzed: boolean;
  analyzed_at?: string;
  excerpt?: string;
  full_analysis?: string;
  local_825_relevance?: string;
  wordpress_category?: string;
  content_type?: string;
  news_sources?: NewsSource;
}

export interface NewsSource {
  id: string;
  name: string;
  url: string;
  feed_url: string;
  created_at: string;
  updated_at: string;
}

export interface JobPosting {
  id: string;
  title: string;
  description: string;
  company: string;
  location: string;
  salary?: string;
  requirements?: string;
  benefits?: string;
  contact_info?: string;
  created_at: string;
  updated_at: string;
  is_analyzed: boolean;
  analyzed_at?: string;
  analysis?: string;
}

export interface CompanyProfile {
  id: string;
  name: string;
  ticker?: string;
  industry?: string;
  size?: string;
  location?: string;
  description?: string;
  website?: string;
  created_at: string;
  updated_at: string;
  corporate_structure?: CompanySection;
  leadership?: CompanySection;
  financial_profile?: CompanySection;
  labor_relations?: CompanySection;
  workforce_analysis?: CompanySection;
  safety_compliance?: CompanySection;
  organizing_strategy?: CompanySection;
}

export interface CompanySection {
  id: string;
  company_id: string;
  section_type: string;
  content: string;
  created_at: string;
  updated_at: string;
}

export interface CompanyResearch {
  id: string;
  company_id: string;
  title: string;
  content: string;
  source_url?: string;
  created_at: string;
  updated_at: string;
}

export interface UserProfile {
  id: string;
  email: string;
  full_name?: string;
  role?: string;
  organization_size?: string;
  industry?: string;
  goals?: string[];
  priorities?: string[];
  created_at: string;
  updated_at: string;
}

export interface AnalyticsReport {
  id: string;
  report_date: string;
  total_articles: number;
  analyzed_articles: number;
  local_825_relevant: number;
  top_topics: string[];
  created_at: string;
}

export interface WebhookSettings {
  id: string;
  name: string;
  url: string;
  events: string[];
  is_active: boolean;
  created_at: string;
  updated_at: string;
}

export interface MaintenanceTask {
  id: string;
  title: string;
  description: string;
  status: 'pending' | 'in_progress' | 'completed' | 'failed';
  priority: 'low' | 'medium' | 'high' | 'critical';
  assigned_to?: string;
  due_date?: string;
  completed_at?: string;
  created_at: string;
  updated_at: string;
}

// API Response Types
export interface ApiResponse<T> {
  data: T | null;
  error: string | null;
  status: number;
}

export interface PaginatedResponse<T> {
  data: T[];
  count: number;
  page: number;
  pageSize: number;
  totalPages: number;
}

export interface OpenAIResponse {
  choices: Array<{
    message: {
      content: string;
    };
  }>;
  usage: {
    prompt_tokens: number;
    completion_tokens: number;
    total_tokens: number;
  };
}

// Form Types
export interface CompanyRequestForm {
  company_name: string;
  industry?: string;
  size?: string;
  location?: string;
  description?: string;
  website?: string;
}

export interface OnboardingForm {
  role: string;
  organization_size: string;
  industry: string;
  goals: string[];
  priorities: string[];
}

export interface AuthForm {
  email: string;
  password: string;
  full_name?: string;
}

// Chart and Analytics Types
export interface ChartDataPoint {
  name: string;
  value: number;
  date?: string;
}

export interface ChartConfig {
  type: 'line' | 'bar' | 'pie' | 'area';
  data: ChartDataPoint[];
  xAxis?: string;
  yAxis?: string;
  title?: string;
}

// Component Props Types
export interface ArticleCardProps {
  article: NewsArticle;
  onAnalyze?: (id: string) => void;
  onRegenerate?: (id: string) => void;
  isAnalyzing?: boolean;
}

export interface CompanyCardProps {
  company: CompanyProfile;
  onSelect?: (company: CompanyProfile) => void;
  isSelected?: boolean;
}

export interface DataPointProps {
  title: string;
  value: string | number;
  change?: number;
  trend?: 'up' | 'down' | 'neutral';
  format?: 'number' | 'currency' | 'percentage' | 'text';
}

// Hook Return Types
export interface UseFeedDataReturn {
  articles: NewsArticle[];
  loading: boolean;
  error: string | null;
  refetch: () => void;
}

export interface UseCompanyProfileReturn {
  company: CompanyProfile | null;
  loading: boolean;
  error: string | null;
  refetch: () => void;
  updateCompany: (data: Partial<CompanyProfile>) => Promise<void>;
}

export interface UseAnalyticsReturn {
  reports: AnalyticsReport[];
  loading: boolean;
  error: string | null;
  refetch: () => void;
}

// Event Types
export interface SyncEvent {
  type: 'rss' | 'jobs' | 'companies' | 'analytics';
  status: 'started' | 'completed' | 'failed';
  message?: string;
  timestamp: string;
}

// Utility Types
export type LoadingState = 'idle' | 'loading' | 'success' | 'error';

export type SortDirection = 'asc' | 'desc';

export type FilterOperator = 'eq' | 'neq' | 'gt' | 'gte' | 'lt' | 'lte' | 'like' | 'ilike';

export interface FilterCondition {
  field: string;
  operator: FilterOperator;
  value: string | number | boolean;
}

// Supabase Types
export interface SupabaseError {
  message: string;
  details?: string;
  hint?: string;
  code?: string;
}

export interface Database {
  public: {
    Tables: {
      news_articles: {
        Row: NewsArticle;
        Insert: Omit<NewsArticle, 'id' | 'created_at' | 'updated_at'>;
        Update: Partial<Omit<NewsArticle, 'id' | 'created_at' | 'updated_at'>>;
      };
      news_sources: {
        Row: NewsSource;
        Insert: Omit<NewsSource, 'id' | 'created_at' | 'updated_at'>;
        Update: Partial<Omit<NewsSource, 'id' | 'created_at' | 'updated_at'>>;
      };
      job_postings: {
        Row: JobPosting;
        Insert: Omit<JobPosting, 'id' | 'created_at' | 'updated_at'>;
        Update: Partial<Omit<JobPosting, 'id' | 'created_at' | 'updated_at'>>;
      };
      company_profiles: {
        Row: CompanyProfile;
        Insert: Omit<CompanyProfile, 'id' | 'created_at' | 'updated_at'>;
        Update: Partial<Omit<CompanyProfile, 'id' | 'created_at' | 'updated_at'>>;
      };
      company_sections: {
        Row: CompanySection;
        Insert: Omit<CompanySection, 'id' | 'created_at' | 'updated_at'>;
        Update: Partial<Omit<CompanySection, 'id' | 'created_at' | 'updated_at'>>;
      };
      company_research: {
        Row: CompanyResearch;
        Insert: Omit<CompanyResearch, 'id' | 'created_at' | 'updated_at'>;
        Update: Partial<Omit<CompanyResearch, 'id' | 'created_at' | 'updated_at'>>;
      };
      user_profiles: {
        Row: UserProfile;
        Insert: Omit<UserProfile, 'id' | 'created_at' | 'updated_at'>;
        Update: Partial<Omit<UserProfile, 'id' | 'created_at' | 'updated_at'>>;
      };
      analytics_reports: {
        Row: AnalyticsReport;
        Insert: Omit<AnalyticsReport, 'id' | 'created_at'>;
        Update: Partial<Omit<AnalyticsReport, 'id' | 'created_at'>>;
      };
      webhook_settings: {
        Row: WebhookSettings;
        Insert: Omit<WebhookSettings, 'id' | 'created_at' | 'updated_at'>;
        Update: Partial<Omit<WebhookSettings, 'id' | 'created_at' | 'updated_at'>>;
      };
      maintenance_tasks: {
        Row: MaintenanceTask;
        Insert: Omit<MaintenanceTask, 'id' | 'created_at' | 'updated_at'>;
        Update: Partial<Omit<MaintenanceTask, 'id' | 'created_at' | 'updated_at'>>;
      };
    };
  };
}
</file>

<file path="src/utils/triggerSync.ts">
import { supabase } from "@/integrations/supabase/client";

export async function triggerRSSSync() {
  try {
    console.log('🚀 Manually triggering RSS sync...');
    
    const { data, error } = await supabase.functions.invoke('sync-rss-feeds', {
      body: {}
    });
    
    if (error) {
      console.error('❌ RSS sync error:', error);
      throw error;
    }
    
    console.log('✅ RSS sync response:', data);
    
    // After sync, let's check what's actually in the database
    const { data: articleCount, error: countError } = await supabase
      .from('news_articles')
      .select('id', { count: 'exact', head: true });
    
    if (!countError) {
      console.log(`📊 Total articles in database: ${articleCount?.length || 0}`);
    }
    
    return data;
  } catch (error) {
    console.error('❌ Failed to trigger RSS sync:', error);
    throw error;
  }
}

// Auto-run the sync when this file is imported in development
if (typeof window !== 'undefined' && window.location.hostname === 'localhost') {
  triggerRSSSync().then(() => {
    console.log('✅ Development sync completed');
  }).catch(console.error);
}
</file>

<file path="supabase/functions/generate-historical-report/index.ts">
import { serve } from "https://deno.land/std@0.168.0/http/server.ts"
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2'

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
}

// CONFIGURATION: Specific Henjii category feeds for Local 825 intelligence
// Category 1229: local-825
// Category 703: employer-watch
const HENJII_CATEGORY_FEEDS = [
  'https://henjii.com/category/local-825/feed/gn',
  'https://henjii.com/category/employer-watch/feed/gn',
];

interface ScrapedContent {
  articles: any[];
  jobs: any[];
}

// Enhanced function to scrape Henjii content for a specific date with improved content extraction
async function scrapeHenjiiForDate(targetDate: string): Promise<ScrapedContent> {
  const results: ScrapedContent = { articles: [], jobs: [] };
  const targetDateStr = targetDate;
  
  // Define Henjii RSS feeds for Local 825 and employer watch
  const feeds = [
    'https://henjii.com/category/local-825/feed/gn', // local-825
    'https://henjii.com/category/employer-watch/feed/gn'   // employer-watch
  ];
  
  try {
    console.log(`Scraping feeds for date range around ${targetDate}`);
    
    for (const feedUrl of feeds) {
      try {
        const response = await fetch(feedUrl, {
          headers: {
            'User-Agent': 'Mozilla/5.0 (compatible; DataPilot+ Historical Report Generator)',
          },
        });
        
        if (!response.ok) {
          console.error(`Failed to fetch ${feedUrl}: ${response.status}`);
          continue;
        }
        
        const feedText = await response.text();
        const items = extractRSSItems(feedText);
        
        for (const item of items) {
          if (!item.title || !item.link || !item.pubDate) continue;
          
          // More flexible date filtering - include content from 3 days around target date
          const itemDate = new Date(item.pubDate);
          const targetDateObj = new Date(targetDate);
          
          // Calculate days difference
          const timeDiff = Math.abs(itemDate.getTime() - targetDateObj.getTime());
          const daysDiff = Math.ceil(timeDiff / (1000 * 3600 * 24));
          
          // Include content from 3 days before and after the target date
          if (daysDiff <= 30) {
            // Fetch full article content for better analysis
            const fullContent = await fetchArticleContent(item.link);
            
            const cleanedItem = {
              title: cleanText(item.title),
              url: cleanText(item.link),
              content: fullContent || cleanText(item.content || item.description || ''),
              description: cleanText(item.description || ''),
              publishDate: item.pubDate,
              scrapedAt: new Date().toISOString(),
              category: item.category || 'general',
              wordCount: (fullContent || item.content || item.description || '').split(' ').length,
              daysFromTarget: daysDiff
            };
            
            // Better categorization logic for construction/labor content
            const isJob = (
              item.link.includes('employer-watch') ||
              item.category?.toLowerCase().includes('job') ||
              item.title.toLowerCase().includes('job') ||
              item.title.toLowerCase().includes('hiring') ||
              item.title.toLowerCase().includes('position') ||
              item.title.toLowerCase().includes('worker') ||
              item.title.toLowerCase().includes('employment') ||
              item.title.toLowerCase().includes('career') ||
              item.title.toLowerCase().includes('opportunity')
            );
            
            if (isJob) {
              results.jobs.push(cleanedItem);
            } else {
              results.articles.push(cleanedItem);
            }
          }
        }
        
      } catch (error) {
        console.error(`Error scraping ${feedUrl}:`, error);
      }
    }
    
    console.log(`Found ${results.articles.length} articles and ${results.jobs.length} jobs for date range around ${targetDate}`);
    return results;
    
  } catch (error) {
    console.error('Error scraping feeds:', error);
    return { articles: [], jobs: [] };
  }
}

// Improved function to fetch full article content
async function fetchArticleContent(url: string): Promise<string | null> {
  try {
    const response = await fetch(url, {
      headers: {
        'User-Agent': 'Mozilla/5.0 (compatible; DataPilot+ Historical Report Generator)',
      },
    });
    
    if (!response.ok) return null;
    
    const html = await response.text();
    
    // Extract main content from WordPress article with multiple selectors
    const contentSelectors = [
      /<div class="entry-content"[^>]*>([\s\S]*?)<\/div>/i,
      /<article[^>]*>([\s\S]*?)<\/article>/i,
      /<main[^>]*>([\s\S]*?)<\/main>/i,
      /<div class="post-content"[^>]*>([\s\S]*?)<\/div>/i,
      /<div class="content"[^>]*>([\s\S]*?)<\/div>/i
    ];
    
    let content = null;
    for (const selector of contentSelectors) {
      const match = html.match(selector);
      if (match) {
        content = match[1];
        break;
      }
    }
    
    if (content) {
      // Clean HTML and extract text
      content = content.replace(/<script[^>]*>[\s\S]*?<\/script>/gi, '');
      content = content.replace(/<style[^>]*>[\s\S]*?<\/style>/gi, '');
      content = content.replace(/<[^>]*>/g, ' ');
      content = cleanText(content);
      
      // Limit content length for API efficiency
      return content.substring(0, 3000);
    }
    
    return null;
  } catch (error) {
    console.error(`Error fetching article content from ${url}:`, error);
    return null;
  }
}

function extractRSSItems(feedText: string): any[] {
  const items: any[] = [];
  const itemMatches = feedText.match(/<item[^>]*>[\s\S]*?<\/item>/gi);
  
  if (itemMatches) {
    for (const itemMatch of itemMatches) {
      const item = {
        title: extractRSSField(itemMatch, 'title'),
        link: extractRSSField(itemMatch, 'link'),
        pubDate: extractRSSField(itemMatch, 'pubDate'),
        description: extractRSSField(itemMatch, 'description'),
        content: extractRSSField(itemMatch, 'content:encoded'),
        category: extractRSSField(itemMatch, 'category'),
      };
      
      if (item.title && item.link) {
        items.push(item);
      }
    }
  }
  
  return items;
}

function extractRSSField(item: string, field: string): string | null {
  const regex = new RegExp(`<${field}[^>]*>([\\s\\S]*?)<\\/${field}>`, 'i');
  const match = item.match(regex);
  return match ? match[1].trim() : null;
}

function cleanText(text: string): string {
  return text
    .replace(/<!\[CDATA\[|\]\]>/g, '')
    .replace(/<[^>]*>/g, '')
    .replace(/&nbsp;/g, ' ')
    .replace(/&amp;/g, '&')
    .replace(/&lt;/g, '<')
    .replace(/&gt;/g, '>')
    .replace(/&quot;/g, '"')
    .replace(/&#39;/g, "'")
    .replace(/&apos;/g, "'")
    .replace(/\s+/g, ' ')
    .trim();
}

// Enhanced AI analysis using OpenAI with detailed content analysis
async function generateAIAnalysis(articles: any[], jobs: any[], targetDate: string) {
  const openaiApiKey = Deno.env.get('OPENAI_API_KEY');
  
  if (!openaiApiKey) {
    console.error('OpenAI API key not found');
    return null;
  }
  
  // Prepare detailed content summaries with full text
  const articleSummaries = articles.slice(0, 15).map((article, index) => 
    `ARTICLE ${index + 1}:
Title: ${article.title}
URL: ${article.url}
Published: ${article.publishDate}
Category: ${article.category || 'general'}
Content: ${article.content.substring(0, 1500)}
Word Count: ${article.wordCount || 0}
---`
  ).join('\n\n');

  const jobSummaries = jobs.slice(0, 10).map((job, index) => 
    `JOB POSTING ${index + 1}:
Title: ${job.title}
URL: ${job.url}
Published: ${job.publishDate}
Content: ${job.content.substring(0, 1000)}
---`
  ).join('\n\n');

  const combinedContent = `CONSTRUCTION INDUSTRY CONTENT FOR ${targetDate}:

${articleSummaries}

${jobSummaries}`;
  
  // Always attempt AI analysis, even with minimal content
  if (!combinedContent.trim()) {
    console.log('No content available for AI analysis, but will attempt analysis anyway');
  }

  try {
    const response = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${openaiApiKey}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        model: "gpt-4.1",
        messages: [
          {
            role: "system",
            content: `You are a senior labor intelligence analyst specializing in construction industry analysis for Local 825 Operating Engineers union leadership in NY/NJ. 

Your role is to create comprehensive daily intelligence reports that provide actionable insights for union organizing, contract negotiations, and strategic planning.

CRITICAL INSTRUCTIONS:
- Analyze content from ±3 days around ${targetDate} for comprehensive coverage
- Focus exclusively on construction projects, infrastructure development, labor relations, safety incidents
- Extract specific details: company names, dollar amounts, locations, dates, project details
- Identify organizing opportunities, contract developments, competitive intelligence
- Prioritize actionable intelligence over general observations
- Use Local 825 terminology and NY/NJ regional focus
- If content is limited or not relevant, acknowledge this in your analysis and provide strategic insights based on the limited data available`
          },
          {
            role: "user",
            content: `Analyze the following construction industry content from ±30 days around ${targetDate} and create a comprehensive intelligence report for Local 825 Operating Engineers union leadership.

CONTENT TO ANALYZE:
${combinedContent || 'No specific content found for this date range, but please provide strategic analysis based on typical construction industry patterns and Local 825 priorities.'}

Generate a detailed JSON response with this exact structure:
{
  "dailySummary": "2-3 sentence executive summary highlighting critical developments from the date range around ${targetDate}",
  "keyInsights": [
    "8-12 detailed bullet points with specific companies, amounts, locations, strategic implications from content around ${targetDate}",
    "Focus on construction projects, safety incidents, labor disputes, major contracts, organizing opportunities"
  ],
  "highPriorityAlerts": [
    "2-4 urgent items requiring immediate leadership attention from the date range around ${targetDate}",
    "Safety incidents, major labor disputes, significant contract awards, time-sensitive opportunities"
  ],
  "trendAnalysis": "4-5 sentence analysis of patterns and market conditions observed in content around ${targetDate}",
  "verifiedHeadlines": [
    {
      "title": "Exact headline from source",
      "source": "Bulldozer",
      "url": "Source URL",
      "publishDate": "Publication date"
    }
  ],
  "strategicTakeaways": [
    "6-10 analytical insights for strategic planning based on intelligence from around ${targetDate}",
    "Organizing opportunities, market trends, competitive intelligence with specific company names"
  ],
  "actionItems": {
    "next_7_days": ["3-5 immediate tactical actions based on intelligence from around ${targetDate}"],
    "next_30_days": ["4-6 medium-term strategic actions for organizing campaigns"],
    "next_90_days": ["3-5 long-term strategic initiatives and partnerships"]
  }
}

REQUIREMENTS:
- Base analysis on content from ±3 days around ${targetDate} for comprehensive coverage
- Extract specific details (company names, dollar amounts, locations, dates)
- Maintain professional intelligence report tone
- Include working URLs and proper source attribution
- Prioritize actionable intelligence over general commentary
- If content is limited, acknowledge this and provide strategic analysis based on industry knowledge and Local 825 priorities
- Return ONLY valid JSON, no additional text`
          }
        ],
        max_tokens: 4000,
        temperature: 0.8
      }),
    });

    if (!response.ok) {
      console.error('OpenAI API error:', response.status, await response.text());
      return null;
    }

    const data = await response.json();
    const aiResponseText = data.choices[0]?.message?.content;
    
    if (!aiResponseText) {
      console.error('No response content from OpenAI');
      return null;
    }

    // Try to extract JSON from the response
    let aiResponse;
    try {
      // Look for JSON in the response
      const jsonMatch = aiResponseText.match(/\{[\s\S]*\}/);
      if (jsonMatch) {
        aiResponse = JSON.parse(jsonMatch[0]);
      } else {
        aiResponse = JSON.parse(aiResponseText);
      }
    } catch (parseError) {
      console.error('Error parsing AI response:', parseError);
      console.log('Raw AI response:', aiResponseText);
      return null;
    }

    console.log('AI analysis generated successfully');
    return aiResponse;
    
  } catch (error) {
    console.error('Error in AI analysis:', error);
    return null;
  }
}

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response('ok', { headers: corsHeaders })
  }

  try {
    const supabaseClient = createClient(
      Deno.env.get('SUPABASE_URL') ?? '',
      Deno.env.get('SUPABASE_SERVICE_ROLE_KEY') ?? ''
    )

    const { targetDate } = await req.json();
    
    if (!targetDate) {
      return new Response(
        JSON.stringify({ error: 'Target date is required' }),
        { status: 400, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
      );
    }

    console.log(`Starting historical report generation for exact date: ${targetDate}`);

    // Check if report already exists for this date
    const { data: existingReport } = await supabaseClient
      .from('daily_analytics')
      .select('id')
      .eq('analysis_date', targetDate)
      .single();

    // If report exists, delete it to regenerate with fresh content
    if (existingReport) {
      console.log(`Deleting existing report for ${targetDate} to regenerate with fresh content`);
      await supabaseClient
        .from('daily_analytics')
        .delete()
        .eq('analysis_date', targetDate);
    }

    // Scrape content for exact target date only
    const { articles, jobs } = await scrapeHenjiiForDate(targetDate);

    const newsArticlesCount = articles.length;
    const jobListingsCount = jobs.length;
    const laborAlertsCount = newsArticlesCount + jobListingsCount;

    // Always attempt AI analysis, even with minimal content
    console.log(`Attempting AI analysis for ${newsArticlesCount} articles and ${jobListingsCount} jobs`);
    const aiInsights = await generateAIAnalysis(articles, jobs, targetDate);
    
    // Generate dynamic insights based on actual content found
    const dynamicInsights = {
      dailySummary: aiInsights?.dailySummary || `Intelligence report for ${targetDate}: ${newsArticlesCount} construction industry articles and ${jobListingsCount} job opportunities analyzed.`,
      keyInsights: aiInsights?.keyInsights || [
        newsArticlesCount > 0 ? `${newsArticlesCount} construction industry developments tracked for ${targetDate}` : `Limited construction industry activity detected for ${targetDate}`,
        jobListingsCount > 0 ? `${jobListingsCount} employment opportunities identified for Local 825 members` : 'No new job opportunities identified',
        `Analysis covers content from ±3 days around ${targetDate} for comprehensive coverage`,
        `Intelligence sourced from henjii.com construction and labor industry coverage`
      ],
      highPriorityAlerts: aiInsights?.highPriorityAlerts || 
        (articles.length > 0 ? articles.slice(0, 3).map(a => a.title).filter(Boolean) : ['No high-priority alerts identified for this date range']),
      trendAnalysis: aiInsights?.trendAnalysis || 
        `Analysis for ${targetDate} shows ${newsArticlesCount > 0 ? `${newsArticlesCount} news developments` : 'limited activity'} and ${jobListingsCount > 0 ? `${jobListingsCount} job postings` : 'no new opportunities'} within the date range.`,
      verifiedHeadlines: aiInsights?.verifiedHeadlines || 
        articles.slice(0, 5).map(article => ({
          title: article.title,
          source: 'Henjii',
          url: article.url,
          publishDate: article.publishDate
        })),
      strategicTakeaways: aiInsights?.strategicTakeaways || [
        newsArticlesCount > 0 ? `${newsArticlesCount} construction industry developments from ${targetDate} require follow-up analysis` : `Limited construction activity around ${targetDate} suggests potential for increased monitoring`,
        jobListingsCount > 0 ? `Job market conditions around ${targetDate} show ${jobListingsCount} opportunities for member engagement` : 'Job market appears quiet for this date range',
        `Date range intelligence provides broader context for organizing efforts`,
        `Content analysis methodology ensures comprehensive market activity coverage`
      ],
      actionItems: aiInsights?.actionItems || {
        next_7_days: [
          newsArticlesCount > 0 ? `Follow up on ${targetDate} intelligence for immediate opportunities` : `Monitor for increased activity following ${targetDate}`,
          'Analyze trends from this date range against broader patterns',
          'Identify priority companies for outreach based on available intelligence'
        ],
        next_30_days: [
          `Integrate ${targetDate} insights into strategic campaign planning`,
          'Build relationships with contractors active in this period',
          'Develop targeted approaches from available intelligence'
        ],
        next_90_days: [
          `Use ${targetDate} analysis as baseline for ongoing monitoring`,
          'Establish patterns from activity tracking',
          'Incorporate insights into comprehensive organizing strategy'
        ]
      }
    };

    // Generate chart data based on actual content
    const companyNewsActivityData = Array.from({ length: 7 }, (_, i) => ({
      name: new Date(Date.now() - (6 - i) * 24 * 60 * 60 * 1000).toLocaleDateString('en-US', { month: 'short', day: 'numeric' }),
      value: i === 6 ? newsArticlesCount : 0
    }));

    const laborActivityData = [
      { name: 'Safety Issues', value: articles.filter(a => a.title.toLowerCase().includes('safety')).length },
      { name: 'Labor Disputes', value: articles.filter(a => a.title.toLowerCase().includes('dispute')).length },
      { name: 'Contract News', value: articles.filter(a => a.title.toLowerCase().includes('contract')).length },
      { name: 'Job Opportunities', value: jobListingsCount },
    ];

    // Store the historical report
    const { data: analyticsData, error: insertError } = await supabaseClient
      .from('daily_analytics')
      .insert({
        analysis_date: targetDate,
        analysis_time: '00:00:00',
        active_news_sources: 1,
        companies_tracked: 0,
        news_articles_count: newsArticlesCount,
        labor_alerts_count: laborAlertsCount,
        company_news_activity: companyNewsActivityData,
        labor_activity_tracking: laborActivityData,
        daily_summary: dynamicInsights.dailySummary,
        key_insights: dynamicInsights.keyInsights,
        high_priority_alerts: dynamicInsights.highPriorityAlerts,
        trend_analysis: dynamicInsights.trendAnalysis,
        detailed_analysis: JSON.stringify({
          verified_headlines: dynamicInsights.verifiedHeadlines,
          strategic_takeaways: dynamicInsights.strategicTakeaways,
          action_items: dynamicInsights.actionItems,
          analysis_note: `Dynamic analysis of content from date range around ${targetDate}`,
          content_summary: {
            total_articles: newsArticlesCount,
            total_jobs: jobListingsCount,
            analysis_method: aiInsights ? 'AI_ENHANCED' : 'DYNAMIC_GENERATED',
            date_filtering: 'DATE_RANGE_±3_DAYS',
            content_word_count: articles.reduce((sum, article) => sum + (article.wordCount || 0), 0),
            date_range_note: `Content included from ±3 days around ${targetDate} for comprehensive coverage`
          }
        })
      })
      .select()
      .single();

    if (insertError) throw insertError;

    console.log(`Historical report generated successfully for date range around ${targetDate}`);

    return new Response(
      JSON.stringify({
        success: true,
        message: `Historical report generated successfully for ${targetDate}`,
        data: analyticsData,
        summary: {
          articles: newsArticlesCount,
          jobs: jobListingsCount,
          insights: dynamicInsights.keyInsights?.length || 0,
          headlines: dynamicInsights.verifiedHeadlines?.length || 0,
          analysisMethod: aiInsights ? 'AI_ENHANCED' : 'DYNAMIC_GENERATED',
          dateFiltering: 'DATE_RANGE_±3_DAYS'
        }
      }),
      { headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
    );

  } catch (error) {
    console.error('Error generating historical report:', error);
    return new Response(
      JSON.stringify({
        success: false,
        error: error.message
      }),
      { 
        status: 500,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' }
      }
    );
  }
})
</file>

<file path="supabase/functions/scrape-jobs/index.ts">
import "https://deno.land/x/xhr@0.1.0/mod.ts";
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2';

const supabaseUrl = Deno.env.get('SUPABASE_URL')!;
const supabaseKey = Deno.env.get('SUPABASE_SERVICE_ROLE_KEY')!;
const openAIApiKey = Deno.env.get('OPENAI_API_KEY');

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

interface JobListing {
  title: string;
  url: string;
  content: string;
  publishDate: string;
}

// AI-powered job analysis for Local 825
async function analyzeJobWithAI(title: string, content: string): Promise<{
  improvedTitle?: string;
  company?: string;
  location?: string;
  payRange?: string;
  priority: 'high' | 'medium' | 'low';
  jobType: 'field' | 'office' | 'mechanic' | 'admin';
  equipmentTypes?: string[];
  certifications?: string[];
  experienceLevel?: 'entry' | 'mid' | 'senior';
  unionFriendly?: boolean;
  insights: string;
}> {
  if (!openAIApiKey) {
    console.log('OpenAI API key not available, using basic analysis');
    return {
      priority: 'medium',
      jobType: 'field',
      insights: 'Basic analysis - AI not available for detailed insights'
    };
  }

  try {
    const response = await fetch('https://api.openai.com/v1/responses', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${openAIApiKey}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        model: "gpt-4.1",
        input: [
          {
            "role": "system",
            "content": [
              {
                "type": "input_text",
                "text": `You are an expert labor organizer and construction industry analyst for Operating Engineers Local 825 (IUOE), a union representing heavy equipment operators in New York and New Jersey. Your task is to analyze job postings and provide comprehensive intelligence for union members and organizing efforts.

# Guidelines
- Analyze job postings for Local 825 member opportunities
- Focus on heavy equipment operator roles, construction positions
- Identify organizing opportunities and strategic implications
- Provide actionable insights for union leadership

# Output Format
Respond with valid JSON in this exact format:
{
  "improvedTitle": "Clear professional job title based on content",
  "company": "Company name or null",
  "location": "Location or null", 
  "payRange": "Pay range or null",
  "priority": "high/medium/low",
  "jobType": "field/office/mechanic/admin",
  "equipmentTypes": ["array of heavy equipment mentioned"],
  "certifications": ["array of required certifications"],
  "experienceLevel": "entry/mid/senior",
  "unionFriendly": true/false,
  "insights": "Brief explanation of relevance to Local 825"
}

# Priority Criteria
- High: Direct heavy equipment operator roles, union positions, high pay, NY/NJ location
- Medium: Related construction roles, decent pay, nearby locations
- Low: Administrative roles, lower pay, distant locations

# Job Type Categories
- field: Direct construction/equipment operation roles
- office: Administrative, management, or office-based roles
- mechanic: Equipment maintenance and repair roles
- admin: Administrative or support roles`
              }
            ]
          },
          {
            "role": "user",
            "content": [
              {
                "type": "input_text",
                "text": `Analyze this job posting for Local 825 Operating Engineers union intelligence:

ORIGINAL TITLE: ${title}
CONTENT: ${content}

Extract all relevant information for Local 825 members and organizing efforts.`
              }
            ]
          }
        ],
        text: {
          "format": {
            "type": "text"
          }
        },
        reasoning: {},
        tools: [
          {
            "type": "web_search_preview",
            "user_location": {
              "type": "approximate",
              "country": "US",
              "region": "new jersey"
            },
            "search_context_size": "high"
          }
        ],
        temperature: 0.7,
        max_output_tokens: 800,
        top_p: 1,
        store: false
      }),
    });

    if (!response.ok) {
      throw new Error(`OpenAI API error: ${response.statusText}`);
    }

    const aiData = await response.json();
    const analysisText = aiData.output[0].text;
    
    try {
      const jsonMatch = analysisText.match(/\{[\s\S]*\}/);
      if (!jsonMatch) {
        throw new Error('No JSON found in response');
      }
      
      const analysis = JSON.parse(jsonMatch[0]);
      return {
        improvedTitle: analysis.improvedTitle || undefined,
        company: analysis.company || undefined,
        location: analysis.location || undefined,
        payRange: analysis.payRange || undefined,
        priority: analysis.priority || 'medium',
        jobType: analysis.jobType || 'field',
        equipmentTypes: analysis.equipmentTypes || [],
        certifications: analysis.certifications || [],
        experienceLevel: analysis.experienceLevel || 'mid',
        unionFriendly: analysis.unionFriendly !== undefined ? analysis.unionFriendly : null,
        insights: analysis.insights || 'Job analysis completed'
      };
    } catch (parseError) {
      console.error('Failed to parse AI response:', analysisText);
      return {
        priority: 'medium',
        jobType: 'field',
        equipmentTypes: [],
        certifications: [],
        experienceLevel: 'mid',
        unionFriendly: null,
        insights: 'AI analysis failed - could not parse response'
      };
    }
    
  } catch (error) {
    console.error('Error in AI job analysis:', error);
    return {
      priority: 'medium',
      jobType: 'field',
      equipmentTypes: [],
      certifications: [],
      experienceLevel: 'mid',
      unionFriendly: null,
      insights: 'AI analysis failed - using default categorization'
    };
  }
}

// Scrape jobs from Henjii's Employer Watch category
async function scrapeHenjiiJobs(): Promise<JobListing[]> {
  try {
    console.log('Scraping Jobs & Opportunities');
    
    // RSS feed for Employer Watch category (JOBS ONLY)
    const rssUrl = 'https://henjii.com/category/employer-watch/feed/gn';
    const response = await fetch(rssUrl, {
      headers: {
        'User-Agent': 'Mozilla/5.0 (compatible; DataPilot+ Job Scraper)',
      },
    });
    
    if (!response.ok) {
      throw new Error(`Failed to fetch api: ${response.statusText}`);
    }
    
    const feedText = await response.text();
    const jobs: JobListing[] = [];
    
    // Parse RSS feed
    const itemMatches = feedText.match(/<item[^>]*>[\s\S]*?<\/item>/gi);
    
    if (itemMatches) {
      for (const itemMatch of itemMatches.slice(0, 20)) { // Limit to 20 jobs
        const title = extractRSSField(itemMatch, 'title');
        const link = extractRSSField(itemMatch, 'link');
        const pubDate = extractRSSField(itemMatch, 'pubDate');
        const description = extractRSSField(itemMatch, 'description');
        const content = extractRSSField(itemMatch, 'content:encoded') || description;
        
        if (title && link && content) {
          jobs.push({
            title: cleanRSSText(title),
            url: cleanRSSText(link),
            content: cleanRSSText(content),
            publishDate: pubDate ? cleanRSSText(pubDate) : new Date().toISOString(),
          });
        }
      }
    }
    
    console.log(`Found ${jobs.length} jobs from api`);
    return jobs;
    
  } catch (error) {
    console.error('Error scraping jobs using Bulldozer:', error);
    return [];
  }
}

function extractRSSField(item: string, field: string): string | null {
  const regex = new RegExp(`<${field}[^>]*>([\\s\\S]*?)<\\/${field}>`, 'i');
  const match = item.match(regex);
  return match ? match[1].trim() : null;
}

function cleanRSSText(text: string): string {
  return text
    .replace(/<!\[CDATA\[|\]\]>/g, '')
    .replace(/<[^>]*>/g, '')
    .replace(/&nbsp;/g, ' ')
    .replace(/&amp;/g, '&')
    .replace(/&lt;/g, '<')
    .replace(/&gt;/g, '>')
    .replace(/&quot;/g, '"')
    .replace(/&#39;/g, "'")
    .replace(/&apos;/g, "'")
    .replace(/\s+/g, ' ')
    .trim();
}

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const supabase = createClient(supabaseUrl, supabaseKey);
    
    console.log('Starting job scraping process...');
    
    // Scrape jobs from Henjii
    const scrapedJobs = await scrapeHenjiiJobs();
    
    if (scrapedJobs.length === 0) {
      return new Response(JSON.stringify({
        success: true,
        message: 'No new jobs found',
        processedJobs: 0
      }), {
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      });
    }

    // Check for existing jobs by URL
    const urls = scrapedJobs.map(job => job.url);
    const { data: existingJobs } = await supabase
      .from('job_listings')
      .select('url')
      .in('url', urls);

    const existingUrls = new Set(existingJobs?.map(job => job.url) || []);
    const newJobs = scrapedJobs.filter(job => !existingUrls.has(job.url));

    console.log(`Found ${newJobs.length} new jobs to process`);

    let processedCount = 0;
    const processedJobs: any[] = [];

    // Process each new job with AI analysis
    for (const job of newJobs) {
      console.log(`Analyzing job: ${job.title}`);
      
      const analysis = await analyzeJobWithAI(job.title, job.content);
      
      const processedJob = {
        title: analysis.improvedTitle || job.title, // Use improved title if available
        company: analysis.company,
        location: analysis.location,
        url: job.url,
        raw_content: job.content,
        processed_content: {
          originalTitle: job.title,
          publishDate: job.publishDate,
          scrapedAt: new Date().toISOString()
        },
        ai_analysis: JSON.stringify(analysis),
        priority: analysis.priority,
        job_type: analysis.jobType,
        pay_range: analysis.payRange,
        equipment_types: analysis.equipmentTypes,
        certifications: analysis.certifications,
        experience_level: analysis.experienceLevel,
        union_friendly: analysis.unionFriendly,
        insights: analysis.insights,
        wordpress_category: 'employer-watch',
        content_type: 'job',
        scraped_at: new Date().toISOString(),
        processed_at: new Date().toISOString(),
        is_processed: true,
        is_active: true,
      };

      processedJobs.push(processedJob);
      processedCount++;
    }

    // Insert processed jobs into database
    if (processedJobs.length > 0) {
      const { error: insertError } = await supabase
        .from('job_listings')
        .insert(processedJobs);

      if (insertError) {
        console.error('Error inserting jobs:', insertError);
        throw insertError;
      }

      console.log(`Successfully inserted ${processedJobs.length} new jobs`);
    }

    // Clean up old jobs (older than 30 days)
    const thirtyDaysAgo = new Date();
    thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);
    
    const { count: deletedCount } = await supabase
      .from('job_listings')
      .delete({ count: 'exact' })
      .lt('scraped_at', thirtyDaysAgo.toISOString());

    console.log(`Cleaned up ${deletedCount || 0} old jobs`);

    return new Response(JSON.stringify({
      success: true,
      totalScraped: scrapedJobs.length,
      newJobs: newJobs.length,
      processedJobs: processedCount,
      deletedOldJobs: deletedCount || 0,
      message: `Processed ${processedCount} new jobs`
    }), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });

  } catch (error) {
    console.error('Error in scrape-jobs function:', error);
    return new Response(JSON.stringify({ 
      error: error.message,
      success: false 
    }), {
      status: 500,
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });
  }
});
</file>

<file path="supabase/functions/send-webhook-notification/index.ts">
import { serve } from "https://deno.land/std@0.190.0/http/server.ts";
import { createClient } from "https://esm.sh/@supabase/supabase-js@2";

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

interface WebhookPayload {
  event: string;
  timestamp: string;
  data: any;
  source: string;
}

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const supabase = createClient(
      Deno.env.get('SUPABASE_URL') ?? '',
      Deno.env.get('SUPABASE_SERVICE_ROLE_KEY') ?? ''
    );

    // Get pending webhook logs
    const { data: webhookLogs, error: fetchError } = await supabase
      .from('webhook_logs')
      .select(`
        *,
        webhook_settings!inner(
          webhook_url,
          is_active,
          setting_name
        )
      `)
      .is('response_status', null)
      .eq('webhook_settings.is_active', true);

    if (fetchError) {
      console.error('Error fetching webhook logs:', fetchError);
      return new Response(JSON.stringify({ error: fetchError.message }), {
        status: 500,
        headers: { 'Content-Type': 'application/json', ...corsHeaders },
      });
    }

    const results = [];

    for (const log of webhookLogs || []) {
      try {
        console.log(`Sending webhook to ${log.webhook_settings.webhook_url}`);
        
        const webhookResponse = await fetch(log.webhook_settings.webhook_url, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            ...log.payload,
            webhook_id: log.id,
            setting_name: log.webhook_settings.setting_name,
          }),
        });

        const responseBody = await webhookResponse.text();

        // Update webhook log with response
        await supabase
          .from('webhook_logs')
          .update({
            response_status: webhookResponse.status,
            response_body: responseBody.substring(0, 1000), // Limit response body size
          })
          .eq('id', log.id);

        results.push({
          id: log.id,
          status: webhookResponse.status,
          success: webhookResponse.ok,
        });

        console.log(`Webhook ${log.id} sent with status: ${webhookResponse.status}`);

      } catch (error: any) {
        console.error(`Error sending webhook ${log.id}:`, error);
        
        // Update webhook log with error
        await supabase
          .from('webhook_logs')
          .update({
            response_status: 0,
            error_message: error.message,
          })
          .eq('id', log.id);

        results.push({
          id: log.id,
          success: false,
          error: error.message,
        });
      }
    }

    return new Response(JSON.stringify({ 
      processed: results.length,
      results 
    }), {
      status: 200,
      headers: { 'Content-Type': 'application/json', ...corsHeaders },
    });

  } catch (error: any) {
    console.error('Error in webhook notification function:', error);
    return new Response(JSON.stringify({ error: error.message }), {
      status: 500,
      headers: { 'Content-Type': 'application/json', ...corsHeaders },
    });
  }
});
</file>

<file path="supabase/migrations/20240712000000_add_page_maintenance.sql">
-- Migration: Add page_maintenance table for per-page maintenance mode
CREATE TABLE IF NOT EXISTS public.page_maintenance (
  page_name TEXT PRIMARY KEY,
  is_maintenance BOOLEAN NOT NULL DEFAULT FALSE
);

-- Insert default values for common pages
INSERT INTO public.page_maintenance (page_name, is_maintenance) VALUES
  ('site', FALSE),
  ('reports', FALSE),
  ('feed', FALSE),
  ('dashboard', FALSE)
ON CONFLICT (page_name) DO NOTHING;
</file>

<file path="supabase/migrations/20250710235221-56029d59-0016-4805-a980-1294307e506e.sql">
-- Allow authenticated users to delete news articles (will be controlled by UI permissions)
CREATE POLICY "Authenticated users can delete news articles" 
  ON public.news_articles 
  FOR DELETE 
  USING (auth.role() = 'authenticated'::text);

-- Allow admins to delete news articles specifically
CREATE POLICY "Admins can delete news articles" 
  ON public.news_articles 
  FOR DELETE 
  USING (
    EXISTS (
      SELECT 1 FROM public.user_roles 
      WHERE user_id = auth.uid() 
      AND role = 'admin'::app_role
    )
  );
</file>

<file path="supabase/migrations/20250711040534-44d63ca2-fa75-4d72-912a-891d5b58fe7c.sql">
-- Create tasks table for maintenance tracking
CREATE TABLE public.maintenance_tasks (
  id UUID NOT NULL DEFAULT gen_random_uuid() PRIMARY KEY,
  name TEXT NOT NULL,
  description TEXT,
  status TEXT NOT NULL DEFAULT 'pending' CHECK (status IN ('pending', 'processing', 'complete')),
  display_order INTEGER NOT NULL DEFAULT 0,
  icon_name TEXT DEFAULT 'Database',
  estimated_minutes INTEGER DEFAULT 5,
  created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(),
  updated_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(),
  created_by UUID REFERENCES auth.users(id),
  updated_by UUID REFERENCES auth.users(id)
);

-- Add Row Level Security
ALTER TABLE public.maintenance_tasks ENABLE ROW LEVEL SECURITY;

-- Policy to allow anyone to view tasks (for maintenance page)
CREATE POLICY "Anyone can view maintenance tasks" 
  ON public.maintenance_tasks 
  FOR SELECT 
  USING (true);

-- Policy to allow only admins to insert tasks
CREATE POLICY "Admins can insert maintenance tasks" 
  ON public.maintenance_tasks 
  FOR INSERT 
  WITH CHECK (
    EXISTS (
      SELECT 1 FROM public.user_roles 
      WHERE user_id = auth.uid() AND role = 'admin'
    )
  );

-- Policy to allow only admins to update tasks
CREATE POLICY "Admins can update maintenance tasks" 
  ON public.maintenance_tasks 
  FOR UPDATE 
  USING (
    EXISTS (
      SELECT 1 FROM public.user_roles 
      WHERE user_id = auth.uid() AND role = 'admin'
    )
  );

-- Policy to allow only admins to delete tasks
CREATE POLICY "Admins can delete maintenance tasks" 
  ON public.maintenance_tasks 
  FOR DELETE 
  USING (
    EXISTS (
      SELECT 1 FROM public.user_roles 
      WHERE user_id = auth.uid() AND role = 'admin'
    )
  );

-- Insert default tasks
INSERT INTO public.maintenance_tasks (name, status, display_order, icon_name, estimated_minutes) VALUES
('Data Organization', 'complete', 1, 'CheckCircle', 0),
('Security Checks', 'complete', 2, 'CheckCircle', 0),
('System Integration', 'complete', 3, 'CheckCircle', 0),
('Formatting Content', 'complete', 4, 'CheckCircle', 0),
('Loading Dashboard', 'processing', 5, 'Database', 2);

-- Function to calculate completion percentage
CREATE OR REPLACE FUNCTION get_maintenance_progress() 
RETURNS TABLE(
  total_tasks INTEGER,
  completed_tasks INTEGER,
  processing_tasks INTEGER,
  completion_percentage INTEGER,
  estimated_minutes_remaining INTEGER
) 
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
BEGIN
  RETURN QUERY
  SELECT 
    COUNT(*)::INTEGER as total_tasks,
    COUNT(CASE WHEN status = 'complete' THEN 1 END)::INTEGER as completed_tasks,
    COUNT(CASE WHEN status = 'processing' THEN 1 END)::INTEGER as processing_tasks,
    CASE 
      WHEN COUNT(*) = 0 THEN 100
      ELSE ROUND((COUNT(CASE WHEN status = 'complete' THEN 1 END)::DECIMAL / COUNT(*)::DECIMAL) * 100)::INTEGER
    END as completion_percentage,
    COALESCE(SUM(CASE WHEN status != 'complete' THEN estimated_minutes ELSE 0 END), 0)::INTEGER as estimated_minutes_remaining
  FROM public.maintenance_tasks;
END;
$$;
</file>

<file path="supabase/migrations/20250711055110-c6fc516d-cec1-4a70-b159-f4898ba8aeed.sql">
-- Add comprehensive company research columns to support the Master Report Framework
ALTER TABLE company_research ADD COLUMN IF NOT EXISTS executive_summary JSONB DEFAULT '{}';
ALTER TABLE company_research ADD COLUMN IF NOT EXISTS corporate_structure JSONB DEFAULT '{}';
ALTER TABLE company_research ADD COLUMN IF NOT EXISTS leadership_management JSONB DEFAULT '{}';
ALTER TABLE company_research ADD COLUMN IF NOT EXISTS workforce_analysis JSONB DEFAULT '{}';
ALTER TABLE company_research ADD COLUMN IF NOT EXISTS labor_relations JSONB DEFAULT '{}';
ALTER TABLE company_research ADD COLUMN IF NOT EXISTS projects_contracts JSONB DEFAULT '{}';
ALTER TABLE company_research ADD COLUMN IF NOT EXISTS safety_compliance JSONB DEFAULT '{}';
ALTER TABLE company_research ADD COLUMN IF NOT EXISTS financial_profile JSONB DEFAULT '{}';
ALTER TABLE company_research ADD COLUMN IF NOT EXISTS political_connections JSONB DEFAULT '{}';
ALTER TABLE company_research ADD COLUMN IF NOT EXISTS market_position JSONB DEFAULT '{}';
ALTER TABLE company_research ADD COLUMN IF NOT EXISTS strategic_pressure_points JSONB DEFAULT '{}';
ALTER TABLE company_research ADD COLUMN IF NOT EXISTS organizing_strategy JSONB DEFAULT '{}';
ALTER TABLE company_research ADD COLUMN IF NOT EXISTS appendices JSONB DEFAULT '{}';

-- Add metadata columns for better tracking
ALTER TABLE company_research ADD COLUMN IF NOT EXISTS logo_url TEXT;
ALTER TABLE company_research ADD COLUMN IF NOT EXISTS company_website TEXT;
ALTER TABLE company_research ADD COLUMN IF NOT EXISTS industry_sector TEXT;
ALTER TABLE company_research ADD COLUMN IF NOT EXISTS headquarters_location TEXT;
ALTER TABLE company_research ADD COLUMN IF NOT EXISTS employee_count INTEGER;
ALTER TABLE company_research ADD COLUMN IF NOT EXISTS annual_revenue BIGINT;
ALTER TABLE company_research ADD COLUMN IF NOT EXISTS union_status TEXT DEFAULT 'non-union';
ALTER TABLE company_research ADD COLUMN IF NOT EXISTS organizing_priority TEXT DEFAULT 'medium';
ALTER TABLE company_research ADD COLUMN IF NOT EXISTS last_research_update TIMESTAMP WITH TIME ZONE DEFAULT NOW();

-- Create indexes for better performance
CREATE INDEX IF NOT EXISTS idx_company_research_union_status ON company_research(union_status);
CREATE INDEX IF NOT EXISTS idx_company_research_organizing_priority ON company_research(organizing_priority);
CREATE INDEX IF NOT EXISTS idx_company_research_industry_sector ON company_research(industry_sector);
CREATE INDEX IF NOT EXISTS idx_company_research_last_update ON company_research(last_research_update DESC);

-- Insert sample data for Esposito Construction
INSERT INTO company_research (
  company_name,
  research_content,
  user_id,
  logo_url,
  company_website,
  industry_sector,
  headquarters_location,
  employee_count,
  annual_revenue,
  union_status,
  organizing_priority,
  executive_summary,
  corporate_structure,
  leadership_management,
  workforce_analysis,
  labor_relations
) VALUES (
  'Esposito Construction',
  'Comprehensive research profile for Esposito Construction - Site Development specialists operating in the Northeast construction market.',
  (SELECT id FROM auth.users LIMIT 1),
  '/lovable-uploads/9063e2fd-92ea-4d5c-b0af-42a80e6b106d.png',
  'https://espositoconstruction.com',
  'Construction - Site Development',
  'New Jersey, USA',
  150,
  25000000,
  'non-union',
  'high',
  '{
    "overview": "Esposito Construction is a prominent site development contractor specializing in excavation, grading, and infrastructure development across New Jersey and surrounding areas.",
    "key_metrics": {
      "years_in_business": 25,
      "market_share": "Regional leader in site development",
      "growth_rate": "15% annually"
    },
    "union_status": "Currently non-union with historical resistance to organizing efforts",
    "organizing_potential": "High - Growing workforce, public sector contracts, safety concerns",
    "priority_rating": "High Priority Target"
  }',
  '{
    "company_history": "Founded in 1998 by Tony Esposito, family-owned business",
    "ownership_structure": "Private family corporation",
    "subsidiaries": ["Esposito Trucking LLC", "Garden State Materials"],
    "facilities": [
      {
        "type": "headquarters",
        "address": "123 Industrial Blvd, Edison, NJ",
        "employees": 45
      },
      {
        "type": "equipment_yard", 
        "address": "456 Construction Way, Newark, NJ",
        "employees": 25
      }
    ],
    "services": ["Site preparation", "Excavation", "Grading", "Utility installation", "Road construction"],
    "geographic_coverage": ["New Jersey", "Eastern Pennsylvania", "Southern New York"]
  }',
  '{
    "key_executives": [
      {
        "name": "Anthony Esposito",
        "title": "CEO/President",
        "background": "30+ years construction experience, former Local 825 member",
        "compensation_est": "$500K+"
      },
      {
        "name": "Michael Esposito", 
        "title": "Operations Manager",
        "background": "Son of founder, MBA from Rutgers",
        "compensation_est": "$200K+"
      }
    ],
    "management_style": "Family-oriented but increasingly corporate as business grows",
    "political_affiliations": "Republican donors, anti-union stance"
  }',
  '{
    "total_employees": 150,
    "breakdown": {
      "equipment_operators": 65,
      "laborers": 45,
      "truck_drivers": 25,
      "administrative": 15
    },
    "union_representation": "None currently",
    "demographics": {
      "avg_age": 38,
      "tenure_avg": "4.2 years",
      "turnover_rate": "22% annually"
    },
    "compensation": {
      "operators_avg": "$28/hour",
      "laborers_avg": "$22/hour",
      "benefits": "Basic health insurance, 401k match"
    }
  }',
  '{
    "union_history": "No successful organizing campaigns, one failed attempt in 2019",
    "anti_union_tactics": ["Mandatory meetings", "Supervisor intimidation", "Wage increases during campaigns"],
    "consultants_used": ["Jackson Lewis LLP", "Labor Relations Institute"],
    "nlrb_cases": [
      {
        "case_number": "22-CA-123456",
        "year": 2019,
        "allegation": "Threatening employees during organizing campaign",
        "outcome": "Settlement - no admission of guilt"
      }
    ],
    "recent_organizing": "Local 825 attempted card drive in 2019, withdrew petition before election"
  }'
) ON CONFLICT (company_name, user_id) DO NOTHING;
</file>

<file path="supabase/migrations/20250711145849-d9965894-4b04-430d-bb9f-f5cd397e3bb6.sql">
-- Add AI analysis fields to daily_analytics table for enhanced report generation
ALTER TABLE public.daily_analytics 
ADD COLUMN IF NOT EXISTS ai_analysis_version TEXT DEFAULT 'v1.0',
ADD COLUMN IF NOT EXISTS executive_summary TEXT,
ADD COLUMN IF NOT EXISTS risk_assessment JSONB DEFAULT '[]'::jsonb,
ADD COLUMN IF NOT EXISTS labor_updates JSONB DEFAULT '[]'::jsonb,
ADD COLUMN IF NOT EXISTS key_headlines JSONB DEFAULT '[]'::jsonb;

-- Add comments for clarity
COMMENT ON COLUMN public.daily_analytics.ai_analysis_version IS 'Version of AI analysis used for this report';
COMMENT ON COLUMN public.daily_analytics.executive_summary IS 'AI-generated executive summary for the report';
COMMENT ON COLUMN public.daily_analytics.risk_assessment IS 'Array of risk assessment objects with level and description';
COMMENT ON COLUMN public.daily_analytics.labor_updates IS 'Array of labor update objects with description and changes';
COMMENT ON COLUMN public.daily_analytics.key_headlines IS 'Array of headline objects with title, source, url, and impact';

-- Update maintenance tasks to show 99% completion
UPDATE public.maintenance_tasks 
SET status = 'complete' 
WHERE status != 'complete' 
AND display_order <= (
  SELECT COUNT(*) * 0.99 
  FROM public.maintenance_tasks
);
</file>

<file path="supabase/migrations/20250711165231-78ce11bd-034e-4b5d-bffc-ff625d08a41f.sql">
-- Create webhook_settings table to store n8n webhook URLs and configuration
CREATE TABLE public.webhook_settings (
  id UUID NOT NULL DEFAULT gen_random_uuid() PRIMARY KEY,
  setting_name TEXT NOT NULL UNIQUE,
  webhook_url TEXT NOT NULL,
  is_active BOOLEAN NOT NULL DEFAULT true,
  description TEXT,
  created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(),
  updated_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(),
  created_by UUID REFERENCES auth.users(id),
  updated_by UUID REFERENCES auth.users(id)
);

-- Insert default webhook settings
INSERT INTO public.webhook_settings (setting_name, webhook_url, description) VALUES 
('test_webhook', 'https://flow.henjii.com/webhook-test/882d6034-537b-48c3-b77f-50c88ef75929', 'Test webhook URL for development and testing'),
('production_webhook', '', 'Production webhook URL for live notifications'),
('maintenance_alerts', '', 'Webhook for maintenance-related notifications'),
('task_updates', '', 'Webhook for task status updates');

-- Enable RLS on webhook_settings
ALTER TABLE public.webhook_settings ENABLE ROW LEVEL SECURITY;

-- Allow admins to manage webhook settings
CREATE POLICY "Admins can manage webhook settings" 
  ON public.webhook_settings 
  FOR ALL 
  USING (
    EXISTS (
      SELECT 1 FROM public.user_roles 
      WHERE user_id = auth.uid() AND role = 'admin'
    )
  );

-- Create webhook_logs table to track webhook calls
CREATE TABLE public.webhook_logs (
  id UUID NOT NULL DEFAULT gen_random_uuid() PRIMARY KEY,
  webhook_setting_id UUID REFERENCES public.webhook_settings(id),
  trigger_event TEXT NOT NULL,
  payload JSONB,
  response_status INTEGER,
  response_body TEXT,
  error_message TEXT,
  sent_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now()
);

-- Enable RLS on webhook_logs
ALTER TABLE public.webhook_logs ENABLE ROW LEVEL SECURITY;

-- Allow admins to view webhook logs
CREATE POLICY "Admins can view webhook logs" 
  ON public.webhook_logs 
  FOR SELECT 
  USING (
    EXISTS (
      SELECT 1 FROM public.user_roles 
      WHERE user_id = auth.uid() AND role = 'admin'
    )
  );

-- Function to trigger webhook notifications
CREATE OR REPLACE FUNCTION public.trigger_webhook_notification(
  event_type TEXT,
  event_data JSONB
) 
RETURNS void
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
BEGIN
  -- Insert webhook log entry that will be processed by edge function
  INSERT INTO public.webhook_logs (
    webhook_setting_id,
    trigger_event,
    payload,
    sent_at
  )
  SELECT 
    ws.id,
    event_type,
    jsonb_build_object(
      'event', event_type,
      'timestamp', now(),
      'data', event_data,
      'source', 'datapilot_admin'
    ),
    now()
  FROM public.webhook_settings ws
  WHERE ws.setting_name = 'test_webhook' 
    AND ws.is_active = true;
END;
$$;
</file>

<file path="supabase/migrations/20250712000000_update_rss_feeds_for_more_posts.sql">
-- Update RSS feed URLs to request more posts from WordPress
-- This will allow the sync to pull in more posts instead of just the default 10

UPDATE public.news_sources 
SET rss_url = 'https://henjii.com/category/local-825/feed/gn/?posts_per_page=100',
    description = 'Local 825 news and updates from WordPress (100 posts)'
WHERE rss_url = 'https://henjii.com/category/local-825/feed/gn';

UPDATE public.news_sources 
SET rss_url = 'https://henjii.com/category/employer-watch/feed/gn/?posts_per_page=100',
    description = 'Job opportunities and employer intelligence from WordPress (100 posts)'
WHERE rss_url = 'https://henjii.com/category/employer-watch/feed/gn';
</file>

<file path="package.json">
{
  "name": "vite_react_shadcn_ts",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "build:dev": "vite build --mode development",
    "lint": "eslint .",
    "preview": "vite preview"
  },
  "dependencies": {
    "@hookform/resolvers": "^3.9.0",
    "@radix-ui/react-accordion": "^1.2.0",
    "@radix-ui/react-alert-dialog": "^1.1.1",
    "@radix-ui/react-aspect-ratio": "^1.1.0",
    "@radix-ui/react-avatar": "^1.1.0",
    "@radix-ui/react-checkbox": "^1.1.1",
    "@radix-ui/react-collapsible": "^1.1.0",
    "@radix-ui/react-context-menu": "^2.2.1",
    "@radix-ui/react-dialog": "^1.1.2",
    "@radix-ui/react-dropdown-menu": "^2.1.1",
    "@radix-ui/react-hover-card": "^1.1.1",
    "@radix-ui/react-label": "^2.1.0",
    "@radix-ui/react-menubar": "^1.1.1",
    "@radix-ui/react-navigation-menu": "^1.2.0",
    "@radix-ui/react-popover": "^1.1.1",
    "@radix-ui/react-progress": "^1.1.0",
    "@radix-ui/react-radio-group": "^1.2.0",
    "@radix-ui/react-scroll-area": "^1.1.0",
    "@radix-ui/react-select": "^2.1.1",
    "@radix-ui/react-separator": "^1.1.0",
    "@radix-ui/react-slider": "^1.2.0",
    "@radix-ui/react-slot": "^1.1.0",
    "@radix-ui/react-switch": "^1.1.0",
    "@radix-ui/react-tabs": "^1.1.0",
    "@radix-ui/react-toast": "^1.2.1",
    "@radix-ui/react-toggle": "^1.1.0",
    "@radix-ui/react-toggle-group": "^1.1.0",
    "@radix-ui/react-tooltip": "^1.1.4",
    "@supabase/supabase-js": "^2.49.4",
    "@tanstack/react-query": "^5.56.2",
    "@types/qrcode": "^1.5.5",
    "class-variance-authority": "^0.7.1",
    "clsx": "^2.1.1",
    "cmdk": "^1.0.0",
    "date-fns": "^3.6.0",
    "dotenv": "^17.2.0",
    "embla-carousel-react": "^8.3.0",
    "framer-motion": "^12.9.7",
    "input-otp": "^1.2.4",
    "lucide-react": "^0.462.0",
    "next-themes": "^0.3.0",
    "react": "^18.3.1",
    "react-day-picker": "^8.10.1",
    "react-dom": "^18.3.1",
    "react-hook-form": "^7.53.0",
    "react-markdown": "^10.1.0",
    "react-resizable-panels": "^2.1.3",
    "react-router-dom": "^6.26.2",
    "recharts": "^2.12.7",
    "sonner": "^1.5.0",
    "tailwind-merge": "^2.5.2",
    "tailwindcss-animate": "^1.0.7",
    "vaul": "^0.9.3",
    "zod": "^3.23.8"
  },
  "devDependencies": {
    "@eslint/js": "^9.9.0",
    "@tailwindcss/typography": "^0.5.15",
    "@types/node": "^22.5.5",
    "@types/react": "^18.3.3",
    "@types/react-dom": "^18.3.0",
    "@vitejs/plugin-react-swc": "^3.5.0",
    "autoprefixer": "^10.4.20",
    "eslint": "^9.9.0",
    "eslint-plugin-react-hooks": "^5.1.0-rc.0",
    "eslint-plugin-react-refresh": "^0.4.9",
    "globals": "^15.9.0",
    "lovable-tagger": "^1.1.7",
    "postcss": "^8.4.47",
    "tailwindcss": "^3.4.11",
    "typescript": "^5.5.3",
    "typescript-eslint": "^8.0.1",
    "vite": "^5.4.1"
  }
}
</file>

<file path="README.md">
# Bulldozer: Construction & Labor Intelligence Dashboard

## What is Bulldozer?

**Bulldozer** is a real-time intelligence dashboard for monitoring the construction industry and labor activity, with a special focus on Local 825 and related union news. It automatically collects, analyzes, and summarizes news, job postings, and labor actions from multiple sources, giving union leaders, researchers, and members a clear, actionable view of the industry landscape.

## How does it work?

- **Automated Feed Sync:** Bulldozer pulls news and job data from trusted sources (like Henjii, Employer Watch, and others) using RSS and custom integrations.
- **AI-Powered Analysis:** New articles are automatically analyzed using OpenAI (GPT-4o) to extract summaries, relevance, and key insights for Local 825 and the broader labor movement.
- **Database & Dashboard:** All data is stored in a modern database and surfaced in a beautiful, responsive dashboard built with React, shadcn-ui, and Tailwind CSS.
- **Actionable Insights:** The dashboard highlights trends, top companies, labor alerts, and high-priority news, making it easy to spot what matters most.

## Why does it work?

- **Automation:** No more manual news tracking—Bulldozer keeps you up to date, 24/7.
- **AI Summaries:** Get the gist of every article instantly, with union-specific context.
- **Custom Filtering:** Only see what’s relevant to Local 825 and your interests.
- **Modern UX:** Fast, mobile-friendly, and easy to use for all members and staff.

---

## How to Launch the Project

**Requirements:** Node.js & npm (recommended: install with [nvm](https://github.com/nvm-sh/nvm#installing-and-updating))

```sh
# 1. Clone the repository
git clone <YOUR_GIT_URL>
cd <YOUR_PROJECT_NAME>

# 2. Install dependencies
npm i

# 3. Start the development server
npm run dev
```

- Visit [Lovable Project](https://lovable.dev/projects/23d3b1aa-e04c-4220-9bec-4f8079b4ae5a) for instant cloud editing and preview.
- You can also use GitHub Codespaces or edit files directly in GitHub.

---

## Recent Updates (July 2025)
- **AI Analysis:** Switched to OpenAI GPT-4o for faster, more accurate article summaries and relevance scoring.
- **Feed Filtering:** Improved logic to only show Local 825 news and separate job content.
- **Dashboard Redesign:**
  - Left-aligned, modern header and uniform analytics cards.
  - 7-day trend chart for articles processed.
  - Visual improvements to Feed Sync Status and quick actions.
- **TypeScript Quality:** Replaced all `any` types with strict interfaces for safer, more maintainable code.
- **Bug Fixes:** Fixed database sync, migration issues, and improved error handling throughout.

---

## Roadmap / Planned Updates
- **Advanced Insights:**
  - Top companies mentioned this week
  - Trending topics/tag cloud
  - Recent high-priority news/labor actions
- **Mobile UX:** Further polish for mobile and tablet users
- **User Roles:** Admin panel and permissions
- **Custom Alerts:** User-defined news/labor alerts
- **More Integrations:** Add more news/job sources and union data feeds
- **Performance:** Ongoing speed and reliability improvements

---

## Tech Stack
- Vite
- TypeScript
- React
- shadcn-ui
- Tailwind CSS
- Supabase (database & functions)
- OpenAI (AI analysis)

---

## Lovable & Deployment
- Edit and preview instantly at [Lovable Project](https://lovable.dev/projects/23d3b1aa-e04c-4220-9bec-4f8079b4ae5a)
- To deploy: Open Lovable, click Share -> Publish
- Custom domain? Go to Project > Settings > Domains and click Connect Domain ([guide](https://docs.lovable.dev/tips-tricks/custom-domain#step-by-step-guide))
</file>

<file path="scripts/backfill-posts.js">
const { createClient } = require('@supabase/supabase-js');
require('dotenv').config();

// Supabase configuration
const supabaseUrl = process.env.VITE_SUPABASE_URL || 'https://jekpvqacecqnflweqmre.supabase.co';
const supabaseKey = process.env.VITE_SUPABASE_ANON_KEY;

if (!supabaseKey) {
  console.error('❌ VITE_SUPABASE_ANON_KEY not found in environment variables');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseKey);

// WordPress API endpoints
const WORDPRESS_BASE_URL = 'https://henjii.com/wp-json/wp/v2';
const CATEGORIES = {
  'local-825': 1229,
  'employer-watch': 703
};

async function fetchAllPosts(categoryId, perPage = 100) {
  console.log(`🔍 Fetching posts for category ID: ${categoryId}`);
  
  let allPosts = [];
  let page = 1;
  let hasMore = true;
  
  while (hasMore) {
    try {
      console.log(`📄 Fetching page ${page}...`);
      
      const response = await fetch(
        `${WORDPRESS_BASE_URL}/posts?categories=${categoryId}&per_page=${perPage}&page=${page}&orderby=date&order=desc`,
        {
          headers: {
            'User-Agent': 'Mozilla/5.0 (compatible; Local825-Backfill/1.0)',
          }
        }
      );
      
      if (!response.ok) {
        console.error(`❌ HTTP ${response.status}: ${response.statusText}`);
        break;
      }
      
      const posts = await response.json();
      console.log(`📋 Found ${posts.length} posts on page ${page}`);
      
      if (posts.length === 0) {
        hasMore = false;
      } else {
        allPosts = allPosts.concat(posts);
        page++;
      }
      
      // Add a small delay to be respectful to the API
      await new Promise(resolve => setTimeout(resolve, 100));
      
    } catch (error) {
      console.error(`❌ Error fetching page ${page}:`, error);
      break;
    }
  }
  
  console.log(`✅ Total posts fetched: ${allPosts.length}`);
  return allPosts;
}

function cleanHtml(html) {
  if (!html) return '';
  
  // Remove HTML tags but preserve content structure
  let cleaned = html.replace(/<script[^>]*>.*?<\/script>/gi, '');
  cleaned = cleaned.replace(/<style[^>]*>.*?<\/style>/gi, '');
  
  // Keep paragraph breaks and line breaks for readability
  cleaned = cleaned.replace(/<\/p>/gi, '\n\n');
  cleaned = cleaned.replace(/<br\s*\/?>/gi, '\n');
  cleaned = cleaned.replace(/<\/div>/gi, '\n');
  
  // Remove remaining HTML tags
  cleaned = cleaned.replace(/<[^>]*>/g, ' ');
  
  // Decode HTML entities
  cleaned = cleaned.replace(/&nbsp;/g, ' ');
  cleaned = cleaned.replace(/&amp;/g, '&');
  cleaned = cleaned.replace(/&lt;/g, '<');
  cleaned = cleaned.replace(/&gt;/g, '>');
  cleaned = cleaned.replace(/&quot;/g, '"');
  cleaned = cleaned.replace(/&#39;/g, "'");
  cleaned = cleaned.replace(/&apos;/g, "'");
  cleaned = cleaned.replace(/&#8211;/g, "–");
  cleaned = cleaned.replace(/&#8230;/g, "...");
  cleaned = cleaned.replace(/&#038;/g, "&");
  cleaned = cleaned.replace(/&#124;/g, "|");
  
  // Clean up excessive whitespace but preserve paragraph structure
  cleaned = cleaned.replace(/[ \t]+/g, ' ');
  cleaned = cleaned.replace(/\n\s*\n/g, '\n\n');
  cleaned = cleaned.trim();
  
  return cleaned;
}

function categorizeFromCategoryId(categoryId) {
  if (categoryId === CATEGORIES['local-825']) {
    return {
      wordpress_category: 'local-825',
      content_type: 'news'
    };
  } else if (categoryId === CATEGORIES['employer-watch']) {
    return {
      wordpress_category: 'employer-watch',
      content_type: 'job'
    };
  }
  
  // Default fallback
  return {
    wordpress_category: 'local-825',
    content_type: 'news'
  };
}

async function getNewsSourceId(categoryName) {
  // Get or create news source for this category
  const { data: existingSource, error: fetchError } = await supabase
    .from('news_sources')
    .select('id')
    .eq('name', `${categoryName} News Feed`)
    .single();
  
  if (existingSource) {
    return existingSource.id;
  }
  
  // Create new source if it doesn't exist
  const { data: newSource, error: insertError } = await supabase
    .from('news_sources')
    .insert({
      name: `${categoryName} News Feed`,
      rss_url: `https://henjii.com/category/${categoryName}/feed/gn/?posts_per_page=100`,
      description: `${categoryName} news and updates from WordPress`,
      is_active: true,
      company_names: [categoryName === 'local-825' ? 'Local 825' : 'Various Employers']
    })
    .select('id')
    .single();
  
  if (insertError) {
    console.error(`❌ Error creating news source for ${categoryName}:`, insertError);
    return null;
  }
  
  return newSource.id;
}

async function processPosts(posts, categoryName) {
  console.log(`🔄 Processing ${posts.length} posts for ${categoryName}...`);
  
  const sourceId = await getNewsSourceId(categoryName);
  if (!sourceId) {
    console.error(`❌ Could not get source ID for ${categoryName}`);
    return;
  }
  
  const categorization = categorizeFromCategoryId(CATEGORIES[categoryName]);
  let processedCount = 0;
  let skippedCount = 0;
  let errorCount = 0;
  
  for (const post of posts) {
    try {
      // Check if article already exists
      const { data: existingArticle } = await supabase
        .from('news_articles')
        .select('id')
        .eq('url', post.link)
        .maybeSingle();
      
      if (existingArticle) {
        console.log(`⚠️ Article already exists: ${post.title.rendered}`);
        skippedCount++;
        continue;
      }
      
      // Prepare article data
      const articleData = {
        title: post.title.rendered,
        description: cleanHtml(post.excerpt.rendered),
        url: post.link,
        published_at: post.date,
        source_id: sourceId,
        content: cleanHtml(post.content.rendered),
        excerpt: cleanHtml(post.excerpt.rendered),
        wordpress_category: categorization.wordpress_category,
        content_type: categorization.content_type,
        company_mentioned: post._embedded?.author?.[0]?.name || 'Bulldozer',
        is_analyzed: false,
        priority_level: 'medium',
        local_825_relevance: null
      };
      
      // Insert article
      const { error: insertError } = await supabase
        .from('news_articles')
        .insert(articleData);
      
      if (insertError) {
        console.error(`❌ Error inserting article: ${post.title.rendered}`, insertError);
        errorCount++;
      } else {
        console.log(`✅ Inserted: ${post.title.rendered}`);
        processedCount++;
      }
      
      // Small delay to avoid overwhelming the database
      await new Promise(resolve => setTimeout(resolve, 50));
      
    } catch (error) {
      console.error(`❌ Error processing post: ${post.title.rendered}`, error);
      errorCount++;
    }
  }
  
  console.log(`📊 Summary for ${categoryName}:`);
  console.log(`   ✅ Processed: ${processedCount}`);
  console.log(`   ⚠️ Skipped: ${skippedCount}`);
  console.log(`   ❌ Errors: ${errorCount}`);
}

async function main() {
  console.log('🚀 Starting API backfill...');
  
  try {
    // Process Local 825 posts
    console.log('\n📰 Processing Intel & News...');
    const local825Posts = await fetchAllPosts(CATEGORIES['local-825']);
    await processPosts(local825Posts, 'local-825');
    
    // Process Employer Watch posts
    console.log('\n💼 Processing Jobs & Opportunities...');
    const employerWatchPosts = await fetchAllPosts(CATEGORIES['employer-watch']);
    await processPosts(employerWatchPosts, 'employer-watch');
    
    console.log('\n🎉 Backfill completed successfully!');
    
  } catch (error) {
    console.error('❌ Critical error during backfill:', error);
    process.exit(1);
  }
}

// Run the backfill
main();
</file>

<file path="scripts/README.md">
# WordPress API Backfill Script

This script fetches all posts from the WordPress API and inserts them into your Supabase database.

## Setup

1. **Install dependencies:**
   ```bash
   cd scripts
   npm install
   ```

2. **Set up environment variables:**
   Create a `.env` file in the `scripts` directory with:
   ```
   VITE_SUPABASE_URL=https://jekpvqacecqnflweqmre.supabase.co
   VITE_SUPABASE_ANON_KEY=your_supabase_anon_key_here
   ```

## Usage

Run the backfill script:
```bash
npm run backfill
```

Or directly:
```bash
node backfill-posts.js
```

## What it does

1. **Fetches all posts** from both Local 825 and Employer Watch categories
2. **Processes in batches** of 100 posts per page
3. **Cleans HTML content** and preserves formatting
4. **Checks for duplicates** before inserting
5. **Categorizes properly** as news or job content
6. **Creates news sources** if they don't exist

## Expected Output

```
🚀 Starting WordPress API backfill...

📰 Processing Local 825 posts...
🔍 Fetching posts for category ID: 1229
📄 Fetching page 1...
📋 Found 100 posts on page 1
📄 Fetching page 2...
📋 Found 50 posts on page 2
✅ Total posts fetched: 150
🔄 Processing 150 posts for local-825...
✅ Inserted: Turnpike Authority drops local contractor...
✅ Inserted: New construction project announced...
📊 Summary for local-825:
   ✅ Processed: 150
   ⚠️ Skipped: 0
   ❌ Errors: 0

💼 Processing Jobs...
🔍 Fetching posts for category ID: 703
📄 Fetching page 1...
📋 Found 100 posts on page 1
✅ Total posts fetched: 100
🔄 Processing 100 jobs...
✅ Inserted: Heavy equipment operator needed...
📊 Summary for jobs:
   ✅ Processed: 100
   ⚠️ Skipped: 0
   ❌ Errors: 0

🎉 Backfill completed successfully!
```

## Notes

- The script respects API rate limits with small delays
- Duplicate articles are skipped automatically
- All posts are marked as `is_analyzed: false` for manual review
- Content is cleaned and formatted for better display
</file>

<file path="src/components/chat/MessageList.tsx">
import { useRef, useEffect } from "react";
import { Loader2, Brain, Search, FileText } from "lucide-react";
import { Avatar, AvatarImage, AvatarFallback } from "@/components/ui/avatar";
import { Message } from "./types";
import { MarkdownRenderer } from "./MarkdownRenderer";

interface MessageListProps {
  messages: Message[];
  isLoading: boolean;
  processingStatus?: string;
}

export const MessageList = ({ messages, isLoading, processingStatus }: MessageListProps) => {
  const messagesEndRef = useRef<HTMLDivElement>(null);

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
  };

  useEffect(() => {
    scrollToBottom();
  }, [messages, processingStatus]);

  const getProcessingIcon = (status: string) => {
    if (status.includes('research') || status.includes('searching')) {
      return <Search className="h-4 w-4 animate-pulse" />;
    }
    if (status.includes('thinking') || status.includes('reasoning')) {
      return <Brain className="h-4 w-4 animate-pulse" />;
    }
    if (status.includes('sources') || status.includes('analyzing')) {
      return <FileText className="h-4 w-4 animate-pulse" />;
    }
    return <Loader2 className="h-4 w-4 animate-spin" />;
  };

  return (
    <div className="flex-1 overflow-y-auto px-4 sm:px-6 py-4 space-y-4 bg-white h-full" style={{ WebkitOverflowScrolling: 'touch' }}>
      {messages.map((message) => (
        <div
          key={message.id}
          className={`flex gap-3 ${message.isUser ? 'justify-end' : 'justify-start'}`}
        >
          {!message.isUser && (
            <Avatar className="h-8 w-8 flex-shrink-0">
              <AvatarImage 
                src="https://www.freeiconspng.com/uploads/bulldozer-icon-1.png" 
                alt="Bulldozer"
              />
              <AvatarFallback className="bg-gray-100">B</AvatarFallback>
            </Avatar>
          )}
          
          <div className={`max-w-[85%] sm:max-w-[99%] ${message.isUser ? 'order-first' : ''}`}>
            <div
              className={`px-3 sm:px-4 py-3 rounded-2xl text-sm ${
                message.isUser
                  ? 'bg-[#5A7FFF] text-white'
                  : 'bg-gray-50 text-gray-900 border border-gray-200'
              }`}
            >
              {message.isUser ? (
                <p className="whitespace-pre-wrap break-words">{message.text}</p>
              ) : (
                <div className="prose prose-sm max-w-none">
                  <MarkdownRenderer content={message.text} />
                </div>
              )}
            </div>
            <p className={`text-xs mt-1 opacity-60 ${
              message.isUser ? 'text-gray-500 text-right' : 'text-gray-500'
            }`}>
              {message.timestamp.toLocaleTimeString([], { 
                hour: '2-digit', 
                minute: '2-digit' 
              })}
            </p>
          </div>

          {message.isUser && (
            <Avatar className="h-8 w-8 flex-shrink-0">
              <AvatarImage 
                src="https://www.iuoe825.org/wp-content/uploads/2016/03/825_2_120x120.png" 
                alt="Local 825"
              />
              <AvatarFallback className="bg-[#5A7FFF] text-white">U</AvatarFallback>
            </Avatar>
          )}
        </div>
      ))}
      
      {isLoading && (
        <div className="flex gap-3 justify-start">
          <Avatar className="h-8 w-8 flex-shrink-0">
            <AvatarImage 
              src="https://www.freeiconspng.com/uploads/bulldozer-icon-1.png" 
              alt="Bulldozer"
            />
            <AvatarFallback className="bg-gray-100">B</AvatarFallback>
          </Avatar>
          <div className="bg-gray-50 border border-gray-200 px-4 py-3 rounded-2xl max-w-[85%]">
            <div className="flex items-center gap-2 text-gray-600">
              {processingStatus ? (
                <>
                  {getProcessingIcon(processingStatus)}
                  <span className="text-sm">{processingStatus}</span>
                </>
              ) : (
                <>
                  <Loader2 className="h-4 w-4 animate-spin" />
                  <span className="text-sm">Bulldozer is thinking...</span>
                </>
              )}
            </div>
          </div>
        </div>
      )}
      
      <div ref={messagesEndRef} />
    </div>
  );
};
</file>

<file path="src/components/feed/HighPriorityNews.tsx">
import React, { useState, useEffect } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { AlertTriangle, ExternalLink, Bot } from "lucide-react";
import { supabase } from "@/integrations/supabase/client";
import { useNavigate } from "react-router-dom";

interface HighPriorityArticle {
  id: string;
  title: string;
  description: string;
  url: string;
  source_id: string;
  company_mentioned: string;
  published_at: string;
  local_825_relevance: string;
  news_sources: {
    name: string;
    description: string | null;
  };
  priority_level?: string;
}

export default function HighPriorityNews() {
  const [articles, setArticles] = useState<HighPriorityArticle[]>([]);
  const [loading, setLoading] = useState(true);
  const [isUsingFallback, setIsUsingFallback] = useState(false);
  const navigate = useNavigate();

  useEffect(() => {
    fetchHighPriorityNews();
  }, []);

  const fetchHighPriorityNews = async () => {
    try {
      setLoading(true);
      
      console.log('Fetching all articles to debug');
      
      // Simple query to see what's in the database
      const { data, error } = await supabase
        .from('news_articles')
        .select(`
          id,
          source_id,
          title,
          description,
          url,
          published_at,
          company_mentioned,
          created_at,
          excerpt,
          full_analysis,
          local_825_relevance,
          is_analyzed,
          analyzed_at,
          wordpress_category,
          content_type,
          news_sources (
            name,
            description
          )
        `)
        .order('published_at', { ascending: false })
        .limit(10);

      if (error) throw error;
      
      console.log(`Found ${data?.length || 0} total articles in database`);
      console.log('Sample articles:', data?.slice(0, 3).map(a => ({ title: a.title, url: a.url, wordpress_category: a.wordpress_category, content_type: a.content_type })));

      if (data) {
        setArticles(data.map(article => ({
          ...article,
          priority: 'medium',
          category: 'general'
        })));
      }
      
    } catch (error) {
      console.error('Error fetching articles:', error);
      setArticles([]);
    } finally {
      setLoading(false);
    }
  };

  const cleanDescription = (description: string) => {
    if (!description) return '';
    
    return description
      .replace(/&#8230;/g, '...')
      .replace(/&#38;/g, '&')
      .replace(/&nbsp;/g, ' ')
      .replace(/Job Summary.*?Date:/gi, '')
      .replace(/Title:.*?Company:/gi, '')
      .replace(/Company:.*?Location:/gi, '')
      .replace(/Location:.*?Date:/gi, '')
      .replace(/Date Posted:.*?$/gi, '')
      .trim();
  };

  const getPriorityBadge = (article: HighPriorityArticle) => {
    // Use priority_level from database if available
    if (article.priority_level) {
      switch (article.priority_level) {
        case 'critical':
          return <Badge className="bg-red-100 text-red-800 border-red-200">CRITICAL</Badge>;
        case 'high':
          return <Badge className="bg-orange-100 text-orange-800 border-orange-200">HIGH</Badge>;
        case 'medium':
          return <Badge className="bg-yellow-100 text-yellow-800 border-yellow-200">MEDIUM</Badge>;
        case 'low':
          return <Badge className="bg-blue-100 text-blue-800 border-blue-200">LOW</Badge>;
        default:
          break;
      }
    }
    
    // Fallback to keyword-based priority detection
    const title = article.title.toLowerCase();
    const description = article.description?.toLowerCase() || "";
    
    // Critical indicators for Local 825 content
    const criticalKeywords = ["endorses", "endorsement", "governor", "election", "vote", "political", "union leadership", "contract negotiation", "strike", "emergency"];
    const isCritical = criticalKeywords.some(keyword => 
      title.includes(keyword) || description.includes(keyword)
    );
    
    if (isCritical) {
      return <Badge className="bg-red-100 text-red-800 border-red-200">CRITICAL</Badge>;
    }

    // High priority indicators
    const highKeywords = ["bridge", "construction", "infrastructure", "project", "begins", "delay", "cost", "safety", "accident"];
    const isHigh = highKeywords.some(keyword => 
      title.includes(keyword) || description.includes(keyword)
    );
    
    if (isHigh) {
      return <Badge className="bg-orange-100 text-orange-800 border-orange-200">HIGH</Badge>;
    }

    return <Badge className="bg-orange-100 text-orange-800 border-orange-200">HIGH</Badge>;
  };

  const formatDate = (dateString: string): string => {
    if (!dateString) return "";
    
    try {
      const date = new Date(dateString);
      return date.toISOString().split('T')[0]; // Returns YYYY-MM-DD format
    } catch (error) {
      return "";
    }
  };

  if (loading) {
    return (
      <Card className="mb-6 border-red-200 bg-red-50/30">
        <CardHeader className="pb-4">
          <CardTitle className="text-lg font-bold flex items-center gap-2 text-red-800">
            <AlertTriangle className="h-5 w-5" />
            {isUsingFallback ? 'Recent News & Updates' : 'High Priority News & Insights'}
          </CardTitle>
          <p className="text-sm text-red-700">
            {isUsingFallback 
              ? 'Latest news articles from the past week'
              : 'Latest developments that directly impact Local 825 members and operations'
            }
          </p>
        </CardHeader>
        <CardContent className="pt-0">
          <div className="space-y-4">
            {[1, 2, 3].map(i => (
              <div key={i} className="animate-pulse bg-white rounded-lg p-4 border">
                <div className="h-4 bg-gray-200 rounded w-3/4 mb-2"></div>
                <div className="h-3 bg-gray-200 rounded w-1/2 mb-2"></div>
                <div className="h-3 bg-gray-200 rounded w-1/4"></div>
              </div>
            ))}
          </div>
        </CardContent>
      </Card>
    );
  }

  if (articles.length === 0) {
    return null;
  }

  return (
    <Card className="mb-6 border-red-200 bg-red-50/30">
      <CardHeader className="pb-4">
        <div className="flex items-start justify-between">
          <div>
            <CardTitle className="text-lg font-bold flex items-center gap-2 text-red-800">
              <AlertTriangle className="h-5 w-5" />
              {isUsingFallback ? 'Recent News & Updates' : 'High Priority News & Insights'}
            </CardTitle>
            <p className="text-sm text-red-700">
              {isUsingFallback 
                ? 'Latest news articles from the past week'
                : 'Latest developments that directly impact Local 825 members and operations'
              }
            </p>
          </div>
          <Button
            size="sm"
            variant="outline"
            asChild
            className="flex items-center gap-2 text-blue-600 hover:text-blue-800"
          >
            <a 
              href="https://825chat.datapilotplus.com" 
              target="_blank" 
              rel="noopener noreferrer"
            >
              <Bot className="h-4 w-4" />
              Ask Assistant
            </a>
          </Button>
        </div>
      </CardHeader>
      <CardContent className="pt-0">
        <div className="space-y-4">
          {articles.map((article) => (
            <div
              key={article.id}
              className="bg-white rounded-lg p-4 border border-gray-200 hover:border-gray-300 transition-colors"
            >
              <div className="flex items-start justify-between gap-3 mb-3">
                <div className="flex items-center gap-2">
                  {getPriorityBadge(article)}
                  <span className="text-xs text-gray-500">
                    {formatDate(article.published_at)}
                  </span>
                </div>
              </div>
              
              <h3 className="font-semibold text-gray-900 mb-2 line-clamp-2">
                {article.title}
              </h3>
              
              {article.description && (
                <p className="text-sm text-gray-600 mb-3 line-clamp-2">
                  {cleanDescription(article.description)}
                </p>
              )}
              
              <div className="flex items-center justify-between">
                <span className="text-xs text-gray-500">
                  Source: {article.news_sources?.name || 'Unknown'}
                </span>
                <Button
                  variant="ghost"
                  size="sm"
                  asChild
                  className="text-xs text-blue-600 hover:text-blue-800 h-auto p-1"
                >
                  <a href={article.url} target="_blank" rel="noopener noreferrer">
                    Read Full Story
                    <ExternalLink className="h-3 w-3 ml-1" />
                  </a>
                </Button>
              </div>
            </div>
          ))}
        </div>
      </CardContent>
    </Card>
  );
}
</file>

<file path="src/components/BulldozerFeeds.tsx">
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { RefreshCw, Search, Building2 } from "lucide-react";
import { useState } from "react";
import { useBulldozerSync } from "@/hooks/useBulldozerSync";
import { useNewsSources } from "@/hooks/useNewsSources";

export default function BulldozerFeeds() {
  const [searchQuery, setSearchQuery] = useState("");
  const { refreshing, triggerBulldozerSync } = useBulldozerSync();
  const { sources, loading, error } = useNewsSources();

  const handleRefresh = async () => {
    await triggerBulldozerSync();
  };

  const filteredSources = sources.filter(source =>
    source.name.toLowerCase().includes(searchQuery.toLowerCase()) ||
    (source.company_names && source.company_names.some(company => 
      company.toLowerCase().includes(searchQuery.toLowerCase())
    ))
  );

  return (
    <div className="space-y-4 sm:space-y-6">
      <div className="space-y-4">
        <div className="text-left">
          <h2 className="text-xl sm:text-2xl font-bold text-gray-900 dark:text-gray-100 text-left">Bulldozer Intelligence</h2>
          <p className="text-sm sm:text-base text-muted-foreground mt-1 text-left">
            Automated news gathering from Local 825 sources and construction industry feeds. 
            Bulldozer intelligence continuously monitors websites and forums for the latest 
            updates, job postings, and industry news relevant to your organization.
          </p>
        </div>
        
        <div className="flex flex-col sm:flex-row gap-4 items-start sm:items-center">
          <Button
            onClick={handleRefresh}
            disabled={refreshing}
            className="w-full sm:w-auto flex items-center justify-center gap-2 h-12 rounded-xl font-medium"
          >
            <RefreshCw className={`h-4 w-4 ${refreshing ? 'animate-spin' : ''}`} />
            {refreshing ? 'Syncing Intelligence...' : 'Sync Latest Updates'}
          </Button>
        </div>
      </div>

      <div className="flex flex-col sm:flex-row items-stretch sm:items-center gap-3">
        <div className="relative flex-1">
          <Search className="absolute left-4 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground" />
          <Input
            placeholder="Search Local 825 updates..."
            value={searchQuery}
            onChange={(e) => setSearchQuery(e.target.value)}
            className="pl-11 h-12 rounded-xl border-gray-200/50 dark:border-gray-800/50 bg-white/50 dark:bg-gray-900/50 backdrop-blur-sm"
          />
        </div>
      </div>

      <Card className="bg-white/50 dark:bg-gray-900/50 backdrop-blur-sm border-gray-200/50 dark:border-gray-800/50 rounded-2xl shadow-sm">
        <CardHeader className="pb-4">
          <CardTitle className="flex items-center gap-3 text-lg sm:text-xl">
            <div className="w-10 h-10 bg-primary/10 rounded-full flex items-center justify-center">
              <Building2 className="h-5 w-5 text-primary" />
            </div>
            <div>
              <div className="font-semibold text-gray-900 dark:text-gray-100">Local 825 Intelligence Feed</div>
              <p className="text-sm text-muted-foreground font-normal">
                Real-time monitoring of Local 825 category updates including job listings
              </p>
            </div>
          </CardTitle>
        </CardHeader>
        <CardContent className="pt-0">
          {loading ? (
            <div className="text-center py-12">
              <div className="w-12 h-12 mx-auto mb-4 bg-primary/10 rounded-full flex items-center justify-center">
                <RefreshCw className="h-6 w-6 animate-spin text-primary" />
              </div>
              <p className="text-muted-foreground">Loading Local 825 updates...</p>
            </div>
          ) : error ? (
            <div className="text-center py-12 text-red-500">
              <p>Error loading updates: {error}</p>
            </div>
          ) : (
            <div className="space-y-3">
              {/* Local 825 Content Display */}
              <div className="bg-white/80 dark:bg-gray-800/50 backdrop-blur-sm border border-gray-200/50 dark:border-gray-700/50 rounded-xl p-4 transition-all duration-200 hover:shadow-sm">
                <div className="flex flex-col sm:flex-row sm:items-start sm:justify-between gap-2 mb-3">
                  <h3 className="font-semibold text-base text-gray-900 dark:text-gray-100">Local 825 Category Feed</h3>
                  <span className="text-xs font-medium text-green-700 bg-green-100 dark:bg-green-900/30 dark:text-green-300 px-2 py-1 rounded-full w-fit">
                    Active
                  </span>
                </div>
                <p className="text-sm text-muted-foreground mb-3 leading-relaxed">
                  Actively syncing posts from Local 825 category on henjii.com from the last 14 days. 
                  This feed automatically captures union announcements, industry updates, member communications,
                  and job listings relevant to Local 825 members.
                </p>
                <div className="flex flex-wrap gap-2">
                  <span className="text-xs font-medium bg-blue-100 text-blue-800 dark:bg-blue-900/30 dark:text-blue-300 px-3 py-1 rounded-full">
                    henjii.com
                  </span>
                  <span className="text-xs font-medium bg-orange-100 text-orange-800 dark:bg-orange-900/30 dark:text-orange-300 px-3 py-1 rounded-full">
                    Local 825 Category
                  </span>
                  <span className="text-xs font-medium bg-purple-100 text-purple-800 dark:bg-purple-900/30 dark:text-purple-300 px-3 py-1 rounded-full">
                    Jobs Included
                  </span>
                </div>
              </div>

              {filteredSources.length === 0 && searchQuery && (
                <div className="text-center py-12 text-muted-foreground">
                  <div className="w-12 h-12 mx-auto mb-4 bg-gray-100 dark:bg-gray-800 rounded-full flex items-center justify-center">
                    <Search className="h-6 w-6" />
                  </div>
                  <p>No updates found matching your search.</p>
                </div>
              )}
            </div>
          )}
        </CardContent>
      </Card>
    </div>
  );
}
</file>

<file path="src/components/DatabaseCheck.tsx">
import React, { useState, useEffect } from 'react';
import { supabase } from '@/integrations/supabase/client';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { NewsArticle } from '@/types';

export default function DatabaseCheck() {
  const [articleCount, setArticleCount] = useState<number>(0);
  const [sourceCount, setSourceCount] = useState<number>(0);
  const [recentArticles, setRecentArticles] = useState<NewsArticle[]>([]);

  useEffect(() => {
    const checkDatabase = async () => {
      try {
        // Count articles
        const { count: articles } = await supabase
          .from('news_articles')
          .select('*', { count: 'exact', head: true });
        
        setArticleCount(articles || 0);

        // Count sources
        const { count: sources } = await supabase
          .from('news_sources')
          .select('*', { count: 'exact', head: true });
        
        setSourceCount(sources || 0);

        // Get recent articles
        const { data: recent } = await supabase
          .from('news_articles')
          .select('id, title, created_at, wordpress_category, content_type')
          .order('created_at', { ascending: false })
          .limit(5);
        
        setRecentArticles(recent || []);
        
        console.log('Database check:', { articles, sources, recent });
      } catch (error) {
        console.error('Database check error:', error);
      }
    };

    checkDatabase();
  }, []);

  return (
    <Card className="mb-4">
      <CardHeader>
        <CardTitle>Database Status</CardTitle>
      </CardHeader>
      <CardContent>
        <div className="space-y-2">
          <p>Total Articles: {articleCount}</p>
          <p>Total Sources: {sourceCount}</p>
          <div>
            <p className="font-semibold">Recent Articles:</p>
            {recentArticles.map(article => (
              <div key={article.id} className="text-sm">
                {article.title} ({article.wordpress_category || 'no-category'})
              </div>
            ))}
          </div>
        </div>
      </CardContent>
    </Card>
  );
}
</file>

<file path="src/components/MaintenanceToggle.tsx">
import { useState, useEffect } from "react";
import { supabase } from "@/integrations/supabase/client";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Switch } from "@/components/ui/switch";
import { Badge } from "@/components/ui/badge";
import { useToast } from "@/hooks/use-toast";

interface MaintenanceToggleProps {
  maintenanceMode: boolean;
  setMaintenanceMode: (mode: boolean) => void;
  isAdmin: boolean;
}

export default function MaintenanceToggle({ 
  maintenanceMode, 
  setMaintenanceMode, 
  isAdmin 
}: MaintenanceToggleProps) {
  const [updating, setUpdating] = useState(false);
  const { toast } = useToast();

  const triggerMaintenanceWebhook = async (enabled: boolean) => {
    try {
      const { error } = await supabase.rpc('trigger_webhook_notification', {
        event_type: 'maintenance_mode_changed',
        event_data: {
          maintenance_mode: enabled,
          timestamp: new Date().toISOString(),
          admin_action: enabled ? 'maintenance_enabled' : 'maintenance_disabled',
          system_status: {
            status: enabled ? 'maintenance' : 'live',
            message: enabled 
              ? 'System is now in maintenance mode - only admins can access'
              : 'System is now live and accessible to all users'
          }
        }
      });

      if (error) {
        console.error('Error triggering maintenance webhook:', error);
      } else {
        // Process the webhook immediately
        supabase.functions.invoke('send-webhook-notification').catch(console.error);
      }
    } catch (error) {
      console.error('Error in maintenance webhook notification:', error);
    }
  };

  const handleMaintenanceToggle = async (enabled: boolean) => {
    console.log("Toggling maintenance mode to:", enabled);
    setUpdating(true);
    
    try {
      // Use the RPC function to update the setting with service role privileges
      const { error: rpcError } = await supabase.rpc('update_site_setting', {
        key: 'maintenance_mode',
        value: enabled.toString()
      });

      if (rpcError) {
        console.error("Error updating maintenance mode via RPC:", rpcError);
        throw rpcError;
      }

      // Verify the update
      const { data: verifyData, error: verifyError } = await supabase
        .from('site_settings')
        .select('setting_value')
        .eq('setting_key', 'maintenance_mode')
        .single();

      if (verifyError) {
        console.error("Error verifying update:", verifyError);
        throw verifyError;
      }

      console.log("Maintenance mode update verified:", { 
        requested: enabled.toString(), 
        actual: verifyData.setting_value 
      });
      
      // Only update local state if database update was successful
      if (verifyData.setting_value === enabled.toString()) {
        setMaintenanceMode(enabled);
        
        // Trigger webhook notification
        await triggerMaintenanceWebhook(enabled);
        
        toast({
          title: enabled ? "Maintenance Mode Enabled" : "Maintenance Mode Disabled",
          description: enabled 
            ? "Only admin users can now access the site."
            : "Site is now accessible to all users.",
        });
      } else {
        throw new Error(`Database update failed: expected ${enabled}, got ${verifyData.setting_value}`);
      }
    } catch (error) {
      console.error("Error toggling maintenance mode:", error);
      toast({
        title: "Error",
        description: "Failed to update maintenance mode. Please try again.",
        variant: "destructive",
      });
    } finally {
      setUpdating(false);
    }
  };

  return (
    <Card>
      <CardHeader>
        <CardTitle className="flex items-center gap-2">
          System Status
          <Badge variant={maintenanceMode ? "destructive" : "default"}>
            {maintenanceMode ? "Maintenance" : "Live"}
          </Badge>
        </CardTitle>
        <CardDescription>
          Control the platform-wide maintenance mode. Admins with proper roles bypass maintenance automatically.
        </CardDescription>
      </CardHeader>
      <CardContent className="space-y-4">
        <div className="flex items-center justify-between">
          <div>
            <h3 className="font-medium">Platform-Wide Maintenance Mode</h3>
            <p className="text-sm text-muted-foreground">
              When enabled, only users with admin roles can access the site
            </p>
          </div>
          <Switch
            checked={maintenanceMode}
            onCheckedChange={handleMaintenanceToggle}
            disabled={updating}
          />
        </div>
        
        {maintenanceMode && (
          <div className="mt-4 p-4 bg-orange-50 dark:bg-orange-900/20 border border-orange-200 dark:border-orange-800 rounded-lg">
            <p className="text-sm text-orange-800 dark:text-orange-200">
              🔧 Maintenance mode is currently active. Only admin users can access the site.
            </p>
          </div>
        )}
        
        {!maintenanceMode && (
          <div className="mt-4 p-4 bg-green-50 dark:bg-green-900/20 border border-green-200 dark:border-green-800 rounded-lg">
            <p className="text-sm text-green-800 dark:text-green-200">
              ✅ Site is live and accessible to all users.
            </p>
          </div>
        )}
      </CardContent>
    </Card>
  );
}
</file>

<file path="src/components/MaintenanceWrapper.tsx">
import { useState, useEffect } from "react";
import { useLocation } from "react-router-dom";
import { supabase } from "@/integrations/supabase/client";
import { useAuth } from "@/contexts/AuthContext";
import MaintenancePage from "./MaintenancePage";

interface MaintenanceWrapperProps {
  children: React.ReactNode;
}

export default function MaintenanceWrapper({ children }: MaintenanceWrapperProps) {
  const { user } = useAuth();
  const location = useLocation();
  const [isMaintenanceMode, setIsMaintenanceMode] = useState(false);
  const [isAdminUser, setIsAdminUser] = useState(false);
  const [isPasswordAuthenticated, setIsPasswordAuthenticated] = useState(false);
  const [loading, setLoading] = useState(true);

  const checkUserRole = async (userId: string) => {
    try {
      const { data, error } = await supabase
        .rpc('has_role', { 
          _user_id: userId, 
          _role: 'admin' 
        });
      
      if (error) {
        console.error("Error checking user role:", error);
        return false;
      }
      
      return data === true;
    } catch (error) {
      console.error("Error checking user role:", error);
      return false;
    }
  };

  useEffect(() => {
    const checkMaintenanceMode = async () => {
      try {
        // Check if user is admin
        let adminStatus = false;
        if (user) {
          adminStatus = await checkUserRole(user.id);
          setIsAdminUser(adminStatus);
        }

        // Check for password authentication
        const passwordAuth = localStorage.getItem("adminAuthenticated") === "true";
        setIsPasswordAuthenticated(passwordAuth);
        
        // Check Supabase for maintenance mode setting
        const { data, error } = await supabase
          .from('site_settings')
          .select('setting_value')
          .eq('setting_key', 'maintenance_mode')
          .single();
        
        if (error) {
          console.error("Error fetching maintenance mode:", error);
          setIsMaintenanceMode(false);
        } else {
          const isMaintenanceActive = data?.setting_value === 'true';
          setIsMaintenanceMode(isMaintenanceActive);
          console.log("MaintenanceWrapper check:", { 
            maintenanceMode: data?.setting_value, 
            isMaintenanceActive, 
            isAdmin: adminStatus,
            isPasswordAuth: passwordAuth,
            userId: user?.id,
            currentPath: location.pathname
          });
        }
        
        setLoading(false);
      } catch (error) {
        console.error("Error checking maintenance mode:", error);
        setIsMaintenanceMode(false);
        setIsAdminUser(false);
        setIsPasswordAuthenticated(false);
        setLoading(false);
      }
    };

    // Check immediately
    checkMaintenanceMode();

    // Set up real-time subscription to listen for maintenance mode changes
    const channel = supabase
      .channel('maintenance-mode-changes')
      .on(
        'postgres_changes',
        {
          event: 'UPDATE',
          schema: 'public',
          table: 'site_settings',
          filter: 'setting_key=eq.maintenance_mode',
        },
        (payload) => {
          console.log('Maintenance mode updated via realtime:', payload.new);
          const newValue = payload.new.setting_value === 'true';
          setIsMaintenanceMode(newValue);
        }
      )
      .subscribe();

    // Force a check on focus/visibility change to catch any missed updates
    const handleVisibilityChange = () => {
      if (!document.hidden) {
        console.log("Page became visible, rechecking maintenance mode");
        checkMaintenanceMode();
      }
    };

    const handleFocus = () => {
      console.log("Window focused, rechecking maintenance mode");
      checkMaintenanceMode();
    };

    document.addEventListener("visibilitychange", handleVisibilityChange);
    window.addEventListener("focus", handleFocus);
    
    return () => {
      supabase.removeChannel(channel);
      document.removeEventListener("visibilitychange", handleVisibilityChange);
      window.removeEventListener("focus", handleFocus);
    };
  }, [user, location.pathname]);

  // Allow access to admin routes even during maintenance mode
  const isAdminRoute = location.pathname.startsWith('/admin');
  
  // Show maintenance page if maintenance mode is active AND user is not an admin (either role-based or password) AND not on admin route
  if (isMaintenanceMode && !isAdminUser && !isPasswordAuthenticated && !isAdminRoute) {
    console.log("MaintenanceWrapper: Showing maintenance page", { 
      isMaintenanceMode, 
      isAdminUser, 
      isPasswordAuthenticated, 
      isAdminRoute 
    });
    return <MaintenancePage />;
  }

  if (loading) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-black">
        <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-orange-500"></div>
      </div>
    );
  }

  console.log("MaintenanceWrapper: Showing normal content", { 
    isMaintenanceMode, 
    isAdminUser, 
    isPasswordAuthenticated, 
    isAdminRoute 
  });
  return <>{children}</>;
}
</file>

<file path="src/components/WebhookManagement.tsx">
import { useState, useEffect, useCallback } from "react";
import { supabase } from "@/integrations/supabase/client";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Switch } from "@/components/ui/switch";
import { Textarea } from "@/components/ui/textarea";
import { useToast } from "@/hooks/use-toast";
import { Badge } from "@/components/ui/badge";
import { Webhook, Send, AlertCircle, CheckCircle, Clock, RefreshCw } from "lucide-react";
import { Tables } from "@/integrations/supabase/types";

type WebhookSetting = Tables<"webhook_settings">;
type WebhookLog = Tables<"webhook_logs">;

export default function WebhookManagement() {
  const [webhookSettings, setWebhookSettings] = useState<WebhookSetting[]>([]);
  const [webhookLogs, setWebhookLogs] = useState<WebhookLog[]>([]);
  const [loading, setLoading] = useState(true);
  const [testingWebhook, setTestingWebhook] = useState<string | null>(null);
  const { toast } = useToast();

  const fetchWebhookSettings = useCallback(async () => {
    try {
      const { data, error } = await supabase
        .from('webhook_settings')
        .select('*')
        .order('created_at', { ascending: true });

      if (error) throw error;
      setWebhookSettings(data || []);
    } catch (error) {
      console.error('Error fetching webhook settings:', error);
      toast({
        title: "Error",
        description: "Failed to load webhook settings",
        variant: "destructive",
      });
    }
  }, [toast]);

  const fetchWebhookLogs = useCallback(async () => {
    try {
      const { data, error } = await supabase
        .from('webhook_logs')
        .select('*')
        .order('sent_at', { ascending: false })
        .limit(20);

      if (error) throw error;
      setWebhookLogs(data || []);
    } catch (error) {
      console.error('Error fetching webhook logs:', error);
    } finally {
      setLoading(false);
    }
  }, []);

  useEffect(() => {
    fetchWebhookSettings();
    fetchWebhookLogs();
  }, [fetchWebhookSettings, fetchWebhookLogs]);

  const updateWebhookSetting = async (id: string, updates: Partial<WebhookSetting>) => {
    try {
      const { error } = await supabase
        .from('webhook_settings')
        .update({
          ...updates,
          updated_at: new Date().toISOString()
        })
        .eq('id', id);

      if (error) throw error;

      toast({
        title: "Success",
        description: "Webhook setting updated successfully",
      });

      fetchWebhookSettings();
    } catch (error) {
      console.error('Error updating webhook setting:', error);
      toast({
        title: "Error",
        description: "Failed to update webhook setting",
        variant: "destructive",
      });
    }
  };

  const testWebhook = async (settingName: string) => {
    setTestingWebhook(settingName);
    try {
      // Trigger a test webhook notification
      const { error } = await supabase.rpc('trigger_webhook_notification', {
        event_type: 'test_webhook',
        event_data: {
          message: 'This is a test webhook notification from DataPilot+ Admin Panel',
          timestamp: new Date().toISOString(),
          test_data: {
            admin_action: 'webhook_test',
            setting_name: settingName
          }
        }
      });

      if (error) throw error;

      // Process the webhook
      const { error: processError } = await supabase.functions.invoke('send-webhook-notification');
      
      if (processError) throw processError;

      toast({
        title: "Test Sent",
        description: "Test webhook notification has been sent",
      });

      // Refresh logs to show the test
      setTimeout(() => {
        fetchWebhookLogs();
      }, 1000);

    } catch (error) {
      console.error('Error testing webhook:', error);
      toast({
        title: "Error",
        description: "Failed to send test webhook",
        variant: "destructive",
      });
    } finally {
      setTestingWebhook(null);
    }
  };

  const processAllWebhooks = async () => {
    try {
      const { error } = await supabase.functions.invoke('send-webhook-notification');
      
      if (error) throw error;

      toast({
        title: "Processing",
        description: "All pending webhooks are being processed",
      });

      setTimeout(() => {
        fetchWebhookLogs();
      }, 2000);

    } catch (error) {
      console.error('Error processing webhooks:', error);
      toast({
        title: "Error",
        description: "Failed to process webhooks",
        variant: "destructive",
      });
    }
  };

  if (loading) {
    return (
      <Card>
        <CardHeader>
          <CardTitle>Webhook Management</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="flex items-center justify-center py-8">
            <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-primary"></div>
          </div>
        </CardContent>
      </Card>
    );
  }

  return (
    <div className="space-y-6">
      <Card>
        <CardHeader>
          <div className="flex items-center justify-between">
            <div>
              <CardTitle className="flex items-center gap-2">
                <Webhook className="w-5 h-5" />
                Webhook Settings
              </CardTitle>
              <CardDescription>
                Configure n8n webhook URLs for automated notifications
              </CardDescription>
            </div>
            <Button onClick={processAllWebhooks} variant="outline">
              <RefreshCw className="w-4 h-4 mr-2" />
              Process All
            </Button>
          </div>
        </CardHeader>
        <CardContent className="space-y-6">
          {webhookSettings.map((setting) => (
            <div key={setting.id} className="border rounded-lg p-4 space-y-4">
              <div className="flex items-center justify-between">
                <div>
                  <h3 className="font-medium capitalize">
                    {setting.setting_name.replace('_', ' ')}
                  </h3>
                  <p className="text-sm text-muted-foreground">
                    {setting.description}
                  </p>
                </div>
                <div className="flex items-center gap-2">
                  <Switch
                    checked={setting.is_active}
                    onCheckedChange={(checked) =>
                      updateWebhookSetting(setting.id, { is_active: checked })
                    }
                  />
                  <Button
                    size="sm"
                    variant="outline"
                    onClick={() => testWebhook(setting.setting_name)}
                    disabled={testingWebhook === setting.setting_name || !setting.webhook_url}
                  >
                    {testingWebhook === setting.setting_name ? (
                      <RefreshCw className="w-4 h-4 animate-spin" />
                    ) : (
                      <Send className="w-4 h-4" />
                    )}
                  </Button>
                </div>
              </div>
              
              <div className="space-y-2">
                <Label htmlFor={`webhook-${setting.id}`}>Webhook URL</Label>
                <Input
                  id={`webhook-${setting.id}`}
                  value={setting.webhook_url}
                  onChange={(e) =>
                    updateWebhookSetting(setting.id, { webhook_url: e.target.value })
                  }
                  placeholder="https://your-n8n-instance.com/webhook/..."
                />
              </div>

              <div className="space-y-2">
                <Label htmlFor={`description-${setting.id}`}>Description</Label>
                <Textarea
                  id={`description-${setting.id}`}
                  value={setting.description || ''}
                  onChange={(e) =>
                    updateWebhookSetting(setting.id, { description: e.target.value })
                  }
                  placeholder="Description of this webhook's purpose..."
                  rows={2}
                />
              </div>
            </div>
          ))}
        </CardContent>
      </Card>

      <Card>
        <CardHeader>
          <CardTitle>Recent Webhook Activity</CardTitle>
          <CardDescription>
            Last 20 webhook notifications and their status
          </CardDescription>
        </CardHeader>
        <CardContent>
          {webhookLogs.length === 0 ? (
            <p className="text-center py-8 text-muted-foreground">
              No webhook activity yet
            </p>
          ) : (
            <div className="space-y-3">
              {webhookLogs.map((log) => (
                <div
                  key={log.id}
                  className="flex items-center justify-between p-3 border rounded-lg"
                >
                  <div className="flex-1">
                    <div className="flex items-center gap-2">
                      <span className="font-medium">{log.trigger_event}</span>
                      {log.response_status === null ? (
                        <Badge variant="secondary">
                          <Clock className="w-3 h-3 mr-1" />
                          Pending
                        </Badge>
                      ) : log.response_status >= 200 && log.response_status < 300 ? (
                        <Badge variant="default">
                          <CheckCircle className="w-3 h-3 mr-1" />
                          Success
                        </Badge>
                      ) : (
                        <Badge variant="destructive">
                          <AlertCircle className="w-3 h-3 mr-1" />
                          Failed
                        </Badge>
                      )}
                    </div>
                    <p className="text-sm text-muted-foreground">
                      {new Date(log.sent_at).toLocaleString()}
                    </p>
                    {log.error_message && (
                      <p className="text-sm text-red-600 mt-1">
                        Error: {log.error_message}
                      </p>
                    )}
                  </div>
                  <div className="text-right text-sm text-muted-foreground">
                    {log.response_status && `Status: ${log.response_status}`}
                  </div>
                </div>
              ))}
            </div>
          )}
        </CardContent>
      </Card>
    </div>
  );
}
</file>

<file path="src/hooks/useCompanyResearch.ts">
import { useState, useEffect, useCallback } from "react";
import { supabase } from "@/integrations/supabase/client";
import { useAuth } from "@/contexts/AuthContext";
import { toast } from "sonner";
import { CompanyResearch } from "@/types";

export function useCompanyResearch() {
  const { user } = useAuth();
  const [research, setResearch] = useState<CompanyResearch[]>([]);
  const [loading, setLoading] = useState(true);
  const [generating, setGenerating] = useState(false);
  const [importing, setImporting] = useState(false);

  // Fetch research from Supabase
  const fetchResearch = useCallback(async () => {
    if (!user) {
      setResearch([]);
      setLoading(false);
      return;
    }

    try {
      const { data, error } = await supabase
        .from('company_research')
        .select('*')
        .eq('user_id', user.id)
        .eq('is_active', true)
        .order('created_at', { ascending: false });

      if (error) {
        console.error('Error fetching research:', error);
        toast.error('Failed to load research');
        return;
      }

      setResearch(data || []);
    } catch (error) {
      console.error('Error fetching research:', error);
      toast.error('Failed to load research');
    } finally {
      setLoading(false);
    }
  }, [user]);

  // Get research by ID
  const getResearchById = async (id: string) => {
    if (!user) return null;

    try {
      const { data, error } = await supabase
        .from('company_research')
        .select('*')
        .eq('id', id)
        .eq('user_id', user.id)
        .eq('is_active', true)
        .single();

      if (error) {
        console.error('Error fetching research by ID:', error);
        return null;
      }

      return data;
    } catch (error) {
      console.error('Error fetching research by ID:', error);
      return null;
    }
  };

  // Generate new research for a company
  const generateResearch = async (companyName: string) => {
    if (!user) {
      toast.error('You must be logged in to generate research');
      return null;
    }

    setGenerating(true);
    try {
      const response = await fetch(`https://jekpvqacecqnflweqmre.supabase.co/functions/v1/company-research`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Impla3B2cWFjZWNxbmZsd2VxbXJlIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDYzMzg1NzksImV4cCI6MjA2MTkxNDU3OX0.zxx7dD1Q-3EQXUMnxnCF8dkJ2WMy1svJ2ERUOGfB5dg`,
        },
        body: JSON.stringify({ companyName }),
      });

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const result = await response.json();
      
      if (!result.success) {
        throw new Error(result.error || 'Failed to generate research');
      }

      // Add the new research to the list
      const newResearch = {
        ...result.data,
        user_id: user.id,
      };

      setResearch(prev => [newResearch, ...prev]);
      
      const message = result.cached 
        ? `Loaded cached research for ${companyName}` 
        : `Generated new research for ${companyName}`;
      
      toast.success(message);
      return newResearch;
    } catch (error) {
      console.error('Error generating research:', error);
      toast.error(`Failed to generate research for ${companyName}`);
      return null;
    } finally {
      setGenerating(false);
    }
  };

  // Get research for a specific company
  const getResearchForCompany = async (companyName: string) => {
    if (!user) return null;

    try {
      const { data, error } = await supabase
        .from('company_research')
        .select('*')
        .eq('user_id', user.id)
        .eq('company_name', companyName)
        .eq('is_active', true)
        .order('created_at', { ascending: false })
        .limit(1)
        .maybeSingle();

      if (error && error.code !== 'PGRST116') {
        console.error('Error fetching research for company:', error);
        return null;
      }

      return data;
    } catch (error) {
      console.error('Error fetching research for company:', error);
      return null;
    }
  };

  // Delete research
  const deleteResearch = async (id: string) => {
    if (!user) {
      toast.error('You must be logged in to delete research');
      return false;
    }

    try {
      const { error } = await supabase
        .from('company_research')
        .delete()
        .eq('id', id)
        .eq('user_id', user.id);

      if (error) {
        console.error('Error deleting research:', error);
        toast.error('Failed to delete research');
        return false;
      }

      setResearch(prev => prev.filter(r => r.id !== id));
      toast.success('Research deleted');
      return true;
    } catch (error) {
      console.error('Error deleting research:', error);
      toast.error('Failed to delete research');
      return false;
    }
  };

  // Import existing research report
  const importResearch = async (companyName: string, reportContent: string) => {
    if (!user) {
      toast.error('You must be logged in to import research');
      return null;
    }

    setImporting(true);
    try {
      const response = await fetch(`https://jekpvqacecqnflweqmre.supabase.co/functions/v1/import-company-research`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Impla3B2cWFjZWNxbmZsd2VxbXJlIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDYzMzg1NzksImV4cCI6MjA2MTkxNDU3OX0.zxx7dD1Q-3EQXUMnxnCF8dkJ2WMy1svJ2ERUOGfB5dg`,
        },
        body: JSON.stringify({ 
          companyName, 
          reportContent, 
          userId: user.id 
        }),
      });

      if (!response.ok) {
        const errorText = await response.text();
        console.error('Server response:', errorText);
        throw new Error(`HTTP error! status: ${response.status} - ${errorText.substring(0, 200)}`);
      }

      const responseText = await response.text();
      let result;
      
      try {
        result = JSON.parse(responseText);
      } catch (parseError) {
        console.error('Failed to parse JSON response:', responseText.substring(0, 500));
        throw new Error('Server returned invalid JSON response. The function may not be deployed correctly.');
      }
      
      if (!result.success) {
        throw new Error(result.error || 'Failed to import research');
      }

      // Add or update the research in the list
      const newResearch = {
        ...result.data,
        user_id: user.id,
      };

      setResearch(prev => {
        const existingIndex = prev.findIndex(r => r.id === newResearch.id);
        if (existingIndex >= 0) {
          // Update existing
          const updated = [...prev];
          updated[existingIndex] = newResearch;
          return updated;
        } else {
          // Add new
          return [newResearch, ...prev];
        }
      });
      
      const message = result.action === 'updated' 
        ? `Updated research for ${companyName}` 
        : `Imported research for ${companyName}`;
      
      toast.success(message);
      return newResearch;
    } catch (error) {
      console.error('Error importing research:', error);
      toast.error(`Failed to import research for ${companyName}: ${error.message}`);
      return null;
    } finally {
      setImporting(false);
    }
  };

  useEffect(() => {
    fetchResearch();
  }, [fetchResearch]);

  return {
    research,
    loading,
    generating,
    importing,
    generateResearch,
    importResearch,
    getResearchForCompany,
    getResearchById,
    deleteResearch,
    refetch: fetchResearch,
  };
}
</file>

<file path="src/hooks/useCompanySync.ts">
import { useState } from "react";
import { supabase } from "@/integrations/supabase/client";
import { useAuth } from "@/contexts/AuthContext";
import { toast } from "sonner";

export function useCompanySync() {
  const { user } = useAuth();
  const [syncing, setSyncing] = useState(false);

  const syncMissingCompanies = async () => {
    if (!user) return false;

    setSyncing(true);
    try {
      // Get all active main companies
      const { data: mainCompanies, error: mainError } = await supabase
        .from('main_companies')
        .select('*')
        .eq('is_active', true);

      if (mainError) throw mainError;

      // Get user's currently tracked companies
      const { data: trackedCompanies, error: trackedError } = await supabase
        .from('tracked_companies')
        .select('main_company_id')
        .eq('user_id', user.id)
        .not('main_company_id', 'is', null);

      if (trackedError) throw trackedError;

      // Find missing companies
      const trackedMainCompanyIds = new Set(
        trackedCompanies.map(tc => tc.main_company_id)
      );

      const missingCompanies = mainCompanies.filter(
        mc => !trackedMainCompanyIds.has(mc.id)
      );

      if (missingCompanies.length === 0) {
        // toast.success('All companies are already tracked');
        return true;
      }

      // Insert missing companies
      const insertData = missingCompanies.map(company => ({
        user_id: user.id,
        name: company.name,
        priority: 'interested' as const,
        main_company_id: company.id,
        address: company.description || ''
      }));

      const { error: insertError } = await supabase
        .from('tracked_companies')
        .insert(insertData);

      if (insertError) throw insertError;

      toast.success(`Added ${missingCompanies.length} new companies to your tracking list`);
      return true;
    } catch (error: unknown) {
      const errorMessage = error instanceof Error ? error.message : "Failed to sync companies";
      console.error('Error syncing companies:', error);
      toast.error(errorMessage);
      return false;
    } finally {
      setSyncing(false);
    }
  };

  return {
    syncMissingCompanies,
    syncing
  };
}
</file>

<file path="src/hooks/useTheme.tsx">
import { createContext, useContext, useEffect, useState } from "react";

type Theme = "dark" | "light" | "system";

interface ThemeContextType {
  theme: Theme;
  setTheme: (theme: Theme) => void;
}

const ThemeContext = createContext<ThemeContextType | undefined>(undefined);

export function ThemeProvider({ children }: { children: React.ReactNode }) {
  const [theme, setTheme] = useState<Theme>(() => {
    if (typeof window !== "undefined") {
      const stored = localStorage.getItem("theme") as Theme | null;
      return stored || "system";
    }
    return "system";
  });
  
  useEffect(() => {
    const applyTheme = (newTheme: Theme) => {
      const root = window.document.documentElement;
      
      if (newTheme === "system") {
        const systemTheme = window.matchMedia("(prefers-color-scheme: dark)").matches ? "dark" : "light";
        root.classList.remove("light", "dark");
        root.classList.add(systemTheme);
      } else {
        root.classList.remove("light", "dark");
        root.classList.add(newTheme);
      }
    };

    applyTheme(theme);
    
    // Listen for system theme changes
    const mediaQuery = window.matchMedia("(prefers-color-scheme: dark)");
    const handleChange = () => {
      if (theme === "system") {
        applyTheme("system");
      }
    };
    
    mediaQuery.addEventListener("change", handleChange);
    return () => mediaQuery.removeEventListener("change", handleChange);
  }, [theme]);

  const setThemeWithSave = (newTheme: Theme) => {
    setTheme(newTheme);
    localStorage.setItem("theme", newTheme);
  };

  return (
    <ThemeContext.Provider value={{ theme, setTheme: setThemeWithSave }}>
      {children}
    </ThemeContext.Provider>
  );
}

export function useTheme() {
  const context = useContext(ThemeContext);
  if (context === undefined) {
    throw new Error("useTheme must be used within a ThemeProvider");
  }
  return context;
}
</file>

<file path="src/pages/Admin.tsx">
import { useState, useEffect } from "react";
import { supabase } from "@/integrations/supabase/client";
import { useAuth } from "@/contexts/AuthContext";
import AdminPanel from "@/components/AdminPanel";
import AdminAuth from "@/components/AdminAuth";

export default function Admin() {
  const { user, loading: authLoading } = useAuth();
  const [isAdmin, setIsAdmin] = useState(false);
  const [loading, setLoading] = useState(true);
  const [isPasswordAuthenticated, setIsPasswordAuthenticated] = useState(false);

  const checkUserRole = async (userId: string) => {
    try {
      const { data, error } = await supabase
        .rpc('has_role', { 
          _user_id: userId, 
          _role: 'admin' 
        });
      
      if (error) {
        console.error("Error checking user role:", error);
        return false;
      }
      
      return data === true;
    } catch (error) {
      console.error("Error checking user role:", error);
      return false;
    }
  };

  useEffect(() => {
    // Check if password authentication is stored
    const passwordAuth = localStorage.getItem("adminAuthenticated");
    if (passwordAuth === "true") {
      setIsPasswordAuthenticated(true);
    }
  }, []);

  useEffect(() => {
    const checkAuth = async () => {
      // If password authenticated, no need to check user auth
      if (isPasswordAuthenticated) {
        setLoading(false);
        return;
      }

      if (!user) {
        setLoading(false);
        return;
      }

      const adminStatus = await checkUserRole(user.id);
      setIsAdmin(adminStatus);
      setLoading(false);
    };

    if (!authLoading) {
      checkAuth();
    }
  }, [user, authLoading, isPasswordAuthenticated]);

  const handleAdminAuthSuccess = () => {
    setIsPasswordAuthenticated(true);
    setLoading(false);
  };

  if (authLoading || loading) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-primary"></div>
      </div>
    );
  }

  // If password authenticated, show admin panel
  if (isPasswordAuthenticated) {
    return <AdminPanel isPasswordAuthenticated={true} />;
  }

  // If authenticated user with admin role, show admin panel
  if (user && isAdmin) {
    return <AdminPanel isPasswordAuthenticated={false} />;
  }

  // If authenticated but not admin, show access denied
  if (user && !isAdmin) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-background p-4">
        <div className="text-center">
          <h1 className="text-2xl font-bold text-destructive mb-4">Access Denied</h1>
          <p className="text-muted-foreground mb-4">You do not have admin privileges.</p>
          <button 
            onClick={() => supabase.auth.signOut()}
            className="text-primary hover:underline"
          >
            Sign out and try different account
          </button>
        </div>
      </div>
    );
  }

  // If not authenticated, show password auth form
  return <AdminAuth onAuthenticated={handleAdminAuthSuccess} />;
}
</file>

<file path="src/pages/Chat.tsx">
import { useState, useEffect } from "react";
import { Navigate } from "react-router-dom";
import { useAuth } from "@/contexts/AuthContext";
import NavBar from "@/components/NavBar";
import { ChatAssistant } from "@/components/ChatAssistant";

export default function Chat() {
  const { user, profile, loading } = useAuth();

  // If not logged in or onboarding not completed, redirect
  if (!loading && (!user || (profile && !profile.onboarding_completed))) {
    return <Navigate to={user ? "/onboarding" : "/auth"} replace />;
  }

  // Show loading state while authentication status is being determined
  if (loading) {
    return (
      <div className="flex items-center justify-center min-h-screen dark:bg-[#0A0F18]">
        <div className="text-center">
          <div className="w-16 h-16 border-4 border-primary border-t-transparent rounded-full animate-spin mx-auto"></div>
          <p className="mt-4 text-muted-foreground">Loading chat assistant...</p>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen flex flex-col dark:bg-[#0A0F18]">
      <NavBar />
      
      <main className="flex-1 flex flex-col overflow-hidden">
        <div className="container px-4 py-6 flex-1 flex flex-col">
          <div className="max-w-4xl mx-auto w-full flex-1 flex flex-col">
            <div className="text-center mb-6">
              <h1 className="text-3xl font-bold tracking-tight">Bulldozer AI Assistant</h1>
              <p className="text-muted-foreground mt-2">
                Your intelligent assistant for Local 825 organizing and labor intelligence
              </p>
            </div>
            
            {/* Full-screen chat component that's always open */}
            <div className="flex-1 flex flex-col min-h-0">
              <ChatAssistant forceOpen={true} />
            </div>
          </div>
        </div>
      </main>
    </div>
  );
}
</file>

<file path="src/pages/Index.tsx">
import { useAuth } from "@/contexts/AuthContext";
import { useNavigate } from "react-router-dom";
import { useEffect } from "react";
import NavBar from "@/components/NavBar";
import FadingBenefits from "@/components/FadingBenefits";
import SyncButton from "@/components/SyncButton";
import "../utils/triggerSync"; // This will auto-trigger sync in development

export default function Index() {
  const { user } = useAuth();
  const navigate = useNavigate();

  useEffect(() => {
    if (user) {
      navigate("/dashboard");
    }
  }, [user, navigate]);

  return (
    <div className="min-h-screen flex flex-col bg-gradient-to-br from-background to-secondary/20">
      <NavBar />
      
      <main className="flex-1 flex flex-col items-center justify-center px-4 sm:px-6 py-12">
        <div className="max-w-4xl mx-auto text-left space-y-8">
          <div className="space-y-4">
            <h1 className="text-4xl sm:text-5xl font-bold bg-gradient-to-r from-primary to-primary/70 bg-clip-text text-transparent text-left">
              Bulldozer+™
            </h1>
            <p className="text-xl text-muted-foreground max-w-2xl mx-auto text-left">
              Intelligence for labor organizations. Track companies, analyze trends, and make data-driven decisions.
            </p>
          </div>

          <div className="flex flex-col sm:flex-row gap-4 justify-center items-center">
            <SyncButton />
          </div>

          <div className="mt-12">
            <FadingBenefits />
          </div>
        </div>
      </main>
      
      <footer className="text-center py-6 text-sm text-muted-foreground border-t border-border/50">
        © 2025 Bulldozer+™. Intelligence for labor organizations.
      </footer>
    </div>
  );
}
</file>

<file path="src/index.css">
@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  :root {
    --background: 0 0% 100%;
    --foreground: 222.2 84% 4.9%;
    --card: 0 0% 100%;
    --card-foreground: 222.2 84% 4.9%;
    --popover: 0 0% 100%;
    --popover-foreground: 222.2 84% 4.9%;
    --primary: 217.2 91.2% 59.8%;
    --primary-foreground: 210 40% 98%;
    --secondary: 210 40% 96.1%;
    --secondary-foreground: 222.2 47.4% 11.2%;
    --muted: 210 40% 96.1%;
    --muted-foreground: 215.4 16.3% 46.9%;
    --accent: 210 40% 96.1%;
    --accent-foreground: 222.2 47.4% 11.2%;
    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 210 40% 98%;
    --border: 214.3 31.8% 91.4%;
    --input: 214.3 31.8% 91.4%;
    --ring: 221.2 83.2% 53.3%;
    --radius: 0.75rem;
    --sidebar-background: 0 0% 98%;
    --sidebar-foreground: 240 5.3% 26.1%;
    --sidebar-primary: 240 5.9% 10%;
    --sidebar-primary-foreground: 0 0% 98%;
    --sidebar-accent: 240 4.8% 95.9%;
    --sidebar-accent-foreground: 240 5.9% 10%;
    --sidebar-border: 220 13% 91%;
    --sidebar-ring: 217.2 91.2% 59.8%;
  }

  .dark {
    --background: 222.2 84% 4.9%;
    --foreground: 210 40% 98%;
    --card: 222.2 84% 4.9%;
    --card-foreground: 210 40% 98%;
    --popover: 222.2 84% 4.9%;
    --popover-foreground: 210 40% 98%;
    --primary: 217.2 91.2% 59.8%;
    --primary-foreground: 222.2 84% 4.9%;
    --secondary: 217.2 32.6% 17.5%;
    --secondary-foreground: 210 40% 98%;
    --muted: 217.2 32.6% 17.5%;
    --muted-foreground: 215 20.2% 65.1%;
    --accent: 217.2 32.6% 17.5%;
    --accent-foreground: 210 40% 98%;
    --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 210 40% 98%;
    --border: 217.2 32.6% 17.5%;
    --input: 217.2 32.6% 17.5%;
    --ring: 224.3 76.3% 48%;
    --sidebar-background: 222.2 84% 4.9%;
    --sidebar-foreground: 210 40% 98%;
    --sidebar-primary: 217.2 32.6% 17.5%;
    --sidebar-primary-foreground: 210 40% 98%;
    --sidebar-accent: 217.2 32.6% 17.5%;
    --sidebar-accent-foreground: 210 40% 98%;
    --sidebar-border: 217.2 32.6% 17.5%;
    --sidebar-ring: 224.3 76.3% 48%;
  }
}

@layer base {
  * {
    @apply border-border;
  }

  body {
    @apply bg-background text-foreground font-sans antialiased transition-colors duration-300;
  }

  /* Ensure proper scrollbar styling */
  ::-webkit-scrollbar {
    width: 8px;
  }

  ::-webkit-scrollbar-track {
    @apply bg-secondary;
  }

  ::-webkit-scrollbar-thumb {
    @apply bg-muted-foreground/30 rounded-md;
  }

  ::-webkit-scrollbar-thumb:hover {
    @apply bg-muted-foreground/50;
  }
}

@layer utilities {
  .glass {
    @apply backdrop-blur-md bg-background/80 border border-border/50;
  }
  
  .glow {
    box-shadow: 0 0 15px 1px hsl(var(--primary) / 0.3);
  }

  .card-gradient {
    @apply bg-gradient-to-br from-card to-secondary/80 backdrop-blur-sm;
  }
  
  .line-clamp-3 {
    display: -webkit-box;
    -webkit-line-clamp: 3;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }

  .line-clamp-2 {
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
}

/* Command bar specific styles */
.command-bar {
  @apply bg-popover/95 backdrop-blur-lg border border-border;
}

.scrollbar-none {
  -ms-overflow-style: none;
  scrollbar-width: none;
}

.scrollbar-none::-webkit-scrollbar {
  display: none;
}

/* Auth form animations */
@keyframes gradient-shift {
  0% {
    background-position: 0% 50%;
  }
  50% {
    background-position: 100% 50%;
  }
  100% {
    background-position: 0% 50%;
  }
}

.gradient-text {
  background: linear-gradient(90deg, currentColor, hsl(var(--muted-foreground)), currentColor);
  background-size: 200% auto;
  -webkit-background-clip: text;
  background-clip: text;
  -webkit-text-fill-color: transparent;
  animation: gradient-shift 3s ease infinite;
}

/* Button loading animation */
@keyframes pulse {
  0%, 100% {
    opacity: 1;
  }
  50% {
    opacity: 0.5;
  }
}

.btn-loading {
  animation: pulse 1.5s ease infinite;
}
</file>

<file path="supabase/migrations/20250710192024-7425c218-ca28-482b-919e-c76b5f4594be.sql">
-- Remove general news sources that don't have specific company names
-- Keep only the company-specific feeds or the two feeds you specified
DELETE FROM public.news_sources 
WHERE company_names IS NULL 
   OR array_length(company_names, 1) IS NULL
   OR rss_url NOT IN (
     'https://henjii.com/category/employer-watch/feed/gn',
     'https://henjii.com/category/local-825/feed/gn'
   );

-- Update or insert the two specific feeds you want
INSERT INTO public.news_sources (name, rss_url, description, is_active, company_names)
VALUES 
  ('Intel', 'https://henjii.com/category/local-825/feed/gn/?posts_per_page=100', 'News and updates from intel pulled from api (100 posts)', true, ARRAY['Local 825']),
  ('Jobs', 'https://henjii.com/category/employer-watch/feed/gn/?posts_per_page=100', 'Job opportunities and employer intelligence from api (100 posts)', true, ARRAY['Various Employers'])
ON CONFLICT (rss_url) 
DO UPDATE SET 
  name = EXCLUDED.name,
  description = EXCLUDED.description,
  is_active = EXCLUDED.is_active,
  company_names = EXCLUDED.company_names;
</file>

<file path="src/components/feed/ArticlesList.tsx">
import { Search } from "lucide-react";
import ArticleCard from "@/components/feed/ArticleCard";
import LoadingState from "@/components/feed/LoadingState";
import {
  Pagination,
  PaginationContent,
  PaginationItem,
  PaginationLink,
  PaginationNext,
  PaginationPrevious,
} from "@/components/ui/pagination";
import { NewsArticle } from "@/hooks/useFeedData";
import { useState, useEffect } from "react";

interface ArticlesListProps {
  articles: NewsArticle[];
  loading: boolean;
  showIrrelevant: boolean;
  currentPage: number;
  totalPages: number;
  onPageChange: (page: number) => void;
  onAnalysisComplete: () => void;
  startIndex: number;
  endIndex: number;
  totalArticles: number;
}

export default function ArticlesList({
  articles,
  loading,
  showIrrelevant,
  currentPage,
  totalPages,
  onPageChange,
  onAnalysisComplete,
  startIndex,
  endIndex,
  totalArticles,
}: ArticlesListProps) {
  const [deletedArticleIds, setDeletedArticleIds] = useState<Set<string>>(new Set());

  // Filter out deleted articles
  const visibleArticles = articles.filter(article => !deletedArticleIds.has(article.id));

  const handleArticleDeleted = (deletedArticleId: string) => {
    setDeletedArticleIds(prev => new Set([...prev, deletedArticleId]));
    // Also call the parent's refresh function after a short delay to sync with database
    setTimeout(() => {
      onAnalysisComplete();
    }, 500);
  };

  // Reset deleted articles when articles prop changes (e.g., after refresh)
  useEffect(() => {
    setDeletedArticleIds(new Set());
  }, [articles]);

  if (loading) {
    return <LoadingState />;
  }

  if (visibleArticles.length === 0) {
    return (
      <div className="text-center py-10">
        <Search className="mx-auto h-10 w-10 text-muted-foreground/60" />
        <h3 className="mt-4 text-lg font-medium">
          {showIrrelevant ? 'No articles found' : 'No relevant articles found'}
        </h3>
        <p className="mt-1 text-muted-foreground">
          {showIrrelevant 
            ? "Try adjusting your search query or filters"
            : "AI has filtered articles for Local 825 relevance. Toggle 'Show all articles' to see filtered content."}
        </p>
      </div>
    );
  }

  return (
    <div className="space-y-4">
      {visibleArticles.map((article) => (
        <ArticleCard 
          key={article.id} 
          article={article} 
          onClick={() => {
            // For job content, navigate to job detail page. For news, navigate to article detail page
            if (article.content_type === 'job') {
              window.location.href = `/job/${article.id}`;
            } else {
              window.location.href = `/article/${article.id}`;
            }
          }}
        />
      ))}
      
      {totalPages > 1 && (
        <div className="flex justify-center mt-8">
          <Pagination>
            <PaginationContent>
              <PaginationItem>
                <PaginationPrevious 
                  onClick={() => onPageChange(Math.max(1, currentPage - 1))}
                  className={currentPage === 1 ? "pointer-events-none opacity-50" : "cursor-pointer"}
                />
              </PaginationItem>
              
              {Array.from({ length: totalPages }, (_, i) => i + 1).map((page) => (
                <PaginationItem key={page}>
                  <PaginationLink
                    onClick={() => onPageChange(page)}
                    isActive={currentPage === page}
                    className="cursor-pointer"
                  >
                    {page}
                  </PaginationLink>
                </PaginationItem>
              ))}
              
              <PaginationItem>
                <PaginationNext
                  onClick={() => onPageChange(Math.min(totalPages, currentPage + 1))}
                  className={currentPage === totalPages ? "pointer-events-none opacity-50" : "cursor-pointer"}
                />
              </PaginationItem>
            </PaginationContent>
          </Pagination>
        </div>
      )}
      
      <div className="mt-4 text-sm text-muted-foreground text-center">
        Showing {startIndex + 1}-{Math.min(endIndex, visibleArticles.length)} of {visibleArticles.length} {showIrrelevant ? 'total' : 'relevant'} articles
      </div>
    </div>
  );
}
</file>

<file path="src/components/ChatAssistant.tsx">
import { useState, useEffect } from "react";
import { MessageSquare, X } from "lucide-react";
import { ChatContent } from "./chat/ChatContent";
import { ChatInput } from "./chat/ChatInput";
import { ChatHeader } from "./chat/ChatHeader";
import { presetOptions } from "./chat/presetOptions";
import { PresetOption, Message } from "./chat/types";

interface ChatAssistantProps {
  forceOpen?: boolean;
}

export const ChatAssistant = ({ forceOpen = false }: ChatAssistantProps) => {
  const [isOpen, setIsOpen] = useState(forceOpen);
  const [isExpanded, setIsExpanded] = useState(forceOpen);
  const [input, setInput] = useState("");
  const [messages, setMessages] = useState<Message[]>([]);
  const [isLoading, setIsLoading] = useState(false);
  const [processingStatus, setProcessingStatus] = useState<string>("");

  useEffect(() => {
    if (forceOpen) {
      setIsOpen(true);
      setIsExpanded(true);
    }
  }, [forceOpen]);

  useEffect(() => {
    // Prevent scrolling when the chat is open and not forced open
    if (isOpen && !forceOpen) {
      document.body.style.overflow = 'hidden';
      // Add viewport meta tag fix for mobile keyboard
      const viewport = document.querySelector('meta[name="viewport"]');
      if (viewport) {
        viewport.setAttribute('content', 'width=device-width, initial-scale=1.0, user-scalable=no, viewport-fit=cover');
      }
    } else if (!forceOpen) {
      document.body.style.overflow = 'auto';
      // Reset viewport
      const viewport = document.querySelector('meta[name="viewport"]');
      if (viewport) {
        viewport.setAttribute('content', 'width=device-width, initial-scale=1.0');
      }
    }

    return () => {
      if (!forceOpen) {
        document.body.style.overflow = 'auto';
      }
    };
  }, [isOpen, forceOpen]);

  const filteredOptions = presetOptions.filter(option =>
    option.title.toLowerCase().includes(input.toLowerCase()) ||
    option.description.toLowerCase().includes(input.toLowerCase())
  );

  const queryFlowiseAgent = async (question: string) => {
    try {
      setProcessingStatus("Initializing agent...");
      
      const response = await fetch(
        "https://flowise-production-1547.up.railway.app/api/v1/prediction/3ca919fb-da88-4c9d-93bb-2be993cfca9f",
        {
          method: "POST",
          headers: {
            "Content-Type": "application/json"
          },
          body: JSON.stringify({ 
            question,
            overrideConfig: {
              streaming: true
            }
          })
        }
      );

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const reader = response.body?.getReader();
      if (!reader) {
        throw new Error("No response body reader available");
      }

      let accumulatedResponse = "";
      setProcessingStatus("Agent is researching...");

      while (true) {
        const { done, value } = await reader.read();
        if (done) break;

        const chunk = new TextDecoder().decode(value);
        const lines = chunk.split('\n');

        for (const line of lines) {
          if (line.startsWith('data: ')) {
            try {
              const data = JSON.parse(line.slice(6));
              
              if (data.event === 'start') {
                setProcessingStatus("Agent started processing...");
              } else if (data.event === 'token') {
                accumulatedResponse += data.data;
                setProcessingStatus("Generating response...");
              } else if (data.event === 'sourceDocuments') {
                setProcessingStatus("Analyzing sources...");
              } else if (data.event === 'agentReasoning') {
                setProcessingStatus(`Agent: ${data.data.reasoning || 'Thinking...'}`);
              } else if (data.event === 'end') {
                setProcessingStatus("");
                break;
              }
            } catch (e) {
              // Skip invalid JSON lines
              continue;
            }
          }
        }
      }

      return accumulatedResponse || "I'm here to help with Local 825 organizing questions.";
    } catch (error) {
      console.error('Flowise Agent API error:', error);
      setProcessingStatus("");
      return "I'm experiencing some technical difficulties. Please try again in a moment.";
    }
  };

  const handleSend = async (message?: string) => {
    const messageToSend = message || input;
    if (!messageToSend.trim()) return;

    const userMessage: Message = {
      id: Date.now().toString(),
      text: messageToSend,
      isUser: true,
      timestamp: new Date()
    };

    setMessages(prev => [...prev, userMessage]);
    setIsLoading(true);
    setInput("");
    setIsExpanded(true);

    // Query the Flowise Agent API with streaming
    const aiResponse = await queryFlowiseAgent(messageToSend);
    
    const aiMessage: Message = {
      id: (Date.now() + 1).toString(),
      text: aiResponse,
      isUser: false,
      timestamp: new Date()
    };
    
    setMessages(prev => [...prev, aiMessage]);
    setIsLoading(false);
    setProcessingStatus("");
  };

  const handleOptionSelect = (option: PresetOption) => {
    handleSend(option.title);
  };

  const handleClose = () => {
    if (!forceOpen) {
      setIsOpen(false);
      setIsExpanded(false);
      setMessages([]);
      setInput("");
      setProcessingStatus("");
    }
  };

  // If forced open, render as full component
  if (forceOpen) {
    return (
      <div className="flex-1 flex flex-col bg-white border border-gray-200 rounded-2xl shadow-lg overflow-hidden">
        <ChatHeader onClose={handleClose} showClose={false} />
        
        <div className="flex-1 flex flex-col min-h-0">
          <ChatContent 
            messages={messages} 
            isLoading={isLoading} 
            isExpanded={isExpanded}
            processingStatus={processingStatus}
          />
        </div>
        
        <div className="flex-shrink-0 border-t border-gray-100 bg-white">
          <ChatInput
            input={input}
            setInput={setInput}
            onSend={handleSend}
            isLoading={isLoading}
            isExpanded={isExpanded}
            filteredOptions={filteredOptions}
            onOptionSelect={handleOptionSelect}
            isOpen={true}
          />
        </div>
      </div>
    );
  }

  return (
    <>
      {/* Chat Toggle Button - Only show when not forced open */}
      {!isOpen && (
        <button
          onClick={() => setIsOpen(true)}
          className="fixed bottom-6 right-6 z-50 bg-[#5A7FFF] hover:bg-[#4A6FEF] text-white rounded-full p-4 shadow-2xl transition-all duration-300 hover:scale-110"
          aria-label="Open chat assistant"
        >
          <MessageSquare className="h-6 w-6" />
        </button>
      )}

      {/* Chat Modal - Responsive design */}
      {isOpen && (
        <div 
          className="fixed inset-0 z-50 bg-white flex flex-col md:inset-auto md:bottom-6 md:right-6 md:w-96 md:h-[600px] md:rounded-2xl md:shadow-2xl md:border"
          style={{ 
            height: window.innerWidth < 768 ? '100dvh' : undefined,
            paddingBottom: window.innerWidth < 768 ? 'env(keyboard-inset-height, 0px)' : undefined
          }}
        >
          <ChatHeader onClose={handleClose} showClose={true} />
          
          <div className="flex-1 flex flex-col min-h-0">
            <ChatContent 
              messages={messages} 
              isLoading={isLoading} 
              isExpanded={isExpanded}
              processingStatus={processingStatus}
            />
          </div>
          
          <div className="flex-shrink-0 border-t border-gray-100 bg-white">
            <ChatInput
              input={input}
              setInput={setInput}
              onSend={handleSend}
              isLoading={isLoading}
              isExpanded={isExpanded}
              filteredOptions={filteredOptions}
              onOptionSelect={handleOptionSelect}
              isOpen={isOpen}
            />
          </div>
        </div>
      )}
    </>
  );
};
</file>

<file path="src/components/SyncButton.tsx">
import React, { useState } from 'react';
import { Button } from '@/components/ui/button';
import { RefreshCw } from 'lucide-react';
import { triggerRSSSync } from '@/utils/triggerSync';
import { toast } from '@/hooks/use-toast';

export default function SyncButton() {
  const [syncing, setSyncing] = useState(false);

  const handleSync = async () => {
    setSyncing(true);
    try {
      const result = await triggerRSSSync();
      console.log('Sync result:', result);
      
      // Handle the response properly
      const articleCount = result?.totalNewArticles || result?.summary?.total_new_articles || 0;
      const sourceCount = result?.totalSources || result?.summary?.total_sources || 0;
      
      toast({
        title: "Sync Complete",
        description: `Found ${articleCount} new articles from ${sourceCount} sources`,
      });
    } catch (error: unknown) {
      const errorMessage = error instanceof Error ? error.message : "Failed to sync RSS feeds";
      console.error('Sync error:', error);
      toast({
        title: "Sync Failed",
        description: errorMessage,
        variant: "destructive",
      });
    } finally {
      setSyncing(false);
    }
  };

  return (
    <Button 
      onClick={handleSync} 
      disabled={syncing}
      className="flex items-center gap-2 bg-green-600 text-white hover:bg-blue-600 hover:text-white transition-colors justify-start"
    >
      <RefreshCw className={`h-4 w-4 ${syncing ? 'animate-spin' : ''}`} />
      {syncing ? 'Syncing...' : 'Sync RSS Feeds'}
    </Button>
  );
}
</file>

<file path="src/components/TaskManagement.tsx">
import { useState, useEffect } from "react";
import { supabase } from "@/integrations/supabase/client";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Textarea } from "@/components/ui/textarea";
import { useToast } from "@/hooks/use-toast";
import { Trash2, Edit, Plus, Save, X } from "lucide-react";
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from "@/components/ui/dialog";
import { Tables } from "@/integrations/supabase/types";

type MaintenanceTask = Tables<"maintenance_tasks">;

const iconOptions = [
  'CheckCircle', 'Database', 'Loader2', 'Clock', 'Circle', 'Square', 
  'Triangle', 'Star', 'Hexagon'
];

const statusOptions = [
  { value: 'pending', label: 'Pending' },
  { value: 'processing', label: 'Processing' },
  { value: 'complete', label: 'Complete' }
];

export default function TaskManagement() {
  const [tasks, setTasks] = useState<MaintenanceTask[]>([]);
  const [loading, setLoading] = useState(true);
  const [editingTask, setEditingTask] = useState<MaintenanceTask | null>(null);
  const [isDialogOpen, setIsDialogOpen] = useState(false);
  const { toast } = useToast();

  const [formData, setFormData] = useState({
    name: '',
    description: '',
    status: 'pending' as 'pending' | 'processing' | 'complete',
    display_order: 0,
    icon_name: 'Database',
    estimated_minutes: 5
  });

  const fetchTasks = useCallback(async () => {
    try {
      const { data, error } = await supabase
        .from('maintenance_tasks')
        .select('*')
        .order('display_order', { ascending: true });

      if (error) throw error;
      setTasks(data || []);
    } catch (error) {
      console.error('Error fetching tasks:', error);
      toast({
        title: "Error",
        description: "Failed to load maintenance tasks",
        variant: "destructive",
      });
    } finally {
      setLoading(false);
    }
  }, [toast]);

  useEffect(() => {
    fetchTasks();
  }, [fetchTasks]);

  const triggerWebhookNotification = async (eventType: string, taskData: MaintenanceTask) => {
    try {
      const { error } = await supabase.rpc('trigger_webhook_notification', {
        event_type: eventType,
        event_data: {
          task: taskData,
          timestamp: new Date().toISOString(),
          admin_action: eventType,
          system_status: {
            total_tasks: tasks.length,
            completed_tasks: tasks.filter(t => t.status === 'complete').length,
            processing_tasks: tasks.filter(t => t.status === 'processing').length,
          }
        }
      });

      if (error) {
        console.error('Error triggering webhook notification:', error);
      } else {
        console.log('Webhook notification triggered for:', eventType);
        
        // Process the webhook immediately
        supabase.functions.invoke('send-webhook-notification').catch(console.error);
      }
    } catch (error) {
      console.error('Error in webhook notification:', error);
    }
  };

  const resetForm = () => {
    setFormData({
      name: '',
      description: '',
      status: 'pending',
      display_order: tasks.length + 1,
      icon_name: 'Database',
      estimated_minutes: 5
    });
    setEditingTask(null);
  };

  const handleEdit = (task: MaintenanceTask) => {
    setEditingTask(task);
    setFormData({
      name: task.name,
      description: task.description || '',
      status: task.status as 'pending' | 'processing' | 'complete',
      display_order: task.display_order,
      icon_name: task.icon_name || 'Database',
      estimated_minutes: task.estimated_minutes || 5
    });
    setIsDialogOpen(true);
  };

  const handleSave = async () => {
    try {
      if (editingTask) {
        // Update existing task
        const { error } = await supabase
          .from('maintenance_tasks')
          .update({
            name: formData.name,
            description: formData.description,
            status: formData.status,
            display_order: formData.display_order,
            icon_name: formData.icon_name,
            estimated_minutes: formData.estimated_minutes,
            updated_at: new Date().toISOString()
          })
          .eq('id', editingTask.id);

        if (error) throw error;
        
        // Trigger webhook for task update
        await triggerWebhookNotification('task_updated', {
          ...formData,
          id: editingTask.id,
          previous_status: editingTask.status
        });
        
        toast({
          title: "Success",
          description: "Task updated successfully",
        });
      } else {
        // Create new task
        const { data: newTask, error } = await supabase
          .from('maintenance_tasks')
          .insert({
            name: formData.name,
            description: formData.description,
            status: formData.status,
            display_order: formData.display_order,
            icon_name: formData.icon_name,
            estimated_minutes: formData.estimated_minutes
          })
          .select()
          .single();

        if (error) throw error;
        
        // Trigger webhook for task creation
        await triggerWebhookNotification('task_created', {
          ...formData,
          id: newTask.id
        });
        
        toast({
          title: "Success",
          description: "Task created successfully",
        });
      }

      setIsDialogOpen(false);
      resetForm();
      fetchTasks();
    } catch (error) {
      console.error('Error saving task:', error);
      toast({
        title: "Error",
        description: "Failed to save task",
        variant: "destructive",
      });
    }
  };

  const handleDelete = async (taskId: string) => {
    if (!confirm('Are you sure you want to delete this task?')) return;

    try {
      const taskToDelete = tasks.find(t => t.id === taskId);
      
      const { error } = await supabase
        .from('maintenance_tasks')
        .delete()
        .eq('id', taskId);

      if (error) throw error;
      
      // Trigger webhook for task deletion
      if (taskToDelete) {
        await triggerWebhookNotification('task_deleted', taskToDelete);
      }
      
      toast({
        title: "Success",
        description: "Task deleted successfully",
      });
      
      fetchTasks();
    } catch (error) {
      console.error('Error deleting task:', error);
      toast({
        title: "Error",
        description: "Failed to delete task",
        variant: "destructive",
      });
    }
  };

  if (loading) {
    return (
      <Card>
        <CardHeader>
          <CardTitle>Maintenance Tasks</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="flex items-center justify-center py-8">
            <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-primary"></div>
          </div>
        </CardContent>
      </Card>
    );
  }

  return (
    <Card>
      <CardHeader>
        <div className="flex items-center justify-between">
          <div>
            <CardTitle>Maintenance Tasks</CardTitle>
            <CardDescription>
              Manage the tasks displayed on the maintenance page
            </CardDescription>
          </div>
          <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>
            <DialogTrigger asChild>
              <Button onClick={resetForm}>
                <Plus className="w-4 h-4 mr-2" />
                Add Task
              </Button>
            </DialogTrigger>
            <DialogContent className="max-w-md">
              <DialogHeader>
                <DialogTitle>
                  {editingTask ? 'Edit Task' : 'Add New Task'}
                </DialogTitle>
              </DialogHeader>
              <div className="space-y-4">
                <div>
                  <Label htmlFor="name">Task Name</Label>
                  <Input
                    id="name"
                    value={formData.name}
                    onChange={(e) => setFormData({ ...formData, name: e.target.value })}
                    placeholder="Enter task name"
                  />
                </div>
                
                <div>
                  <Label htmlFor="description">Description (Optional)</Label>
                  <Textarea
                    id="description"
                    value={formData.description}
                    onChange={(e) => setFormData({ ...formData, description: e.target.value })}
                    placeholder="Enter task description"
                  />
                </div>

                <div className="grid grid-cols-2 gap-4">
                  <div>
                    <Label htmlFor="status">Status</Label>
                    <Select value={formData.status} onValueChange={(value: 'pending' | 'processing' | 'complete') => setFormData({ ...formData, status: value })}>
                      <SelectTrigger>
                        <SelectValue />
                      </SelectTrigger>
                      <SelectContent>
                        {statusOptions.map((option) => (
                          <SelectItem key={option.value} value={option.value}>
                            {option.label}
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                  </div>

                  <div>
                    <Label htmlFor="display_order">Order</Label>
                    <Input
                      id="display_order"
                      type="number"
                      value={formData.display_order}
                      onChange={(e) => setFormData({ ...formData, display_order: parseInt(e.target.value) || 0 })}
                    />
                  </div>
                </div>

                <div className="grid grid-cols-2 gap-4">
                  <div>
                    <Label htmlFor="icon_name">Icon</Label>
                    <Select value={formData.icon_name} onValueChange={(value) => setFormData({ ...formData, icon_name: value })}>
                      <SelectTrigger>
                        <SelectValue />
                      </SelectTrigger>
                      <SelectContent>
                        {iconOptions.map((icon) => (
                          <SelectItem key={icon} value={icon}>
                            {icon}
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                  </div>

                  <div>
                    <Label htmlFor="estimated_minutes">Est. Minutes</Label>
                    <Input
                      id="estimated_minutes"
                      type="number"
                      value={formData.estimated_minutes}
                      onChange={(e) => setFormData({ ...formData, estimated_minutes: parseInt(e.target.value) || 0 })}
                    />
                  </div>
                </div>

                <div className="flex justify-end gap-2 pt-4">
                  <Button variant="outline" onClick={() => setIsDialogOpen(false)}>
                    <X className="w-4 h-4 mr-2" />
                    Cancel
                  </Button>
                  <Button onClick={handleSave}>
                    <Save className="w-4 h-4 mr-2" />
                    Save
                  </Button>
                </div>
              </div>
            </DialogContent>
          </Dialog>
        </div>
      </CardHeader>
      <CardContent>
        <div className="space-y-3">
          {tasks.map((task) => (
            <div
              key={task.id}
              className="flex items-center justify-between p-4 border rounded-lg"
            >
              <div className="flex-1">
                <div className="flex items-center gap-3">
                  <div className="flex items-center gap-2">
                    <span className="font-medium">{task.name}</span>
                    <span className={`text-xs px-2 py-1 rounded-full ${
                      task.status === 'complete' 
                        ? 'bg-green-100 text-green-800 dark:bg-green-900/20 dark:text-green-300' 
                        : task.status === 'processing'
                        ? 'bg-blue-100 text-blue-800 dark:bg-blue-900/20 dark:text-blue-300'
                        : 'bg-gray-100 text-gray-800 dark:bg-gray-900/20 dark:text-gray-300'
                    }`}>
                      {task.status}
                    </span>
                  </div>
                </div>
                {task.description && (
                  <p className="text-sm text-muted-foreground mt-1">{task.description}</p>
                )}
                <div className="flex items-center gap-4 mt-2 text-xs text-muted-foreground">
                  <span>Order: {task.display_order}</span>
                  <span>Icon: {task.icon_name}</span>
                  <span>Est: {task.estimated_minutes}min</span>
                </div>
              </div>
              <div className="flex items-center gap-2">
                <Button
                  variant="outline"
                  size="sm"
                  onClick={() => handleEdit(task)}
                >
                  <Edit className="w-4 h-4" />
                </Button>
                <Button
                  variant="outline"
                  size="sm"
                  onClick={() => handleDelete(task.id)}
                >
                  <Trash2 className="w-4 h-4" />
                </Button>
              </div>
            </div>
          ))}
          
          {tasks.length === 0 && (
            <div className="text-center py-8 text-muted-foreground">
              No maintenance tasks found. Click "Add Task" to create one.
            </div>
          )}
        </div>
      </CardContent>
    </Card>
  );
}
</file>

<file path="src/pages/CompanyReports.tsx">
import { useState, useEffect } from "react";
import { useNavigate } from "react-router-dom";
import { useAuth } from "@/contexts/AuthContext";
import { useTrackedCompanies, Company } from "@/hooks/useTrackedCompanies";
import { useMainCompanies } from "@/hooks/useMainCompanies";
import { useCompanyResearch } from "@/hooks/useCompanyResearch";
import { useDailyAnalytics } from "@/hooks/useDailyAnalytics";
import NavBar from "@/components/NavBar";
import { Card, CardHeader, CardTitle, CardContent } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Badge } from "@/components/ui/badge";
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table";
import { toast } from "@/hooks/use-toast";
import { 
  Building2, 
  Search, 
  FileText, 
  Clock, 
  RefreshCw, 
  ExternalLink,
  TrendingUp,
  Users,
  MapPin,
  AlertTriangle,
  CheckCircle,
  XCircle,
  Eye,
  Calendar,
  Play,
  BarChart3
} from "lucide-react";
import { motion } from "framer-motion";

// Priority configuration
const priorityConfig = {
  high: { label: 'High Priority', color: 'bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200' },
  interested: { label: 'Interested', color: 'bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200' },
  low: { label: 'Low Priority', color: 'bg-gray-100 text-gray-800 dark:bg-gray-900 dark:text-gray-200' },
  do_not_work: { label: 'Do Not Work', color: 'bg-orange-100 text-orange-800 dark:bg-orange-900 dark:text-orange-200' },
  agreement_ended: { label: 'Agreement Ended', color: 'bg-purple-100 text-purple-800 dark:bg-purple-900 dark:text-purple-200' }
};

export default function CompanyReports() {
  const { user } = useAuth();
  const navigate = useNavigate();
  const { companies: trackedCompanies, loading: trackedCompaniesLoading } = useTrackedCompanies();
  const { companies: mainCompanies, loading: mainCompaniesLoading } = useMainCompanies();
  const { research: companyResearch, loading: researchLoading } = useCompanyResearch();
  const { triggerAnalyticsGeneration } = useDailyAnalytics();
  
  const [searchTerm, setSearchTerm] = useState("");
  const [selectedPriority, setSelectedPriority] = useState<string>("all");
  const [isGeneratingReport, setIsGeneratingReport] = useState(false);

  // Combine tracked companies with main companies data and research profiles
  const enrichedCompanies = trackedCompanies.map(trackedCompany => {
    const mainCompany = mainCompanies.find(mc => mc.id === trackedCompany.main_company_id);
    const researchProfile = companyResearch.find(cr => 
      cr.company_name.toLowerCase() === trackedCompany.name.toLowerCase()
    );
    
    return {
      ...trackedCompany,
      mainCompany: mainCompany,
      researchProfile: researchProfile,
      hasProfile: !!mainCompany,
      hasResearchProfile: !!researchProfile
    };
  });

  // Filter companies based on search and priority
  const filteredCompanies = enrichedCompanies.filter(company => {
    const matchesSearch = company.name.toLowerCase().includes(searchTerm.toLowerCase());
    const matchesPriority = selectedPriority === "all" || company.priority === selectedPriority;
    return matchesSearch && matchesPriority;
  });

  // Get profile status for a company
  const getProfileStatus = (company: any) => {
    if (company.hasResearchProfile) {
      return { 
        hasProfile: true, 
        status: 'Research Profile', 
        icon: CheckCircle, 
        color: 'text-green-500',
        profileId: company.researchProfile.id
      };
    }
    
    if (!company.hasProfile) {
      return { hasProfile: false, status: 'No Profile', icon: XCircle, color: 'text-gray-400' };
    }
    
    const status = company.mainCompany?.status || 'pending';
    switch (status) {
      case 'completed':
        return { hasProfile: true, status: 'Complete', icon: CheckCircle, color: 'text-green-500' };
      case 'in_progress':
        return { hasProfile: true, status: 'In Progress', icon: Clock, color: 'text-blue-500' };
      default:
        return { hasProfile: true, status: 'Draft', icon: AlertTriangle, color: 'text-yellow-500' };
    }
  };

  const handleRunTodayReport = async () => {
    setIsGeneratingReport(true);
    
    try {
      const success = await triggerAnalyticsGeneration();
      
      if (success) {
        toast({
          title: "Report Generated",
          description: "Today's company intelligence report has been generated successfully.",
        });
        
        // Navigate to reports page
        navigate('/reports');
      } else {
        toast({
          title: "Generation Failed",
          description: "Failed to generate today's report. Please try again.",
          variant: "destructive",
        });
      }
    } catch (error: any) {
      toast({
        title: "Error",
        description: error.message || "An unexpected error occurred.",
        variant: "destructive",
      });
    } finally {
      setIsGeneratingReport(false);
    }
  };

  if (!user) {
    navigate('/auth');
    return null;
  }

  const loading = trackedCompaniesLoading || mainCompaniesLoading || researchLoading;

  return (
    <div className="min-h-screen bg-gray-50 dark:bg-gray-900">
      <NavBar />
      
      <main className="container mx-auto px-4 py-8 max-w-7xl">
        {/* Header */}
        <div className="mb-8">
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.5 }}
            className="flex flex-col lg:flex-row lg:items-center lg:justify-between gap-4"
          >
            <div className="text-left">
              <h1 className="text-3xl font-bold text-gray-900 dark:text-gray-100 mb-2 text-left">
                Company Intelligence Hub
              </h1>
              <p className="text-gray-600 dark:text-gray-400 text-left">
                Comprehensive research and analysis for Local 825 organizing efforts
              </p>
            </div>
            <div className="flex gap-3">
              <Button
                onClick={handleRunTodayReport}
                disabled={isGeneratingReport}
                className="bg-blue-600 hover:bg-blue-700 text-white"
              >
                {isGeneratingReport ? (
                  <>
                    <RefreshCw className="h-4 w-4 mr-2 animate-spin" />
                    Generating...
                  </>
                ) : (
                  <>
                    <Play className="h-4 w-4 mr-2" />
                    Run Today's Report
                  </>
                )}
              </Button>
              <Button
                onClick={() => navigate('/reports')}
                variant="outline"
              >
                <BarChart3 className="h-4 w-4 mr-2" />
                View Reports
              </Button>
            </div>
          </motion.div>
        </div>

        {/* Stats Cards */}
        <div className="grid grid-cols-1 md:grid-cols-4 gap-6 mb-8">
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.5, delay: 0.1 }}
          >
            <Card className="border-l-4 border-l-blue-600">
              <CardContent className="p-6">
                <div className="flex items-center space-x-4">
                  <div className="p-3 bg-blue-100 dark:bg-blue-900 rounded-lg">
                    <Building2 className="h-6 w-6 text-blue-600 dark:text-blue-400" />
                  </div>
                  <div>
                    <p className="text-sm font-medium text-gray-600 dark:text-gray-400">Tracked Companies</p>
                    <p className="text-2xl font-bold text-gray-900 dark:text-gray-100">{enrichedCompanies.length}</p>
                  </div>
                </div>
              </CardContent>
            </Card>
          </motion.div>

          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.5, delay: 0.2 }}
          >
            <Card className="border-l-4 border-l-green-600">
              <CardContent className="p-6">
                <div className="flex items-center space-x-4">
                  <div className="p-3 bg-green-100 dark:bg-green-900 rounded-lg">
                    <FileText className="h-6 w-6 text-green-600 dark:text-green-400" />
                  </div>
                  <div>
                    <p className="text-sm font-medium text-gray-600 dark:text-gray-400">Research Profiles</p>
                    <p className="text-2xl font-bold text-gray-900 dark:text-gray-100">
                      {enrichedCompanies.filter(c => c.hasResearchProfile).length}
                    </p>
                  </div>
                </div>
              </CardContent>
            </Card>
          </motion.div>

          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.5, delay: 0.3 }}
          >
            <Card className="border-l-4 border-l-red-600">
              <CardContent className="p-6">
                <div className="flex items-center space-x-4">
                  <div className="p-3 bg-red-100 dark:bg-red-900 rounded-lg">
                    <TrendingUp className="h-6 w-6 text-red-600 dark:text-red-400" />
                  </div>
                  <div>
                    <p className="text-sm font-medium text-gray-600 dark:text-gray-400">High Priority</p>
                    <p className="text-2xl font-bold text-gray-900 dark:text-gray-100">
                      {enrichedCompanies.filter(c => c.priority === 'high').length}
                    </p>
                  </div>
                </div>
              </CardContent>
            </Card>
          </motion.div>

          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.5, delay: 0.4 }}
          >
            <Card className="border-l-4 border-l-purple-600">
              <CardContent className="p-6">
                <div className="flex items-center space-x-4">
                  <div className="p-3 bg-purple-100 dark:bg-purple-900 rounded-lg">
                    <CheckCircle className="h-6 w-6 text-purple-600 dark:text-purple-400" />
                  </div>
                  <div>
                    <p className="text-sm font-medium text-gray-600 dark:text-gray-400">Intelligence Profiles</p>
                    <p className="text-2xl font-bold text-gray-900 dark:text-gray-100">
                      {enrichedCompanies.filter(c => c.hasProfile || c.hasResearchProfile).length}
                    </p>
                  </div>
                </div>
              </CardContent>
            </Card>
          </motion.div>
        </div>

        {/* Filters and Search */}
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.5, delay: 0.5 }}
          className="mb-6"
        >
          <Card>
            <CardContent className="p-6">
              <div className="flex flex-col sm:flex-row gap-4">
                <div className="flex-1">
                  <div className="relative">
                    <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4" />
                    <Input
                      placeholder="Search companies..."
                      value={searchTerm}
                      onChange={(e) => setSearchTerm(e.target.value)}
                      className="pl-10"
                    />
                  </div>
                </div>
                <div className="flex gap-2 flex-wrap">
                  <Button
                    variant={selectedPriority === "all" ? "default" : "outline"}
                    onClick={() => setSelectedPriority("all")}
                    size="sm"
                  >
                    All
                  </Button>
                  {Object.entries(priorityConfig).map(([key, config]) => (
                    <Button
                      key={key}
                      variant={selectedPriority === key ? "default" : "outline"}
                      onClick={() => setSelectedPriority(key)}
                      size="sm"
                    >
                      {config.label}
                    </Button>
                  ))}
                </div>
              </div>
            </CardContent>
          </Card>
        </motion.div>

        {/* Companies Table */}
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.5, delay: 0.6 }}
        >
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <Building2 className="h-5 w-5" />
                Company Intelligence Profiles
                <Badge variant="secondary">{filteredCompanies.length}</Badge>
              </CardTitle>
            </CardHeader>
            <CardContent>
              {loading ? (
                <div className="flex items-center justify-center py-12">
                  <RefreshCw className="h-8 w-8 animate-spin text-gray-400" />
                  <span className="ml-2 text-gray-600 dark:text-gray-400">Loading companies...</span>
                </div>
              ) : filteredCompanies.length === 0 ? (
                <div className="text-center py-12">
                  <Building2 className="h-12 w-12 text-gray-400 mx-auto mb-4" />
                  <h3 className="text-lg font-medium text-gray-900 dark:text-gray-100 mb-2">
                    No companies found
                  </h3>
                  <p className="text-gray-600 dark:text-gray-400">
                    {searchTerm || selectedPriority !== "all" 
                      ? "Try adjusting your search or filters"
                      : "Add companies to your tracking list to get started"
                    }
                  </p>
                </div>
              ) : (
                <div className="rounded-lg border shadow-sm overflow-hidden">
                  <Table>
                    <TableHeader>
                      <TableRow>
                        <TableHead>Company</TableHead>
                        <TableHead>Priority</TableHead>
                        <TableHead>Profile Status</TableHead>
                        <TableHead>Last Updated</TableHead>
                        <TableHead className="w-[200px]">Actions</TableHead>
                      </TableRow>
                    </TableHeader>
                    <TableBody>
                      {filteredCompanies.map((company) => {
                        const profileStatus = getProfileStatus(company);
                        const StatusIcon = profileStatus.icon;
                        
                        return (
                          <TableRow key={company.id}>
                            <TableCell>
                              <div>
                                <div className="font-medium text-gray-900 dark:text-gray-100">
                                  {company.name}
                                </div>
                                {company.address && (
                                  <div className="text-sm text-gray-500 dark:text-gray-400 flex items-center gap-1">
                                    <MapPin className="h-3 w-3" />
                                    {company.address}
                                  </div>
                                )}
                              </div>
                            </TableCell>
                            <TableCell>
                              <Badge className={priorityConfig[company.priority]?.color}>
                                {priorityConfig[company.priority]?.label}
                              </Badge>
                            </TableCell>
                            <TableCell>
                              <div className="flex items-center gap-2">
                                <StatusIcon className={`h-4 w-4 ${profileStatus.color}`} />
                                <span className="text-sm">{profileStatus.status}</span>
                              </div>
                            </TableCell>
                            <TableCell>
                              <div className="flex items-center gap-1 text-sm text-gray-500">
                                <Clock className="h-3 w-3" />
                                {company.researchProfile?.updated_at 
                                  ? new Date(company.researchProfile.updated_at).toLocaleDateString()
                                  : company.mainCompany?.updated_at 
                                  ? new Date(company.mainCompany.updated_at).toLocaleDateString()
                                  : new Date(company.updated_at).toLocaleDateString()
                                }
                              </div>
                            </TableCell>
                            <TableCell>
                              <div className="flex items-center gap-2">
                                {company.hasResearchProfile ? (
                                  <Button
                                    size="sm"
                                    onClick={() => navigate(`/company-profile/${company.researchProfile.id}`)}
                                    className="bg-blue-600 hover:bg-blue-700 text-white"
                                  >
                                    <Eye className="h-4 w-4 mr-1" />
                                    View Profile
                                  </Button>
                                ) : company.hasProfile ? (
                                  <Button
                                    size="sm"
                                    onClick={() => navigate(`/company-profile/${company.main_company_id}`)}
                                    className="bg-blue-600 hover:bg-blue-700 text-white"
                                  >
                                    <Eye className="h-4 w-4 mr-1" />
                                    View Profile
                                  </Button>
                                ) : (
                                  <Button
                                    size="sm"
                                    variant="outline"
                                    disabled
                                  >
                                    <FileText className="h-4 w-4 mr-1" />
                                    No Profile
                                  </Button>
                                )}
                              </div>
                            </TableCell>
                          </TableRow>
                        );
                      })}
                    </TableBody>
                  </Table>
                </div>
              )}
            </CardContent>
          </Card>
        </motion.div>
      </main>
      
      <footer className="text-center py-6 text-sm text-muted-foreground">
        © 2025 DataPilot+. Built for union intelligence.
      </footer>
    </div>
  );
}
</file>

<file path="src/pages/JobDetail.tsx">
import React, { useState, useEffect } from "react";
import { useParams, useNavigate } from "react-router-dom";
import { useAuth } from "@/contexts/AuthContext";
import NavBar from "@/components/NavBar";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Separator } from "@/components/ui/separator";
import { 
  ArrowLeft, 
  ExternalLink, 
  MapPin, 
  Calendar, 
  Building, 
  Briefcase, 
  TrendingUp, 
  AlertCircle, 
  Sparkles,
  DollarSign,
  Clock,
  Users,
  Target,
  CheckCircle,
  Info
} from "lucide-react";
import { supabase } from "@/integrations/supabase/client";
import { MarkdownRenderer } from "@/components/chat/MarkdownRenderer";
import { toast } from "@/hooks/use-toast";
import {
  Accordion,
  AccordionItem,
  AccordionTrigger,
  AccordionContent,
} from "@/components/ui/accordion";

interface Job {
  id: string;
  title: string;
  company?: string;
  location?: string;
  url: string;
  scraped_at?: string;
  created_at?: string;
  published_at?: string;
  priority?: string;
  job_type?: string;
  pay_range?: string;
  insights?: string;
  ai_analysis?: string;
  raw_content?: string;
  formatted_description?: string;
  wordpress_category?: string;
  source_type?: string;
  local_825_relevance?: string;
  enhanced_at?: string;
  is_processed?: boolean;
  is_active?: boolean;
  content?: string;
  content_type?: string;
  processed_at?: string;
  description?: string;
  full_analysis?: string;
  company_mentioned?: string;
  is_analyzed?: boolean;
  analyzed_at?: string;
  source_id?: string;
  news_sources?: {
    name: string;
    description: string | null;
  };
}

export default function JobDetail() {
  const { id } = useParams<{ id: string }>();
  const navigate = useNavigate();
  const { user } = useAuth();
  const [job, setJob] = useState<Job | null>(null);
  const [loading, setLoading] = useState(true);
  const [formattingDescription, setFormattingDescription] = useState(false);
  const [enhancingAnalysis, setEnhancingAnalysis] = useState(false);

  useEffect(() => {
    if (!user) {
      navigate("/auth");
      return;
    }
    
    if (id) {
      fetchJobDetail(id);
    }
  }, [user, navigate, id]);

  const fetchJobDetail = async (jobId: string) => {
    try {
      setLoading(true);
      
      // First try to get from job_listings table
      const { data: jobData, error: jobError } = await supabase
        .from('job_listings')
        .select('*')
        .eq('id', jobId)
        .maybeSingle();

      if (jobData) {
        console.log('Found job in job_listings table:', jobData);
        setJob(jobData as Job);
        setLoading(false);
        return;
      }

      // If not found in job_listings, try news_articles table for job content
      const { data: articleData, error: articleError } = await supabase
        .from('news_articles')
        .select(`
          *,
          news_sources (
            name,
            description
          )
        `)
        .eq('id', jobId)
        .maybeSingle();

      if (articleData) {
        console.log('Found job in news_articles table:', articleData);
        // Transform news article data to job format
        const transformedJob: Job = {
          id: articleData.id,
          title: articleData.title,
          company: articleData.company_mentioned,
          location: null, // Not available in news_articles
          url: articleData.url,
          scraped_at: articleData.created_at,
          created_at: articleData.created_at,
          published_at: articleData.published_at,
          priority: articleData.priority_level,
          job_type: articleData.content_type,
          content: articleData.content,
          description: articleData.description,
          full_analysis: articleData.full_analysis,
          local_825_relevance: articleData.local_825_relevance,
          is_analyzed: articleData.is_analyzed,
          analyzed_at: articleData.analyzed_at,
          wordpress_category: articleData.wordpress_category,
          content_type: articleData.content_type,
          news_sources: articleData.news_sources,
          is_active: true,
          source_type: 'news_article'
        };
        setJob(transformedJob);
        setLoading(false);
        return;
      }

      // If not found in either table
      console.error('Job not found in either table');
      setJob(null);
      
    } catch (error) {
      console.error('Error fetching job detail:', error);
      toast({
        title: "Error",
        description: "Failed to load job details. Please try again.",
        variant: "destructive",
      });
    } finally {
      setLoading(false);
    }
  };

  const formatJobContent = (content: string): string => {
    if (!content) return '';
    
    // Clean up common formatting issues first
    let formatted = content
      .replace(/&#8230;/g, '...')
      .replace(/&#38;/g, '&')
      .replace(/&nbsp;/g, ' ')
      .replace(/&amp;/g, '&')
      .replace(/&lt;/g, '<')
      .replace(/&gt;/g, '>')
      .replace(/&quot;/g, '"')
      .replace(/&#8217;/g, "'")
      .replace(/&#8216;/g, "'")
      .replace(/&#8220;/g, '"')
      .replace(/&#8221;/g, '"')
      .replace(/<[^>]*>/g, '') // Remove HTML tags
      .trim();

    // Create structured job posting with proper markdown formatting
    formatted = formatted
      // Create section headers for common job patterns
      .replace(/(Job Summary:|Position Summary:|About the Role:|Role Overview:|Job Overview:)/gi, '\n## $1\n')
      .replace(/(Responsibilities:|Key Responsibilities:|Primary Duties:|Main Responsibilities:)/gi, '\n## $1\n')
      .replace(/(Requirements:|Qualifications:|Required Skills:|Minimum Requirements:|Preferred Qualifications:)/gi, '\n## $1\n')
      .replace(/(Skills:|Technical Skills:|Required Skills:)/gi, '\n## $1\n')
      .replace(/(Benefits:|What We Offer:|Compensation:|Salary:|Pay:)/gi, '\n## $1\n')
      .replace(/(Company:|About Us:|About the Company:|Organization:)/gi, '\n## $1\n')
      .replace(/(Location:|Work Location:|Job Location:)/gi, '\n## $1\n')
      .replace(/(Job Type:|Employment Type:|Position Type:)/gi, '\n## $1\n')
      
      // Format bullet points and lists
      .replace(/(\n|^)(\*|•|-|\d+\.)\s*([A-Z])/g, '\n- $3')
      
      // Add emphasis to important terms
      .replace(/(\d+\+?\s*years?\s+of?\s+experience)/gi, '**$1**')
      .replace(/(\$[\d,]+(?:\.\d{2})?(?:\s*-\s*\$[\d,]+(?:\.\d{2})?)?(?:\s+(?:per\s+)?(?:hour|hr|annually|yearly|monthly))?)/gi, '**$1**')
      .replace(/\b(OSHA|CDL|Class A|Class B|certification|certified|license|licensed)\b/gi, '**$1**')
      .replace(/\b(crane|excavator|bulldozer|loader|grader|compactor|forklift|backhoe)\b/gi, '**$1**')
      
      // Format company names
      .replace(/\b([A-Z][a-z]+\s+[A-Z][a-z]+(?:\s+[A-Z][a-z]+)?)\s+(Corporation|Corp|Company|Co\.|Inc\.|LLC|Ltd\.)\b/g, '**$1 $2**')
      
      // Clean up excessive line breaks but maintain structure
      .replace(/\n{3,}/g, '\n\n')
      .trim();
    
    return formatted;
  };

  const formatJobDescription = async () => {
    if (!job || (!job.raw_content && !job.content)) return;
    
    setFormattingDescription(true);
    try {
      const { data, error } = await supabase.functions.invoke('format-job-description', {
        body: {
          jobDescription: job.raw_content || job.content,
          title: job.title,
          company: job.company
        }
      });

      if (error) throw error;

      if (data.formattedDescription) {
        // Update the job state with formatted description
        setJob(prev => prev ? {
          ...prev,
          formatted_description: data.formattedDescription
        } : null);

        // Save to database (only for job_listings table)
        if (job.source_type !== 'news_article') {
          await supabase
            .from('job_listings')
            .update({ formatted_description: data.formattedDescription })
            .eq('id', job.id);
        }

        toast({
          title: "Description Optimized",
          description: "Job description has been cleaned up and formatted for better readability.",
        });
      }
    } catch (error) {
      console.error('Error formatting description:', error);
      toast({
        title: "Formatting Failed",
        description: "Unable to optimize job description. Please try again.",
        variant: "destructive",
      });
    } finally {
      setFormattingDescription(false);
    }
  };

  const enhanceJobAnalysis = async () => {
    if (!job) return;
    
    setEnhancingAnalysis(true);
    try {
      const { data, error } = await supabase.functions.invoke('enhance-job-analysis', {
        body: {
          jobId: job.id
        }
      });

      if (error) throw error;

      if (data && data.success) {
        // Update the job state with enhanced analysis
        setJob(prev => prev ? {
          ...prev,
          ai_analysis: data.data.enhanced_analysis ? JSON.stringify(data.data.enhanced_analysis) : job.ai_analysis,
          insights: data.data.strategic_insights || job.insights,
          local_825_relevance: data.data.local_825_relevance,
          enhanced_at: new Date().toISOString()
        } : null);

        toast({
          title: "Analysis Enhanced",
          description: "AI analysis has been improved with additional insights for Local 825 members.",
        });
      }
    } catch (error) {
      console.error('Error enhancing analysis:', error);
      toast({
        title: "Enhancement Failed",
        description: "Unable to enhance job analysis. Please try again.",
        variant: "destructive",
      });
    } finally {
      setEnhancingAnalysis(false);
    }
  };

  const formatAIAnalysis = (analysis: string) => {
    if (!analysis) return '';
    
    try {
      const parsed = JSON.parse(analysis);
      
      const sections = [];
      
      if (parsed.improvedTitle) {
        sections.push(`**Position:** ${parsed.improvedTitle}`);
      }
      
      if (parsed.company) {
        sections.push(`**Company:** ${parsed.company}`);
      }
      
      if (parsed.location) {
        sections.push(`**Location:** ${parsed.location}`);
      }
      
      if (parsed.payRange) {
        sections.push(`**Pay Range:** ${parsed.payRange}`);
      }
      
      if (parsed.priority) {
        sections.push(`**Priority:** ${parsed.priority.toUpperCase()}`);
      }
      
      if (parsed.jobType) {
        sections.push(`**Job Type:** ${parsed.jobType.replace('_', ' ')}`);
      }
      
      if (parsed.equipmentTypes && parsed.equipmentTypes.length > 0) {
        sections.push(`**Equipment:** ${parsed.equipmentTypes.join(', ')}`);
      }
      
      if (parsed.certifications && parsed.certifications.length > 0) {
        sections.push(`**Certifications:** ${parsed.certifications.join(', ')}`);
      }
      
      if (parsed.experienceLevel) {
        sections.push(`**Experience Level:** ${parsed.experienceLevel}`);
      }
      
      if (parsed.unionFriendly !== undefined) {
        sections.push(`**Union Friendly:** ${parsed.unionFriendly ? 'Yes' : 'No'}`);
      }
      
      if (parsed.insights) {
        sections.push(`**Key Insights:** ${parsed.insights}`);
      }
      
      return sections.join('\n\n');
    } catch (error) {
      return analysis;
    }
  };

  const cleanRawContent = (content: string) => {
    if (!content) return '';
    
    // Clean up common formatting issues
    return content
      .replace(/&#8230;/g, '...')
      .replace(/&#38;/g, '&')
      .replace(/&nbsp;/g, ' ')
      .replace(/&amp;/g, '&')
      .replace(/&lt;/g, '<')
      .replace(/&gt;/g, '>')
      .replace(/&quot;/g, '"')
      .replace(/&#8217;/g, "'")
      .replace(/&#8216;/g, "'")
      .replace(/&#8220;/g, '"')
      .replace(/&#8221;/g, '"')
      .replace(/\n\s*\n\s*\n/g, '\n\n') // Remove excessive line breaks
      .trim();
  };

  const getPriorityColor = (priority: string) => {
    switch (priority) {
      case 'high':
        return 'bg-red-100 text-red-800 border-red-200 dark:bg-red-900/30 dark:text-red-300 dark:border-red-800';
      case 'medium':
        return 'bg-orange-100 text-orange-800 border-orange-200 dark:bg-orange-900/30 dark:text-orange-300 dark:border-orange-800';
      case 'low':
        return 'bg-blue-100 text-blue-800 border-blue-200 dark:bg-blue-900/30 dark:text-blue-300 dark:border-blue-800';
      default:
        return 'bg-gray-100 text-gray-800 border-gray-200 dark:bg-gray-900/30 dark:text-gray-300 dark:border-gray-800';
    }
  };

  const getJobTypeIcon = (jobType: string) => {
    switch (jobType) {
      case 'field':
        return <Target className="h-4 w-4" />;
      case 'office':
        return <Building className="h-4 w-4" />;
      case 'mechanic':
        return <Briefcase className="h-4 w-4" />;
      case 'admin':
        return <Users className="h-4 w-4" />;
      default:
        return <Briefcase className="h-4 w-4" />;
    }
  };

  // Helper to extract and display all job details from AI analysis or fallback
  const getJobDetailsFromAI = () => {
    let ai = null;
    try {
      ai = job?.ai_analysis ? JSON.parse(job.ai_analysis) : null;
    } catch {
      ai = null;
    }
    return {
      title: ai?.improvedTitle || job?.title,
      company: ai?.company || job?.company,
      location: ai?.location || job?.location,
      payRange: ai?.payRange || job?.pay_range,
      priority: ai?.priority || job?.priority,
      jobType: ai?.jobType || job?.job_type,
      unionFriendly: ai?.unionFriendly,
      equipmentTypes: ai?.equipmentTypes,
      certifications: ai?.certifications,
      experienceLevel: ai?.experienceLevel,
    };
  };

  if (loading) {
    return (
      <div className="min-h-screen flex flex-col bg-gradient-to-br from-slate-50 to-slate-100 dark:from-slate-900 dark:to-slate-800">
        <NavBar />
        <main className="flex-1 container max-w-5xl mx-auto px-4 py-8">
          <div className="flex items-center justify-center h-64">
            <div className="text-center">
              <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto mb-4"></div>
              <p className="text-muted-foreground">Loading job details...</p>
            </div>
          </div>
        </main>
      </div>
    );
  }

  if (!job) {
    return (
      <div className="min-h-screen flex flex-col bg-gradient-to-br from-slate-50 to-slate-100 dark:from-slate-900 dark:to-slate-800">
        <NavBar />
        <main className="flex-1 container max-w-5xl mx-auto px-4 py-8">
          <div className="text-center py-16">
            <h1 className="text-2xl font-bold mb-4 text-slate-800 dark:text-slate-200">Job Not Found</h1>
            <Button onClick={() => navigate("/feed")} size="lg">
              <ArrowLeft className="h-4 w-4 mr-2" />
              Back to Feed
            </Button>
          </div>
        </main>
      </div>
    );
  }

  const displayDate = job.published_at || job.scraped_at || job.created_at;
  const displayContent = job.content || job.description || "";
  const formattedJobContent = formatJobContent(displayContent);

  return (
    <div className="min-h-screen flex flex-col bg-gradient-to-br from-slate-50 to-slate-100 dark:from-slate-900 dark:to-slate-800">
      <NavBar />
      
      <main className="flex-1 container max-w-5xl mx-auto px-4 py-8">
        <div className="space-y-6">
          {/* Back button */}
          <Button 
            variant="ghost" 
            onClick={() => navigate("/feed")}
            className="text-slate-600 dark:text-slate-400 hover:text-slate-900 dark:hover:text-slate-100"
          >
            <ArrowLeft className="h-4 w-4 mr-2" />
            Back to Feed
          </Button>

          <Card className="border-0 shadow-xl bg-white/90 dark:bg-slate-800/90 backdrop-blur-sm">
            <CardHeader className="pb-6">
              <div className="flex flex-col lg:flex-row lg:items-start lg:justify-between gap-6">
                <div className="flex-1 space-y-4">
                  <div>
                    <CardTitle className="text-2xl lg:text-3xl font-bold text-slate-900 dark:text-slate-100 leading-tight mb-3">
                      {job.title}
                    </CardTitle>
                    <div className="flex flex-wrap items-center gap-4 text-lg">
                      <div className="flex items-center gap-2">
                        <Building className="h-5 w-5 text-primary" />
                        <span className="font-semibold text-primary">
                          {job.company || job.news_sources?.name || 'Company TBD'}
                        </span>
                      </div>
                      {job.location && (
                        <>
                          <span className="text-slate-400">•</span>
                          <div className="flex items-center gap-2">
                            <MapPin className="h-5 w-5 text-slate-500" />
                            <span className="text-slate-600 dark:text-slate-400">
                              {job.location}
                            </span>
                          </div>
                        </>
                      )}
                    </div>
                  </div>
                  
                  <div className="flex items-center gap-2 text-sm text-slate-500">
                    <Calendar className="h-4 w-4" />
                    Posted: {displayDate ? new Date(displayDate).toLocaleDateString('en-US', { 
                      year: 'numeric', 
                      month: 'long', 
                      day: 'numeric' 
                    }) : 'Date not available'}
                  </div>

                  {/* Job details badges */}
                  <div className="flex flex-wrap gap-3">
                    {job.priority && (
                      <Badge className={`px-3 py-1.5 ${getPriorityColor(job.priority)}`}>
                        <TrendingUp className="h-3 w-3 mr-1.5" />
                        {job.priority.charAt(0).toUpperCase() + job.priority.slice(1)} Priority
                      </Badge>
                    )}
                    
                    {job.job_type && (
                      <Badge variant="outline" className="px-3 py-1.5 capitalize">
                        {getJobTypeIcon(job.job_type)}
                        <span className="ml-1.5">{job.job_type.replace('_', ' ')}</span>
                      </Badge>
                    )}
                    
                    {job.pay_range && (
                      <Badge variant="secondary" className="px-3 py-1.5 bg-green-50 text-green-700 border-green-200 dark:bg-green-900/30 dark:text-green-300 dark:border-green-800">
                        <DollarSign className="h-3 w-3 mr-1.5" />
                        {job.pay_range}
                      </Badge>
                    )}

                    {job.wordpress_category && (
                      <Badge variant="outline" className="px-3 py-1.5">
                        <Info className="h-3 w-3 mr-1.5" />
                        {job.wordpress_category}
                      </Badge>
                    )}

                    {job.is_analyzed && (
                      <Badge variant="secondary" className="px-3 py-1.5 bg-green-100 text-green-700 dark:bg-green-900/30 dark:text-green-300">
                        <CheckCircle className="h-3 w-3 mr-1.5" />
                        Analyzed
                      </Badge>
                    )}
                  </div>
                </div>
                
                <div className="flex flex-col gap-3 lg:flex-shrink-0">
                  <Button asChild size="lg" className="w-full lg:w-auto bg-primary hover:bg-primary/90">
                    <a href={job.url} target="_blank" rel="noopener noreferrer">
                      <ExternalLink className="h-4 w-4 mr-2" />
                      View Original
                    </a>
                  </Button>
                  
                  {(job.raw_content || job.content) && !job.formatted_description && job.source_type !== 'news_article' && (
                    <Button 
                      variant="outline" 
                      size="lg"
                      onClick={formatJobDescription}
                      disabled={formattingDescription}
                      className="w-full lg:w-auto"
                    >
                      <Sparkles className="h-4 w-4 mr-2" />
                      {formattingDescription ? 'Optimizing...' : 'Optimize Description'}
                    </Button>
                  )}

                  {(job.ai_analysis || job.full_analysis) && (
                    <Button 
                      variant="outline" 
                      size="lg"
                      onClick={enhanceJobAnalysis}
                      disabled={enhancingAnalysis}
                      className="w-full lg:w-auto"
                    >
                      <TrendingUp className="h-4 w-4 mr-2" />
                      {enhancingAnalysis ? 'Enhancing...' : 'Enhance Analysis'}
                    </Button>
                  )}
                </div>
              </div>
            </CardHeader>
          </Card>

          {/* Job Content Display */}
          {formattedJobContent && (
            <Card className="border-0 shadow-xl bg-white/90 dark:bg-slate-800/90 backdrop-blur-sm">
              <CardHeader className="pb-4">
                <CardTitle className="text-xl font-semibold flex items-center gap-2 text-slate-800 dark:text-slate-200">
                  <Briefcase className="h-5 w-5" />
                  Job Description
                </CardTitle>
              </CardHeader>
              <CardContent>
                <div className="prose prose-slate max-w-none dark:prose-invert leading-relaxed prose-headings:text-left prose-p:text-left prose-li:text-left prose-blockquote:text-left">
                  <div className="text-left">
                    <MarkdownRenderer content={formattedJobContent} />
                  </div>
                </div>
              </CardContent>
            </Card>
          )}

          {/* AI Analysis as main highlight */}
          {(job.ai_analysis || job.full_analysis) && (
            <Card className="border-0 shadow-2xl bg-gradient-to-br from-blue-50 to-indigo-50 dark:from-blue-950/30 dark:to-indigo-950/30 border-blue-200 dark:border-blue-800">
              <CardHeader className="pb-4">
                <CardTitle className="text-2xl font-bold text-blue-800 dark:text-blue-200 flex items-center gap-2">
                  <TrendingUp className="h-6 w-6" />
                  AI Analysis
                  <Badge variant="secondary" className="ml-2 bg-blue-100 text-blue-700 dark:bg-blue-900/30 dark:text-blue-300">
                    <Sparkles className="h-4 w-4 mr-1" />
                    AI Enhanced
                  </Badge>
                </CardTitle>
              </CardHeader>
              <CardContent>
                <div className="prose prose-blue max-w-none dark:prose-invert prose-headings:text-blue-800 dark:prose-headings:text-blue-200">
                  <MarkdownRenderer content={job.ai_analysis ? formatAIAnalysis(job.ai_analysis) : (job.full_analysis || '')} />
                </div>
              </CardContent>
            </Card>
          )}

          {/* Key Insights */}
          {job.insights && (
            <Card className="border-0 shadow-xl bg-gradient-to-br from-orange-50 to-yellow-50 dark:from-orange-950/30 dark:to-yellow-950/30 border-orange-200 dark:border-orange-800">
              <CardHeader className="pb-4">
                <CardTitle className="text-xl font-semibold flex items-center gap-2 text-orange-800 dark:text-orange-200">
                  <AlertCircle className="h-5 w-5" />
                  Key Insights
                </CardTitle>
              </CardHeader>
              <CardContent>
                <div className="prose prose-orange max-w-none dark:prose-invert prose-headings:text-orange-800 dark:prose-headings:text-orange-200">
                  <MarkdownRenderer content={job.insights} />
                </div>
              </CardContent>
            </Card>
          )}

          {/* Local 825 Relevance */}
          {job.local_825_relevance && (
            <Card className="border-0 shadow-xl bg-gradient-to-br from-emerald-50 to-teal-50 dark:from-emerald-950/30 dark:to-teal-950/30 border-emerald-200 dark:border-emerald-800">
              <CardHeader className="pb-4">
                <CardTitle className="text-xl font-semibold flex items-center gap-2 text-emerald-800 dark:text-emerald-200">
                  <Users className="h-5 w-5" />
                  Local 825 Relevance
                  <Badge variant="secondary" className="ml-2 bg-emerald-100 text-emerald-700 dark:bg-emerald-900/30 dark:text-emerald-300">
                    <Target className="h-3 w-3 mr-1" />
                    Union Focused
                  </Badge>
                </CardTitle>
              </CardHeader>
              <CardContent>
                <div className="prose prose-emerald max-w-none dark:prose-invert prose-headings:text-emerald-800 dark:prose-headings:text-emerald-200">
                  <MarkdownRenderer content={job.local_825_relevance} />
                </div>
              </CardContent>
            </Card>
          )}

          {/* Raw Job Description in Accordion - only for actual job listings */}
          {job.raw_content && job.source_type !== 'news_article' && (
            <Accordion type="single" collapsible>
              <AccordionItem value="raw-job">
                <AccordionTrigger>
                  <span className="font-semibold text-slate-700 dark:text-slate-200">View Original Job Posting (Raw)</span>
                </AccordionTrigger>
                <AccordionContent>
                  <Card className="border-0 shadow bg-slate-50 dark:bg-slate-900/50">
                    <CardHeader className="pb-2">
                      <CardTitle className="text-lg font-semibold flex items-center gap-2 text-slate-800 dark:text-slate-200">
                        <Briefcase className="h-5 w-5" />
                        Raw Job Description
                      </CardTitle>
                    </CardHeader>
                    <CardContent>
                      <div className="whitespace-pre-wrap text-slate-700 dark:text-slate-300 leading-relaxed font-mono text-sm">
                        {formatJobContent(job.raw_content || '')}
                      </div>
                    </CardContent>
                  </Card>
                </AccordionContent>
              </AccordionItem>
            </Accordion>
          )}

          {/* Source Information */}
          <Card className="border-0 shadow-lg bg-slate-50/50 dark:bg-slate-900/50 backdrop-blur-sm">
            <CardContent className="pt-6">
              <div className="flex items-center justify-between text-sm text-slate-500 dark:text-slate-400">
                <div className="flex items-center gap-2">
                  <Info className="h-4 w-4" />
                  <span>Source: {job.news_sources?.name || job.source_type || 'henjii.com'}</span>
                  {job.wordpress_category && (
                    <>
                      <span>•</span>
                      <span>Category: {job.wordpress_category}</span>
                    </>
                  )}
                </div>
                <div className="flex items-center gap-2">
                  <Clock className="h-4 w-4" />
                  <span>Posted: {displayDate ? new Date(displayDate).toLocaleDateString() : 'Date not available'}</span>
                </div>
              </div>
            </CardContent>
          </Card>
        </div>
      </main>
      
      <footer className="text-center py-6 text-sm text-slate-500 bg-white/50 dark:bg-slate-900/50 backdrop-blur-sm border-t border-slate-200/50 dark:border-slate-800/50">
        © 2025 DataPilot+™. Intelligence for labor organizations.
      </footer>
    </div>
  );
}
</file>

<file path="src/components/analytics/FeedSyncStatus.tsx">
import { useQuery } from "@tanstack/react-query";
import { supabase } from "@/integrations/supabase/client";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Wifi, WifiOff, Clock, CheckCircle, AlertCircle } from "lucide-react";

interface NewsSource {
  id: string;
  name: string;
  is_active: boolean;
  last_sync_at: string | null;
  last_successful_sync_at: string | null;
  sync_status: string | null;
}

export const FeedSyncStatus = () => {
  const { data: newsSources, isLoading } = useQuery({
    queryKey: ['news-sources-sync-status'],
    queryFn: async () => {
      const { data, error } = await supabase
        .from('news_sources')
        .select('id, name, is_active, last_sync_at, last_successful_sync_at, sync_status')
        .order('last_sync_at', { ascending: false });
      
      if (error) throw error;
      return data as NewsSource[];
    }
  });

  if (isLoading) {
    return (
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2 text-left">
            <Wifi className="h-5 w-5" />
            Feed Sync Status
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="animate-pulse space-y-3">
            <div className="h-4 bg-gray-200 rounded w-3/4"></div>
            <div className="h-4 bg-gray-200 rounded w-1/2"></div>
          </div>
        </CardContent>
      </Card>
    );
  }

  const activeSources = newsSources?.filter(source => source.is_active) || [];
  const healthySources = activeSources.filter(source => 
    source.sync_status === 'success' || source.sync_status === 'completed'
  );
  const errorSources = activeSources.filter(source => 
    source.sync_status === 'error' || source.sync_status === 'failed'
  );

  const getLastSyncTime = () => {
    if (!newsSources?.length) return null;
    const lastSync = newsSources.reduce((latest, source) => {
      if (!source.last_successful_sync_at) return latest;
      if (!latest) return source.last_successful_sync_at;
      return new Date(source.last_successful_sync_at) > new Date(latest) 
        ? source.last_successful_sync_at 
        : latest;
    }, null as string | null);
    
    return lastSync ? new Date(lastSync).toLocaleString() : 'Never';
  };

  const getSyncStatusIcon = (status: string | null) => {
    switch (status) {
      case 'success':
      case 'completed':
        return <CheckCircle className="h-4 w-4 text-green-600" />;
      case 'error':
      case 'failed':
        return <AlertCircle className="h-4 w-4 text-red-600" />;
      default:
        return <Clock className="h-4 w-4 text-yellow-600" />;
    }
  };

  const getSyncStatusBadge = () => {
    if (errorSources.length > 0) {
      return <span className="ml-2"><Badge variant="destructive" className="px-3 py-1 text-xs rounded-full">Issues Detected</Badge></span>;
    }
    if (healthySources.length === activeSources.length && activeSources.length > 0) {
      return <span className="ml-2"><Badge variant="default" className="bg-green-600 hover:bg-green-700 text-white px-4 py-1 text-xs rounded-full font-semibold shadow-sm">All Systems Healthy</Badge></span>;
    }
    return <span className="ml-2"><Badge variant="secondary" className="px-3 py-1 text-xs rounded-full">Syncing</Badge></span>;
  };

  return (
    <Card className="p-4">
      <CardHeader className="pb-2">
        <div className="flex items-center justify-between w-full">
          <div className="flex items-center gap-2">
            <Wifi className="h-5 w-5" />
            <span className="text-lg font-semibold">Feed Sync Status</span>
          </div>
          {getSyncStatusBadge()}
        </div>
      </CardHeader>
      <CardContent className="space-y-4 text-left pt-2">
        <div className="grid grid-cols-2 gap-4">
          <div>
            <p className="text-xs text-muted-foreground font-medium mb-1">Active Feeds</p>
            <p className="text-3xl font-extrabold leading-tight">{activeSources.length}</p>
          </div>
          <div>
            <p className="text-xs text-muted-foreground font-medium mb-1">Healthy</p>
            <p className="text-3xl font-extrabold leading-tight text-green-600">{healthySources.length}</p>
          </div>
        </div>
        <div>
          <p className="text-xs text-muted-foreground font-medium mb-1">Last Successful Sync</p>
          <p className="text-sm font-medium">{getLastSyncTime()}</p>
        </div>
        {errorSources.length > 0 && (
          <div className="space-y-2">
            <p className="text-xs font-semibold text-red-600">Feeds with Issues:</p>
            <div className="space-y-1">
              {errorSources.slice(0, 3).map((source) => (
                <div key={source.id} className="flex items-center gap-2 text-xs">
                  {getSyncStatusIcon(source.sync_status)}
                  <span className="truncate">{source.name}</span>
                </div>
              ))}
              {errorSources.length > 3 && (
                <p className="text-xs text-muted-foreground">
                  +{errorSources.length - 3} more
                </p>
              )}
            </div>
          </div>
        )}
      </CardContent>
    </Card>
  );
};
</file>

<file path="src/components/feed/FeedHeader.tsx">
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { RefreshCw, Building2, Bot, ExternalLink } from "lucide-react";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";

interface Company {
  id: string;
  name: string;
  type: 'main' | 'tracked' | 'news_source';
}

interface FeedHeaderProps {
  refreshing: boolean;
  onRefresh: () => void;
  selectedCompany: string;
  onCompanyChange: (value: string) => void;
  allCompanies: Company[];
  onDebug?: () => void;
}

export default function FeedHeader({
  refreshing,
  onRefresh,
  selectedCompany,
  onCompanyChange,
  allCompanies,
  onDebug,
}: FeedHeaderProps) {
  return (
    <Card className="sticky top-4">
      <CardHeader>
        <div className="flex items-center justify-between">
          <CardTitle className="text-lg">Filter Articles</CardTitle>
          <div className="flex items-center gap-2">
            <Button
              size="sm"
              variant="outline"
              asChild
              className="flex items-center gap-2"
            >
              <a 
                href="https://825chat.datapilotplus.com" 
                target="_blank" 
                rel="noopener noreferrer"
              >
                <Bot className="h-4 w-4" />
                Assistant
                <ExternalLink className="h-3 w-3" />
              </a>
            </Button>
            <Button
              size="sm"
              variant="outline"
              onClick={onRefresh}
              disabled={refreshing}
              className="flex items-center gap-2"
            >
              <RefreshCw className={`h-4 w-4 ${refreshing ? 'animate-spin' : ''}`} />
              {refreshing ? 'Syncing...' : 'Sync Bulldozer'}
            </Button>
            {onDebug && (
              <Button
                size="sm"
                variant="outline"
                onClick={onDebug}
                className="flex items-center gap-2"
              >
                Debug DB
              </Button>
            )}
          </div>
        </div>
      </CardHeader>
      <CardContent>
        <div className="space-y-4">
          <div>
            <h4 className="text-sm font-medium mb-3 flex items-center gap-2">
              <Building2 className="h-4 w-4" />
              Companies
            </h4>
            <Select value={selectedCompany} onValueChange={onCompanyChange}>
              <SelectTrigger className="w-full">
                <SelectValue placeholder="All companies" />
              </SelectTrigger>
              <SelectContent className="bg-white dark:bg-gray-800 border shadow-lg z-50 max-h-60">
                <SelectItem value="all">
                  All Companies
                </SelectItem>
                {allCompanies.map((company) => (
                  <SelectItem 
                    key={`${company.type}-${company.id}`} 
                    value={company.name}
                  >
                    {company.name} ({company.type === 'main' ? 'Main' : company.type === 'tracked' ? 'Tracked' : 'News Source'})
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>
          </div>
        </div>
      </CardContent>
    </Card>
  );
}
</file>

<file path="src/pages/CompaniesTracking.tsx">
import { useState, useEffect } from "react";
import { useNavigate } from "react-router-dom";
import { useAuth } from "@/contexts/AuthContext";
import { useTrackedCompanies, Company } from "@/hooks/useTrackedCompanies";
import { useCompanyRequests } from "@/hooks/useCompanyRequests";
import { useCompanySync } from "@/hooks/useCompanySync";
import NavBar from "@/components/NavBar";
import CompanyRequestForm from "@/components/CompanyRequestForm";
import { Card, CardHeader, CardTitle, CardContent } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter, DialogTrigger } from "@/components/ui/dialog";
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table";
import { Plus, MoreVertical, Building2, Clock, CheckCircle, XCircle, Trash2, RefreshCw } from "lucide-react";
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
  AlertDialogTrigger,
} from "@/components/ui/alert-dialog";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import { Badge } from "@/components/ui/badge";
import { motion } from "framer-motion";

// Type definitions
type PriorityConfig = {
  [key: string]: {
    label: string;
    color: string;
  }
};

export default function CompaniesTracking() {
  const { user, loading: authLoading } = useAuth();
  const navigate = useNavigate();
  const { companies, loading, updateCompany, refetch } = useTrackedCompanies();
  const { requests, loading: requestsLoading, submitRequest, deleteRequest } = useCompanyRequests();
  const { syncMissingCompanies, syncing } = useCompanySync();
  
  const [isRequestDialogOpen, setIsRequestDialogOpen] = useState(false);
  const [isEditDialogOpen, setIsEditDialogOpen] = useState(false);
  const [companyPriority, setCompanyPriority] = useState<Company["priority"]>("interested");
  const [currentCompany, setCurrentCompany] = useState<Company | null>(null);
  const [submittingRequest, setSubmittingRequest] = useState(false);
  const [deletingRequestId, setDeletingRequestId] = useState<string | null>(null);
  
  // Auto-sync missing companies on load
  useEffect(() => {
    if (user && !loading && companies.length > 0) {
      syncMissingCompanies();
    }
  }, [user, loading, companies.length]);

  // Handle manual sync
  const handleSync = async () => {
    const success = await syncMissingCompanies();
    if (success) {
      await refetch();
    }
  };

  // Updated priority configuration with shorter labels
  const priorityConfig: PriorityConfig = {
    low: {
      label: "Low",
      color: "bg-blue-500/20 text-blue-700 dark:bg-blue-950/50 dark:text-blue-300"
    },
    interested: {
      label: "Interested",
      color: "bg-green-500/20 text-green-700 dark:bg-green-950/50 dark:text-green-300"
    },
    high: {
      label: "High",
      color: "bg-amber-500/20 text-amber-700 dark:bg-amber-950/50 dark:text-amber-300"
    },
    do_not_work: {
      label: "Do Not Work",
      color: "bg-red-500/20 text-red-700 dark:bg-red-950/50 dark:text-red-300"
    },
    agreement_ended: {
      label: "Agreement Ended",
      color: "bg-gray-500/20 text-gray-700 dark:bg-gray-950/50 dark:text-gray-300"
    },
  };

  // Status configuration for requests
  const statusConfig = {
    pending: { label: "Pending", color: "bg-yellow-100 text-yellow-800", icon: Clock },
    approved: { label: "Approved", color: "bg-green-100 text-green-800", icon: CheckCircle },
    rejected: { label: "Rejected", color: "bg-red-100 text-red-800", icon: XCircle },
  };

  // Edit existing company priority
  const handleEditCompany = async () => {
    if (!currentCompany) return;

    const success = await updateCompany(currentCompany.id, {
      priority: companyPriority,
    });

    if (success) {
      setIsEditDialogOpen(false);
      setCurrentCompany(null);
    }
  };

  // Submit company request
  const handleSubmitRequest = async (request: {
    company_name: string;
    company_address: string;
    reason: string;
  }) => {
    setSubmittingRequest(true);
    const success = await submitRequest(request);
    setSubmittingRequest(false);
    
    if (success) {
      setIsRequestDialogOpen(false);
    }
  };

  // Delete company request
  const handleDeleteRequest = async (requestId: string) => {
    setDeletingRequestId(requestId);
    const success = await deleteRequest(requestId);
    setDeletingRequestId(null);
  };

  // Open edit dialog with company data
  const openEditDialog = (company: Company) => {
    setCurrentCompany(company);
    setCompanyPriority(company.priority);
    setIsEditDialogOpen(true);
  };

  if (authLoading || loading) {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <div className="text-center">
          <div className="w-16 h-16 border-4 border-primary border-t-transparent rounded-full animate-spin mx-auto"></div>
          <p className="mt-4 text-muted-foreground">Loading companies...</p>
        </div>
      </div>
    );
  }

  if (!user) {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <div className="text-center">
          <h2 className="text-2xl font-bold mb-4">Authentication Required</h2>
          <p className="text-muted-foreground mb-4">Please sign in to manage your tracked companies.</p>
          <Button onClick={() => navigate("/auth")}>Sign In</Button>
        </div>
      </div>
    );
  }

  return (
    <div className="relative min-h-screen flex flex-col">
      {/* Background gradient */}
      <div className="absolute inset-0 bg-gradient-to-br from-background to-secondary dark:from-background dark:to-card z-[-1]" />
      
      <NavBar />

      <main className="flex-1 container px-4 py-8 space-y-6">
        <div className="flex flex-col space-y-4 items-start text-left">
          <div>
            <h1 className="text-3xl font-bold tracking-tight text-left">Tracked Companies</h1>
            <p className="text-muted-foreground mt-2 text-left">
              All companies are automatically tracked. You can adjust the priority of companies to focus on organizing efforts.
            </p>
          </div>
          
          <div className="flex gap-2">
            <Button 
              onClick={handleSync}
              disabled={syncing}
              className="gap-2 bg-blue-600 text-white hover:bg-green-600 hover:text-white transition-colors"
            >
              <RefreshCw className={`h-4 w-4 ${syncing ? 'animate-spin' : ''}`} />
              {syncing ? 'Syncing...' : 'Sync Companies'}
            </Button>
            
            {/* Request New Company Dialog */}
            <Dialog open={isRequestDialogOpen} onOpenChange={setIsRequestDialogOpen}>
              <DialogTrigger asChild>
                <Button className="gap-2 bg-red-600 text-white hover:bg-red-700 hover:text-white transition-colors">
                  <Plus className="h-4 w-4" /> Add/Request New Company
                </Button>
              </DialogTrigger>
              <DialogContent className="sm:max-w-md">
                <CompanyRequestForm
                  onSubmit={handleSubmitRequest}
                  onCancel={() => setIsRequestDialogOpen(false)}
                  submitting={submittingRequest}
                />
              </DialogContent>
            </Dialog>
          </div>
          
          {/* Edit Company Dialog */}
          <Dialog open={isEditDialogOpen} onOpenChange={setIsEditDialogOpen}>
            <DialogContent className="sm:max-w-md">
              <DialogHeader>
                <DialogTitle>Edit Company Priority</DialogTitle>
              </DialogHeader>
              <div className="space-y-4 py-4">
                <div className="space-y-1">
                  <label className="text-sm font-medium">Priority</label>
                  <Select value={companyPriority} onValueChange={(value) => setCompanyPriority(value as Company['priority'])}>
                    <SelectTrigger>
                      <SelectValue placeholder="Select priority" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="low">Low</SelectItem>
                      <SelectItem value="interested">Interested</SelectItem>
                      <SelectItem value="high">High</SelectItem>
                      <SelectItem value="do_not_work">Do Not Work</SelectItem>
                      <SelectItem value="agreement_ended">Agreement Ended</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
              </div>
              <DialogFooter>
                <Button variant="outline" onClick={() => setIsEditDialogOpen(false)}>Cancel</Button>
                <Button onClick={handleEditCompany}>Save Changes</Button>
              </DialogFooter>
            </DialogContent>
          </Dialog>
        </div>

        {/* Tracked Companies Section */}
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Building2 className="h-5 w-5" />
              Tracked Companies
              <Badge variant="secondary">{companies.length}</Badge>
            </CardTitle>
          </CardHeader>
          <CardContent>
            <motion.div 
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              transition={{ duration: 0.5 }}
              className="rounded-lg border shadow-sm overflow-hidden"
            >
              <Table>
                <TableHeader>
                  <TableRow>
                    <TableHead className="text-left">Company</TableHead>
                    <TableHead className="hidden md:table-cell text-left">Description</TableHead>
                    <TableHead className="text-left">Priority</TableHead>
                    <TableHead className="w-[60px] text-left">Actions</TableHead>
                  </TableRow>
                </TableHeader>
                <TableBody>
                  {companies.map((company) => (
                    <TableRow key={company.id}>
                      <TableCell className="font-medium text-left">{company.name}</TableCell>
                      <TableCell className="hidden md:table-cell text-left">{company.address || "—"}</TableCell>
                      <TableCell className="text-left">
                        <span className={`inline-block whitespace-nowrap px-2.5 py-0.5 text-xs font-medium rounded-full ${priorityConfig[company.priority].color}`}>
                          {priorityConfig[company.priority].label}
                        </span>
                      </TableCell>
                      <TableCell className="text-left">
                        <DropdownMenu>
                          <DropdownMenuTrigger asChild>
                            <Button variant="ghost" size="icon" className="h-8 w-8 p-0">
                              <MoreVertical className="h-4 w-4" />
                              <span className="sr-only">Open menu</span>
                            </Button>
                          </DropdownMenuTrigger>
                          <DropdownMenuContent align="end">
                            <DropdownMenuItem onClick={() => openEditDialog(company)}>
                              Edit Priority
                            </DropdownMenuItem>
                          </DropdownMenuContent>
                        </DropdownMenu>
                      </TableCell>
                    </TableRow>
                  ))}
                </TableBody>
              </Table>
            </motion.div>
          </CardContent>
        </Card>

        {/* Company Requests Section */}
        {requests.length > 0 && (
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <Plus className="h-5 w-5" />
                Your Company Requests
                <Badge variant="secondary">{requests.length}</Badge>
              </CardTitle>
            </CardHeader>
            <CardContent>
              <motion.div 
                initial={{ opacity: 0 }}
                animate={{ opacity: 1 }}
                transition={{ duration: 0.5 }}
                className="rounded-lg border shadow-sm overflow-hidden"
              >
                <Table>
                  <TableHeader>
                    <TableRow>
                      <TableHead>Company Name</TableHead>
                      <TableHead className="hidden md:table-cell">Address</TableHead>
                      <TableHead>Status</TableHead>
                      <TableHead className="hidden md:table-cell">Submitted</TableHead>
                      <TableHead className="w-[60px]">Actions</TableHead>
                    </TableRow>
                  </TableHeader>
                  <TableBody>
                    {requests.map((request) => {
                      const StatusIcon = statusConfig[request.status].icon;
                      return (
                        <TableRow key={request.id}>
                          <TableCell className="font-medium">{request.company_name}</TableCell>
                          <TableCell className="hidden md:table-cell">{request.company_address || "—"}</TableCell>
                          <TableCell>
                            <div className="flex items-center gap-2">
                              <StatusIcon className="h-4 w-4" />
                              <span className={`inline-block whitespace-nowrap px-2.5 py-0.5 text-xs font-medium rounded-full ${statusConfig[request.status].color}`}>
                                {statusConfig[request.status].label}
                              </span>
                            </div>
                          </TableCell>
                          <TableCell className="hidden md:table-cell">
                            {new Date(request.created_at).toLocaleDateString()}
                          </TableCell>
                          <TableCell>
                            <AlertDialog>
                              <AlertDialogTrigger asChild>
                                <Button
                                  variant="ghost"
                                  size="icon"
                                  className="h-8 w-8 p-0 text-red-600 hover:text-red-700 hover:bg-red-50"
                                  disabled={deletingRequestId === request.id}
                                >
                                  <Trash2 className="h-4 w-4" />
                                  <span className="sr-only">Delete request</span>
                                </Button>
                              </AlertDialogTrigger>
                              <AlertDialogContent>
                                <AlertDialogHeader>
                                  <AlertDialogTitle>Delete Company Request</AlertDialogTitle>
                                  <AlertDialogDescription>
                                    Are you sure you want to delete your request for "{request.company_name}"? This action cannot be undone.
                                  </AlertDialogDescription>
                                </AlertDialogHeader>
                                <AlertDialogFooter>
                                  <AlertDialogCancel>Cancel</AlertDialogCancel>
                                  <AlertDialogAction
                                    onClick={() => handleDeleteRequest(request.id)}
                                    className="bg-red-600 hover:bg-red-700"
                                  >
                                    Delete
                                  </AlertDialogAction>
                                </AlertDialogFooter>
                              </AlertDialogContent>
                            </AlertDialog>
                          </TableCell>
                        </TableRow>
                      );
                    })}
                  </TableBody>
                </Table>
              </motion.div>
            </CardContent>
          </Card>
        )}

        {/* Empty State for when no companies exist */}
        {companies.length === 0 && (
          <Card className="border-dashed border-2">
            <CardContent className="pt-10 pb-10 flex flex-col items-center justify-center space-y-4">
              <div className="rounded-full bg-primary/10 p-4">
                <Building2 className="h-10 w-10 text-muted-foreground" />
              </div>
              <CardTitle>Setting up your company tracking...</CardTitle>
              <p className="text-center text-muted-foreground max-w-md">
                Your companies are being automatically added. This should only take a moment.
              </p>
            </CardContent>
          </Card>
        )}
      </main>
      
      <footer className="text-center py-6 text-sm text-muted-foreground">
        © 2025 DataPilot+. Built for union intelligence.
      </footer>
    </div>
  );
}
</file>

<file path="src/App.tsx">
import { BrowserRouter as Router, Routes, Route } from "react-router-dom";
import { QueryClient, QueryClientProvider } from "@tanstack/react-query";
import { AuthProvider } from "@/contexts/AuthContext";
import { ThemeProvider } from "@/hooks/useTheme";
import { Toaster } from "@/components/ui/sonner";
import MaintenanceWrapper from "@/components/MaintenanceWrapper";
import RootRedirect from "@/components/RootRedirect";
import ProtectedRoute from "@/components/ProtectedRoute";

// Page imports
import Index from "@/pages/Index";
import Auth from "@/pages/Auth";
import Local825Signup from "@/pages/Local825Signup";
import Dashboard from "@/pages/Dashboard";
import Profile from "@/pages/Profile";
import Onboarding from "@/pages/Onboarding";
import Feed from "@/pages/Feed";
import ArticleDetail from "@/pages/ArticleDetail";
import JobDetail from "@/pages/JobDetail";
import DailyJobsReport from "@/pages/DailyJobsReport";
import DataPoints from "@/pages/DataPoints";
import Chat from "@/pages/Chat";
import CompaniesTracking from "@/pages/CompaniesTracking";
import CompanyReports from "@/pages/CompanyReports";
import CompanyProfile from "@/pages/CompanyProfile";
import CompanyResearchDetail from "@/pages/CompanyResearchDetail";
import CompanyAnalysis from "@/pages/CompanyAnalysis";
import ShareableProfile from "@/pages/ShareableProfile";
import NewsSourcesManagement from "@/pages/NewsSourcesManagement";
import Reports from "@/pages/Reports";
import Settings from "@/pages/Settings";
import TeamInvites from "@/pages/TeamInvites";
import UserGuide from "@/pages/UserGuide";
import Admin from "@/pages/Admin";
import NotFound from "@/pages/NotFound";
import EdgarTestComponent from "@/components/EdgarTestComponent";

import "./App.css";

const queryClient = new QueryClient();

function App() {
  return (
    <QueryClientProvider client={queryClient}>
      <ThemeProvider>
        <AuthProvider>
          <Router>
            <MaintenanceWrapper>
              <div className="App">
                <Routes>
                  <Route path="/" element={<RootRedirect />} />
                  <Route path="/home" element={<Index />} />
                  <Route path="/auth" element={<Auth />} />
                  <Route path="/signup/local825" element={<Local825Signup />} />
                  <Route
                    path="/dashboard"
                    element={
                      <ProtectedRoute>
                        <Dashboard />
                      </ProtectedRoute>
                    }
                  />
                  <Route
                    path="/profile"
                    element={
                      <ProtectedRoute>
                        <Profile />
                      </ProtectedRoute>
                    }
                  />
                  <Route
                    path="/onboarding"
                    element={
                      <ProtectedRoute>
                        <Onboarding />
                      </ProtectedRoute>
                    }
                  />
                  <Route
                    path="/feed"
                    element={
                      <ProtectedRoute>
                        <Feed />
                      </ProtectedRoute>
                    }
                  />
                  <Route
                    path="/article/:id"
                    element={
                      <ProtectedRoute>
                        <ArticleDetail />
                      </ProtectedRoute>
                    }
                  />
                  <Route
                    path="/job/:id"
                    element={
                      <ProtectedRoute>
                        <JobDetail />
                      </ProtectedRoute>
                    }
                  />
                  <Route
                    path="/daily-jobs"
                    element={
                      <ProtectedRoute>
                        <DailyJobsReport />
                      </ProtectedRoute>
                    }
                  />
                  <Route
                    path="/data-points"
                    element={
                      <ProtectedRoute>
                        <DataPoints />
                      </ProtectedRoute>
                    }
                  />
                  <Route
                    path="/chat"
                    element={
                      <ProtectedRoute>
                        <Chat />
                      </ProtectedRoute>
                    }
                  />
                  <Route
                    path="/companies"
                    element={
                      <ProtectedRoute>
                        <CompaniesTracking />
                      </ProtectedRoute>
                    }
                  />
                  <Route
                    path="/company-reports"
                    element={
                      <ProtectedRoute>
                        <CompanyReports />
                      </ProtectedRoute>
                    }
                  />
                  <Route
                    path="/company-profile/:id"
                    element={
                      <ProtectedRoute>
                        <CompanyProfile />
                      </ProtectedRoute>
                    }
                  />
                  <Route
                    path="/company-research/:id"
                    element={
                      <ProtectedRoute>
                        <CompanyResearchDetail />
                      </ProtectedRoute>
                    }
                  />
                  <Route
                    path="/company-analysis"
                    element={
                      <ProtectedRoute>
                        <CompanyAnalysis />
                      </ProtectedRoute>
                    }
                  />
                  <Route path="/profile/:id" element={<ShareableProfile />} />
                  <Route
                    path="/news-sources"
                    element={
                      <ProtectedRoute>
                        <NewsSourcesManagement />
                      </ProtectedRoute>
                    }
                  />
                  <Route
                    path="/reports"
                    element={
                      <ProtectedRoute>
                        <Reports />
                      </ProtectedRoute>
                    }
                  />
                  <Route
                    path="/settings"
                    element={
                      <ProtectedRoute>
                        <Settings />
                      </ProtectedRoute>
                    }
                  />
                  <Route
                    path="/team-invites"
                    element={
                      <ProtectedRoute>
                        <TeamInvites />
                      </ProtectedRoute>
                    }
                  />
                  <Route
                    path="/user-guide"
                    element={
                      <ProtectedRoute>
                        <UserGuide />
                      </ProtectedRoute>
                    }
                  />
                  <Route path="/admin" element={<Admin />} />
                  <Route
                    path="/edgar-test"
                    element={
                      <ProtectedRoute>
                        <EdgarTestComponent />
                      </ProtectedRoute>
                    }
                  />
                  <Route path="*" element={<NotFound />} />
                </Routes>
                <Toaster />
              </div>
            </MaintenanceWrapper>
          </Router>
        </AuthProvider>
      </ThemeProvider>
    </QueryClientProvider>
  );
}

export default App;
</file>

<file path="supabase/functions/generate-daily-analytics/index.ts">
import { serve } from "https://deno.land/std@0.168.0/http/server.ts"
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2'

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
}

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response('ok', { headers: corsHeaders })
  }

  try {
    const supabaseClient = createClient(
      Deno.env.get('SUPABASE_URL') ?? '',
      Deno.env.get('SUPABASE_SERVICE_ROLE_KEY') ?? ''
    )

    console.log('Starting daily analytics generation...');

    // Get current date and time for analysis
    const now = new Date();
    const analysisDate = now.toISOString().split('T')[0];
    const analysisTime = '18:00:00'; // 6 PM

    // Check if analytics already exist for this date/time
    const { data: existingAnalytics } = await supabaseClient
      .from('daily_analytics')
      .select('id')
      .eq('analysis_date', analysisDate)
      .eq('analysis_time', analysisTime)
      .single();

    if (existingAnalytics) {
      console.log('Analytics already exist for this time period');
      return new Response(
        JSON.stringify({ 
          success: true,
          message: 'Analytics already generated for this period',
          data: existingAnalytics
        }),
        { headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
      );
    }

    // Calculate timeframe for analysis (today only)
    const startOfDay = new Date(now);
    startOfDay.setHours(0, 0, 0, 0);
    const endOfDay = new Date(now);
    endOfDay.setHours(23, 59, 59, 999);

    console.log('Fetching today\'s articles with category analysis...');

    // Fetch today's articles with detailed WordPress category analysis
    const { data: articles, error: articlesError } = await supabaseClient
      .from('news_articles')
      .select(`
        *,
        news_sources (
          name
        )
      `)
      .gte('created_at', startOfDay.toISOString())
      .lte('created_at', endOfDay.toISOString())
      .order('created_at', { ascending: false });

    if (articlesError) {
      console.error('Error fetching articles:', articlesError);
      throw articlesError;
    }

    console.log(`Found ${articles?.length || 0} articles`);

    console.log('Fetching today\'s job listings with category analysis...');

    // Fetch today's job listings with WordPress category analysis
    const { data: jobs, error: jobsError } = await supabaseClient
      .from('job_listings')
      .select('*')
      .gte('scraped_at', startOfDay.toISOString())
      .lte('scraped_at', endOfDay.toISOString())
      .order('scraped_at', { ascending: false });

    if (jobsError) {
      console.error('Error fetching jobs:', jobsError);
      throw jobsError;
    }

    console.log(`Found ${jobs?.length || 0} jobs`);

    // Fetch active news sources for context
    const { data: sources, error: sourcesError } = await supabaseClient
      .from('news_sources')
      .select('*')
      .eq('is_active', true);

    if (sourcesError) {
      console.error('Error fetching sources:', sourcesError);
      throw sourcesError;
    }

    console.log(`Found ${sources?.length || 0} active sources`);

    // Analyze content by WordPress categories
    const categoryAnalysis = {
      articles: {
        'construction-news': articles?.filter(a => a.wordpress_category === 'construction-news').length || 0,
        'employer-watch': articles?.filter(a => a.wordpress_category === 'employer-watch').length || 0,
        'labor-news': articles?.filter(a => a.wordpress_category === 'labor-news').length || 0,
        'safety-alerts': articles?.filter(a => a.wordpress_category === 'safety-alerts').length || 0,
        'contract-updates': articles?.filter(a => a.wordpress_category === 'contract-updates').length || 0,
        'organizing-intel': articles?.filter(a => a.wordpress_category === 'organizing-intel').length || 0,
        'uncategorized': articles?.filter(a => !a.wordpress_category || a.wordpress_category === 'uncategorized').length || 0
      },
      jobs: {
        'employer-watch': jobs?.filter(j => j.wordpress_category === 'employer-watch').length || 0,
        'job-opportunities': jobs?.filter(j => j.wordpress_category === 'job-opportunities').length || 0,
        'uncategorized': jobs?.filter(j => !j.wordpress_category || j.wordpress_category === 'uncategorized').length || 0
      }
    };

    // Calculate comprehensive metrics based on actual categories
    const activeNewsSourcesCount = sources?.length || 0;
    const newsArticlesCount = articles?.length || 0;
    const jobListingsCount = jobs?.length || 0;

    // Analyze job trends and patterns based on actual data
    const jobAnalysis = {
      totalJobs: jobListingsCount,
      companiesPosting: new Set(jobs?.map(j => j.company).filter(Boolean)).size,
      locations: [...new Set(jobs?.map(j => j.location).filter(Boolean))],
      priorityBreakdown: {
        high: jobs?.filter(j => j.priority === 'high').length || 0,
        medium: jobs?.filter(j => j.priority === 'medium').length || 0,
        low: jobs?.filter(j => j.priority === 'low').length || 0
      },
      jobTypes: [...new Set(jobs?.map(j => j.job_type).filter(Boolean))],
      averageRelevance: jobs?.filter(j => j.local_825_relevance).length || 0,
      categoryBreakdown: categoryAnalysis.jobs
    };

    // Analyze news patterns based on actual categories
    const newsAnalysis = {
      totalArticles: newsArticlesCount,
      companiesMentioned: [...new Set(articles?.map(a => a.company_mentioned).filter(Boolean))],
      relevanceBreakdown: {
        high: articles?.filter(a => a.local_825_relevance === 'high').length || 0,
        medium: articles?.filter(a => a.local_825_relevance === 'medium').length || 0,
        low: articles?.filter(a => a.local_825_relevance === 'low').length || 0
      },
      sourcesActive: [...new Set(articles?.map(a => a.news_sources?.name).filter(Boolean))],
      categoryBreakdown: categoryAnalysis.articles
    };

    // Generate labor activity data with category-based analysis
    const laborActivityData = [
      { 
        name: 'Safety Issues', 
        value: categoryAnalysis.articles['safety-alerts'] + 
               (articles?.filter(a => 
                 a.title?.toLowerCase().includes('safety') || 
                 a.description?.toLowerCase().includes('accident') ||
                 a.description?.toLowerCase().includes('injury') ||
                 a.content?.toLowerCase().includes('osha')
               ).length || 0),
        details: articles?.filter(a => 
          a.wordpress_category === 'safety-alerts' ||
          a.title?.toLowerCase().includes('safety') || 
          a.description?.toLowerCase().includes('accident')
        ).map(a => ({ title: a.title, company: a.company_mentioned })) || []
      },
      { 
        name: 'Labor Disputes', 
        value: categoryAnalysis.articles['labor-news'] + 
               (articles?.filter(a => 
                 a.title?.toLowerCase().includes('dispute') || 
                 a.description?.toLowerCase().includes('strike') ||
                 a.description?.toLowerCase().includes('conflict') ||
                 a.content?.toLowerCase().includes('union')
               ).length || 0),
        details: articles?.filter(a => 
          a.wordpress_category === 'labor-news' ||
          a.title?.toLowerCase().includes('dispute') || 
          a.description?.toLowerCase().includes('strike')
        ).map(a => ({ title: a.title, company: a.company_mentioned })) || []
      },
      { 
        name: 'Contract News', 
        value: categoryAnalysis.articles['contract-updates'] + 
               (articles?.filter(a => 
                 a.title?.toLowerCase().includes('contract') || 
                 a.description?.toLowerCase().includes('negotiation') ||
                 a.description?.toLowerCase().includes('agreement') ||
                 a.content?.toLowerCase().includes('collective bargaining')
               ).length || 0),
        details: articles?.filter(a => 
          a.wordpress_category === 'contract-updates' ||
          a.title?.toLowerCase().includes('contract')
        ).map(a => ({ title: a.title, company: a.company_mentioned })) || []
      },
      { 
        name: 'Job Opportunities', 
        value: jobListingsCount,
        details: jobs?.slice(0, 5).map(j => ({ 
          title: j.title, 
          company: j.company, 
          location: j.location,
          priority: j.priority 
        })) || []
      },
      {
        name: 'Organizing Intel',
        value: categoryAnalysis.articles['organizing-intel'],
        details: articles?.filter(a => a.wordpress_category === 'organizing-intel')
          .map(a => ({ title: a.title, company: a.company_mentioned })) || []
      },
      {
        name: 'Employer Watch',
        value: categoryAnalysis.articles['employer-watch'] + categoryAnalysis.jobs['employer-watch'],
        details: [...(articles?.filter(a => a.wordpress_category === 'employer-watch') || []),
                 ...(jobs?.filter(j => j.wordpress_category === 'employer-watch') || [])]
          .map(item => ({ 
            title: item.title, 
            company: item.company_mentioned || item.company 
          })) || []
      }
    ];

    const laborAlertsCount = laborActivityData.reduce((sum, item) => sum + item.value, 0);

    console.log('Generating enhanced AI insights...');

    // Generate comprehensive AI insights using OpenAI with enhanced prompts
    let aiInsights = {
      dailySummary: '',
      keyInsights: [],
      highPriorityAlerts: [],
      trendAnalysis: '',
      verifiedHeadlines: [],
      strategicTakeaways: [],
      actionItems: {
        next_7_days: [],
        next_30_days: [],
        next_90_days: []
      },
      jobMarketAnalysis: '',
      companySpotlight: [],
      riskAssessment: []
    };

    try {
      const openaiApiKey = Deno.env.get('OPENAI_API_KEY');
      if (openaiApiKey && (articles?.length > 0 || jobs?.length > 0)) {
        console.log('Using OpenAI for enhanced analysis...');
        
        // Prepare comprehensive content for analysis with category information
        const articleSummaries = articles?.slice(0, 25).map(article => 
          `[NEWS - ${article.wordpress_category || 'uncategorized'}] ${article.title}: ${article.description || 'No description'} | Company: ${article.company_mentioned || 'N/A'} | Relevance: ${article.local_825_relevance || 'N/A'} | URL: ${article.url}`
        ).join('\n\n') || '';

        const jobSummaries = jobs?.slice(0, 20).map(job => 
          `[JOB - ${job.wordpress_category || 'uncategorized'}] ${job.title} at ${job.company || 'Unknown'} in ${job.location || 'Unknown'} | Pay: ${job.pay_range || 'TBD'} | Priority: ${job.priority || 'N/A'} | Type: ${job.job_type || 'N/A'} | URL: ${job.url}`
        ).join('\n\n') || '';

        const combinedContent = `${articleSummaries}\n\n${jobSummaries}`;

        const response = await fetch('https://api.openai.com/v1/chat/completions', {
          method: 'POST',
          headers: {
            'Authorization': `Bearer ${openaiApiKey}`,
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            model: "gpt-4o-mini",
            messages: [
              {
                role: "system",
                content: `You are a senior labor intelligence analyst creating daily briefings for Local 825 Operating Engineers union leadership. Create professional, actionable intelligence reports that mirror the format: "Daily intelligence briefing: Analyzed X news articles and Y job opportunities from Z monitored sources. Today's focus: A companies actively hiring, B companies in the news, with C labor-related activities requiring attention."`
              },
              {
                role: "user",
                content: `DAILY INTELLIGENCE BRIEFING - ${analysisDate}

METRICS SUMMARY:
- ${newsArticlesCount} news articles analyzed from ${activeNewsSourcesCount} sources
- ${jobListingsCount} job opportunities identified across ${jobAnalysis.companiesPosting} companies
- ${laborAlertsCount} labor-related activities detected

CATEGORY BREAKDOWN - NEWS ARTICLES:
- Construction News: ${categoryAnalysis.articles['construction-news']}
- Employer Watch: ${categoryAnalysis.articles['employer-watch']}
- Labor News: ${categoryAnalysis.articles['labor-news']}
- Safety Alerts: ${categoryAnalysis.articles['safety-alerts']}
- Contract Updates: ${categoryAnalysis.articles['contract-updates']}
- Organizing Intel: ${categoryAnalysis.articles['organizing-intel']}
- Uncategorized: ${categoryAnalysis.articles['uncategorized']}

CATEGORY BREAKDOWN - JOB LISTINGS:
- Employer Watch Jobs: ${categoryAnalysis.jobs['employer-watch']}
- Job Opportunities: ${categoryAnalysis.jobs['job-opportunities']}
- Uncategorized Jobs: ${categoryAnalysis.jobs['uncategorized']}

JOB MARKET ANALYSIS:
- Active locations: ${jobAnalysis.locations.join(', ')}
- Job types: ${jobAnalysis.jobTypes.join(', ')}
- Companies actively hiring: ${jobAnalysis.companiesPosting}

NEWS ANALYSIS:
- Companies mentioned: ${newsAnalysis.companiesMentioned.slice(0, 10).join(', ')}
- Active news sources: ${newsAnalysis.sourcesActive.join(', ')}

CONTENT TO ANALYZE:
${combinedContent}

Generate a comprehensive intelligence report in JSON format matching this structure and tone. Focus on concrete numbers, company names, and actionable intelligence:

{
  "dailySummary": "Daily intelligence briefing: Analyzed ${newsArticlesCount} news articles and ${jobListingsCount} job opportunities from ${activeNewsSourcesCount} monitored sources. Today's focus: ${jobAnalysis.companiesPosting} companies actively hiring, ${newsAnalysis.companiesMentioned.length} companies in the news, with ${laborAlertsCount} labor-related activities requiring attention.",
  "keyInsights": [
    "Use EXACT numbers from metrics above",
    "${newsArticlesCount} construction industry articles analyzed from active monitoring sources",
    "${jobListingsCount} job opportunities identified across ${jobAnalysis.companiesPosting} companies in the NY/NJ region",
    "${jobAnalysis.priorityBreakdown.high} high-priority job opportunities requiring immediate member outreach",
    "${newsAnalysis.relevanceBreakdown.high} high-relevance news articles identified for strategic assessment",
    "Active job locations include: ${jobAnalysis.locations.slice(0, 5).join(', ')}",
    "Companies mentioned in today's news: ${newsAnalysis.companiesMentioned.slice(0, 5).join(', ')}",
    "Labor activity breakdown: ${categoryAnalysis.articles['safety-alerts']} safety issues, ${categoryAnalysis.articles['labor-news']} labor disputes, ${categoryAnalysis.articles['contract-updates']} contract news, ${jobListingsCount} job opportunities",
    "Job market shows activity in: ${jobAnalysis.jobTypes.join(', ')} positions"
  ],
  "highPriorityAlerts": [
    "Based on actual data, create 3-5 priority alerts",
    "Include specific safety issues if ${categoryAnalysis.articles['safety-alerts']} > 0",
    "Mention high-priority jobs if ${jobAnalysis.priorityBreakdown.high} > 0",
    "Reference labor disputes if ${categoryAnalysis.articles['labor-news']} > 0"
  ],
  "trendAnalysis": "Market analysis reveals ${newsArticlesCount} news developments and ${jobListingsCount} job postings today. Construction sector activity shows ${jobAnalysis.companiesPosting} companies actively hiring across ${jobAnalysis.locations.length} locations. Labor activity shows ${laborAlertsCount} items requiring strategic assessment, indicating continued opportunities for member engagement and organizing efforts."
}

CRITICAL: Use the EXACT numbers I provided above. Create professional, actionable intelligence suitable for union leadership decision-making. Return ONLY valid JSON.`
              }
            ],
            max_tokens: 2000,
            temperature: 0.2
          }),
        });

        if (response.ok) {
          const data = await response.json();
          const aiResponseText = data.choices[0]?.message?.content;
          
          if (aiResponseText) {
            try {
              const jsonMatch = aiResponseText.match(/\{[\s\S]*\}/);
              if (jsonMatch) {
                aiInsights = { ...aiInsights, ...JSON.parse(jsonMatch[0]) };
              } else {
                aiInsights = { ...aiInsights, ...JSON.parse(aiResponseText) };
              }
              console.log('Enhanced AI insights generated successfully');
            } catch (parseError) {
              console.error('Error parsing AI response:', parseError);
            }
          }
        } else {
          console.error('OpenAI API error:', response.status);
        }
      } else {
        console.log('No OpenAI API key or no content to analyze, using enhanced fallback insights');
      }
    } catch (error) {
      console.error('Error generating AI insights:', error);
    }

    // Enhanced fallback insights matching the requested format
    if (!aiInsights.dailySummary) {
      aiInsights = {
        dailySummary: `Daily intelligence briefing: Analyzed ${newsArticlesCount} news articles and ${jobListingsCount} job opportunities from ${activeNewsSourcesCount} monitored sources. Today's focus: ${jobAnalysis.companiesPosting} companies actively hiring, ${newsAnalysis.companiesMentioned.length} companies in the news, with ${laborAlertsCount} labor-related activities requiring attention.`,
        keyInsights: [
          `${newsArticlesCount} construction industry articles analyzed from active monitoring sources`,
          `${jobListingsCount} job opportunities identified across ${jobAnalysis.companiesPosting} companies in the NY/NJ region`,
          `${jobAnalysis.priorityBreakdown.high} high-priority job opportunities requiring immediate member outreach`,
          `${newsAnalysis.relevanceBreakdown.high} high-relevance news articles identified for strategic assessment`,
          `Active job locations include: ${jobAnalysis.locations.slice(0, 5).join(', ')}`,
          `Companies mentioned in today's news: ${newsAnalysis.companiesMentioned.slice(0, 5).join(', ')}`,
          `Labor activity breakdown: ${categoryAnalysis.articles['safety-alerts']} safety issues, ${categoryAnalysis.articles['labor-news']} labor disputes, ${categoryAnalysis.articles['contract-updates']} contract news, ${jobListingsCount} job opportunities`,
          `Job market shows activity in: ${jobAnalysis.jobTypes.join(', ')} positions`
        ],
        highPriorityAlerts: [
          ...(categoryAnalysis.articles['safety-alerts'] > 0 ? [`${categoryAnalysis.articles['safety-alerts']} safety alerts detected requiring immediate safety committee review`] : []),
          ...(jobAnalysis.priorityBreakdown.high > 0 ? [`${jobAnalysis.priorityBreakdown.high} high-priority job opportunities require immediate member notification`] : []),
          ...(categoryAnalysis.articles['labor-news'] > 0 ? [`${categoryAnalysis.articles['labor-news']} labor news items need leadership assessment`] : []),
          'Daily intelligence monitoring shows continued market activity requiring strategic response'
        ],
        trendAnalysis: `Market analysis reveals ${newsArticlesCount} news developments and ${jobListingsCount} job postings today. Construction sector activity shows ${jobAnalysis.companiesPosting} companies actively hiring across ${jobAnalysis.locations.length} locations. Labor activity shows ${laborAlertsCount} items requiring strategic assessment, indicating continued opportunities for member engagement and organizing efforts.`,
        jobMarketAnalysis: `Today's job market shows ${jobListingsCount} opportunities across ${jobAnalysis.companiesPosting} companies. Priority breakdown: ${jobAnalysis.priorityBreakdown.high} high, ${jobAnalysis.priorityBreakdown.medium} medium, ${jobAnalysis.priorityBreakdown.low} low priority positions.`,
        companySpotlight: newsAnalysis.companiesMentioned.slice(0, 3).map(company => ({
          name: company,
          activity: `Featured in today's news monitoring`,
          organizingPotential: 'Under assessment',
          priority: 'medium'
        })),
        riskAssessment: [
          ...(categoryAnalysis.articles['safety-alerts'] > 0 ? [`${categoryAnalysis.articles['safety-alerts']} safety incidents requiring immediate attention`] : []),
          'Market competition may impact member job opportunities',
          'Anti-union activities require ongoing surveillance'
        ],
        verifiedHeadlines: articles?.slice(0, 5).map(article => ({
          title: article.title,
          source: article.news_sources?.name || 'Unknown Source',
          url: article.url,
          impact: article.local_825_relevance === 'high' ? 'High impact on Local 825 operations' : 'Moderate relevance'
        })) || [],
        strategicTakeaways: [
          `Construction industry showing ${newsArticlesCount} developments across ${Object.keys(categoryAnalysis.articles).length} categories`,
          `Job market remains active with ${jobListingsCount} opportunities for member placement`,
          `${jobAnalysis.companiesPosting} companies under active surveillance for organizing intelligence`
        ],
        actionItems: {
          next_7_days: [
            'Review high-priority job opportunities for immediate member outreach',
            `Follow up on ${categoryAnalysis.articles['safety-alerts']} safety incidents identified`,
            'Contact companies featured in high-relevance news articles'
          ],
          next_30_days: [
            'Develop outreach strategy for identified job opportunities',
            'Build relationships with contractors featured in news monitoring',
            'Expand intelligence gathering based on activity patterns'
          ],
          next_90_days: [
            'Implement strategic organizing campaigns based on intelligence patterns',
            'Establish comprehensive regional job opportunity database',
            'Create long-term relationships with major construction contractors'
          ]
        }
      };
    }

    console.log('Storing enhanced analytics in database...');

    // Store comprehensive analytics in database
    const { data: analyticsData, error: insertError } = await supabaseClient
      .from('daily_analytics')
      .insert({
        analysis_date: analysisDate,
        analysis_time: analysisTime,
        active_news_sources: activeNewsSourcesCount,
        companies_tracked: newsAnalysis.companiesMentioned.length + jobAnalysis.companiesPosting,
        news_articles_count: newsArticlesCount,
        labor_alerts_count: laborAlertsCount,
        company_news_activity: laborActivityData,
        labor_activity_tracking: laborActivityData,
        daily_summary: aiInsights.dailySummary,
        key_insights: aiInsights.keyInsights,
        high_priority_alerts: aiInsights.highPriorityAlerts,
        trend_analysis: aiInsights.trendAnalysis,
        detailed_analysis: JSON.stringify({
          verified_headlines: aiInsights.verifiedHeadlines,
          strategic_takeaways: aiInsights.strategicTakeaways,
          action_items: aiInsights.actionItems,
          job_market_analysis: aiInsights.jobMarketAnalysis,
          company_spotlight: aiInsights.companySpotlight,
          risk_assessment: aiInsights.riskAssessment,
          job_analysis: jobAnalysis,
          news_analysis: newsAnalysis,
          category_analysis: categoryAnalysis,
          labor_activity_details: laborActivityData
        })
      })
      .select()
      .single();

    if (insertError) {
      console.error('Error inserting analytics:', insertError);
      throw insertError;
    }

    console.log('Enhanced daily analytics generated successfully');

    return new Response(
      JSON.stringify({
        success: true,
        message: 'Enhanced daily analytics generated successfully',
        data: analyticsData,
        summary: {
          articles: newsArticlesCount,
          jobs: jobListingsCount,
          sources: activeNewsSourcesCount,
          insights: aiInsights.keyInsights?.length || 0,
          headlines: aiInsights.verifiedHeadlines?.length || 0,
          companies_analyzed: newsAnalysis.companiesMentioned.length + jobAnalysis.companiesPosting,
          category_breakdown: categoryAnalysis
        }
      }),
      { headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
    );

  } catch (error) {
    console.error('Error generating daily analytics:', error);
    return new Response(
      JSON.stringify({
        success: false,
        error: error.message,
        details: error.toString()
      }),
      { 
        status: 500,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' }
      }
    );
  }
})
</file>

<file path="src/components/AdminPanel.tsx">
import { useState, useEffect } from "react";
import { supabase } from "@/integrations/supabase/client";
import { Button } from "@/components/ui/button";
import { useToast } from "@/hooks/use-toast";
import { useAuth } from "@/contexts/AuthContext";
import { Navigate } from "react-router-dom";
import TaskManagement from "@/components/TaskManagement";
import MaintenanceToggle from "@/components/MaintenanceToggle";
import SystemInfo from "@/components/SystemInfo";
import WebhookManagement from "@/components/WebhookManagement";

interface AdminPanelProps {
  isPasswordAuthenticated?: boolean;
}

export default function AdminPanel({ isPasswordAuthenticated = false }: AdminPanelProps) {
  const { user } = useAuth();
  const [maintenanceMode, setMaintenanceMode] = useState(false);
  const [loading, setLoading] = useState(true);
  const [isAdmin, setIsAdmin] = useState(false);
  const [checkingAdmin, setCheckingAdmin] = useState(!isPasswordAuthenticated);
  const { toast } = useToast();

  const checkUserRole = async (userId: string) => {
    try {
      const { data, error } = await supabase
        .rpc('has_role', { 
          _user_id: userId, 
          _role: 'admin' 
        });
      
      if (error) {
        console.error("Error checking user role:", error);
        return false;
      }
      
      return data === true;
    } catch (error) {
      console.error("Error checking user role:", error);
      return false;
    }
  };

  useEffect(() => {
    const checkAdminStatus = async () => {
      // If password authenticated, skip user role check
      if (isPasswordAuthenticated) {
        setIsAdmin(true);
        setCheckingAdmin(false);
        return;
      }

      if (!user) {
        setCheckingAdmin(false);
        return;
      }

      const adminStatus = await checkUserRole(user.id);
      setIsAdmin(adminStatus);
      setCheckingAdmin(false);
      
      console.log("Admin status check:", { userId: user.id, isAdmin: adminStatus });
      
      if (!adminStatus) {
        toast({
          title: "Access Denied",
          description: "You do not have admin privileges.",
          variant: "destructive",
        });
      }
    };

    checkAdminStatus();
  }, [user, toast, isPasswordAuthenticated]);

  useEffect(() => {
    if ((!isAdmin && !isPasswordAuthenticated) || checkingAdmin) return;

    const fetchMaintenanceMode = async () => {
      try {
        const { data, error } = await supabase
          .from('site_settings')
          .select('setting_value')
          .eq('setting_key', 'maintenance_mode')
          .single();
        
        if (error) {
          console.error("Error fetching maintenance mode:", error);
          toast({
            title: "Error",
            description: "Failed to load maintenance mode status",
            variant: "destructive",
          });
        } else {
          const isMaintenanceActive = data.setting_value === 'true';
          setMaintenanceMode(isMaintenanceActive);
          console.log("AdminPanel loaded maintenance mode:", { 
            setting_value: data.setting_value, 
            isMaintenanceActive 
          });
        }
      } catch (error) {
        console.error("Error fetching maintenance mode:", error);
      } finally {
        setLoading(false);
      }
    };

    fetchMaintenanceMode();
  }, [isAdmin, isPasswordAuthenticated, checkingAdmin, toast]);

  const handleLogout = async () => {
    try {
      if (isPasswordAuthenticated) {
        // Clear password authentication
        localStorage.removeItem("adminAuthenticated");
        window.location.href = "/";
      } else {
        // Sign out user
        await supabase.auth.signOut();
        window.location.href = "/";
      }
    } catch (error) {
      console.error("Error signing out:", error);
    }
  };

  // Redirect if not admin and not password authenticated
  if (!checkingAdmin && !isAdmin && !isPasswordAuthenticated) {
    return <Navigate to="/feed" replace />;
  }

  if (checkingAdmin || loading) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-primary"></div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-background p-4">
      <div className="max-w-4xl mx-auto">
        <div className="flex justify-between items-center mb-8">
          <div>
            <h1 className="text-3xl font-bold">DataPilot+ - Admin Panel</h1>
            {isPasswordAuthenticated && (
              <p className="text-sm text-muted-foreground mt-1">
                Authenticated with admin password
              </p>
            )}
          </div>
          <Button variant="outline" onClick={handleLogout}>
            Logout
          </Button>
        </div>

        <div className="grid gap-6">
          <MaintenanceToggle 
            maintenanceMode={maintenanceMode}
            setMaintenanceMode={setMaintenanceMode}
            isAdmin={isAdmin || isPasswordAuthenticated}
          />

          <TaskManagement />

          <WebhookManagement />

          <SystemInfo maintenanceMode={maintenanceMode} />
        </div>
      </div>
    </div>
  );
}
</file>

<file path="src/integrations/supabase/types.ts">
export type Json =
  | string
  | number
  | boolean
  | null
  | { [key: string]: Json | undefined }
  | Json[]

export type Database = {
  // Allows to automatically instanciate createClient with right options
  // instead of createClient<Database, { PostgrestVersion: 'XX' }>(URL, KEY)
  __InternalSupabase: {
    PostgrestVersion: "12.2.3 (519615d)"
  }
  public: {
    Tables: {
      company_requests: {
        Row: {
          company_address: string | null
          company_name: string
          created_at: string
          id: string
          reason: string | null
          reviewed_at: string | null
          reviewed_by: string | null
          status: string
          updated_at: string
          user_id: string
        }
        Insert: {
          company_address?: string | null
          company_name: string
          created_at?: string
          id?: string
          reason?: string | null
          reviewed_at?: string | null
          reviewed_by?: string | null
          status?: string
          updated_at?: string
          user_id: string
        }
        Update: {
          company_address?: string | null
          company_name?: string
          created_at?: string
          id?: string
          reason?: string | null
          reviewed_at?: string | null
          reviewed_by?: string | null
          status?: string
          updated_at?: string
          user_id?: string
        }
        Relationships: []
      }
      company_research: {
        Row: {
          company_name: string
          created_at: string | null
          created_by: string | null
          enriched_data: string | null
          id: string
          is_active: boolean | null
          research_content: string
          updated_at: string | null
          user_id: string | null
        }
        Insert: {
          company_name: string
          created_at?: string | null
          created_by?: string | null
          enriched_data?: string | null
          id?: string
          is_active?: boolean | null
          research_content: string
          updated_at?: string | null
          user_id?: string | null
        }
        Update: {
          company_name?: string
          created_at?: string | null
          created_by?: string | null
          enriched_data?: string | null
          id?: string
          is_active?: boolean | null
          research_content?: string
          updated_at?: string | null
          user_id?: string | null
        }
        Relationships: []
      }
      daily_analytics: {
        Row: {
          active_news_sources: number
          ai_analysis_version: string | null
          analysis_date: string
          analysis_time: string
          companies_tracked: number
          company_news_activity: Json | null
          created_at: string
          daily_summary: string | null
          detailed_analysis: string | null
          executive_summary: string | null
          high_priority_alerts: string[] | null
          id: string
          key_headlines: Json | null
          key_insights: string[] | null
          labor_activity_tracking: Json | null
          labor_alerts_count: number
          labor_updates: Json | null
          news_articles_count: number
          risk_assessment: Json | null
          trend_analysis: string | null
        }
        Insert: {
          active_news_sources?: number
          ai_analysis_version?: string | null
          analysis_date: string
          analysis_time: string
          companies_tracked?: number
          company_news_activity?: Json | null
          created_at?: string
          daily_summary?: string | null
          detailed_analysis?: string | null
          executive_summary?: string | null
          high_priority_alerts?: string[] | null
          id?: string
          key_headlines?: Json | null
          key_insights?: string[] | null
          labor_activity_tracking?: Json | null
          labor_alerts_count?: number
          labor_updates?: Json | null
          news_articles_count?: number
          risk_assessment?: Json | null
          trend_analysis?: string | null
        }
        Update: {
          active_news_sources?: number
          ai_analysis_version?: string | null
          analysis_date?: string
          analysis_time?: string
          companies_tracked?: number
          company_news_activity?: Json | null
          created_at?: string
          daily_summary?: string | null
          detailed_analysis?: string | null
          executive_summary?: string | null
          high_priority_alerts?: string[] | null
          id?: string
          key_headlines?: Json | null
          key_insights?: string[] | null
          labor_activity_tracking?: Json | null
          labor_alerts_count?: number
          labor_updates?: Json | null
          news_articles_count?: number
          risk_assessment?: Json | null
          trend_analysis?: string | null
        }
        Relationships: []
      }
      job_listings: {
        Row: {
          ai_analysis: string | null
          company: string | null
          content: string | null
          content_type: string | null
          created_at: string
          enhanced_at: string | null
          formatted_description: string | null
          id: string
          insights: string | null
          is_active: boolean | null
          is_processed: boolean | null
          job_type: string | null
          last_sync_at: string | null
          last_sync_error: string | null
          local_825_relevance: string | null
          location: string | null
          pay_range: string | null
          priority: string | null
          processed_at: string | null
          raw_content: string | null
          scraped_at: string
          source_type: string | null
          sync_status: string | null
          title: string
          updated_at: string
          url: string
          wordpress_category: string | null
        }
        Insert: {
          ai_analysis?: string | null
          company?: string | null
          content?: string | null
          content_type?: string | null
          created_at?: string
          enhanced_at?: string | null
          formatted_description?: string | null
          id?: string
          insights?: string | null
          is_active?: boolean | null
          is_processed?: boolean | null
          job_type?: string | null
          last_sync_at?: string | null
          last_sync_error?: string | null
          local_825_relevance?: string | null
          location?: string | null
          pay_range?: string | null
          priority?: string | null
          processed_at?: string | null
          raw_content?: string | null
          scraped_at?: string
          source_type?: string | null
          sync_status?: string | null
          title: string
          updated_at?: string
          url: string
          wordpress_category?: string | null
        }
        Update: {
          ai_analysis?: string | null
          company?: string | null
          content?: string | null
          content_type?: string | null
          created_at?: string
          enhanced_at?: string | null
          formatted_description?: string | null
          id?: string
          insights?: string | null
          is_active?: boolean | null
          is_processed?: boolean | null
          job_type?: string | null
          last_sync_at?: string | null
          last_sync_error?: string | null
          local_825_relevance?: string | null
          location?: string | null
          pay_range?: string | null
          priority?: string | null
          processed_at?: string | null
          raw_content?: string | null
          scraped_at?: string
          source_type?: string | null
          sync_status?: string | null
          title?: string
          updated_at?: string
          url?: string
          wordpress_category?: string | null
        }
        Relationships: []
      }
      main_companies: {
        Row: {
          address1: string | null
          address2: string | null
          agreement_active: boolean | null
          agreement_category: string | null
          ai_insight: string | null
          appendices: string[] | null
          author: Json | null
          begin_date: string | null
          bulldozer_mode: boolean | null
          citations: Json | null
          city: string | null
          company_name: string | null
          company_profile: Json | null
          completed_at: string | null
          contract_type: string | null
          costs: Json | null
          created_at: string
          days_until_expiry: number | null
          description: string | null
          end_date: string | null
          engagement_stage: string | null
          executive_summary: string | null
          firstname: string | null
          follow_up_needed: boolean | null
          id: string
          industry: string | null
          is_active: boolean | null
          is_confidential: boolean | null
          job_id: string | null
          last_modified: string | null
          last_outreach_date: string | null
          lastname: string | null
          low_priority_reason: string | null
          name: string
          news_updates: string | null
          nlrb_cases: Json | null
          notes: string | null
          organizing_leverage: Json | null
          osha_violations: Json | null
          phone1: string | null
          prepared_for: string | null
          priority: number | null
          priority_level: string | null
          profile_data: Json | null
          recommendations: Json | null
          report_date: string | null
          state: string | null
          status: string | null
          updated_at: string
          zip: string | null
        }
        Insert: {
          address1?: string | null
          address2?: string | null
          agreement_active?: boolean | null
          agreement_category?: string | null
          ai_insight?: string | null
          appendices?: string[] | null
          author?: Json | null
          begin_date?: string | null
          bulldozer_mode?: boolean | null
          citations?: Json | null
          city?: string | null
          company_name?: string | null
          company_profile?: Json | null
          completed_at?: string | null
          contract_type?: string | null
          costs?: Json | null
          created_at?: string
          days_until_expiry?: number | null
          description?: string | null
          end_date?: string | null
          engagement_stage?: string | null
          executive_summary?: string | null
          firstname?: string | null
          follow_up_needed?: boolean | null
          id?: string
          industry?: string | null
          is_active?: boolean | null
          is_confidential?: boolean | null
          job_id?: string | null
          last_modified?: string | null
          last_outreach_date?: string | null
          lastname?: string | null
          low_priority_reason?: string | null
          name: string
          news_updates?: string | null
          nlrb_cases?: Json | null
          notes?: string | null
          organizing_leverage?: Json | null
          osha_violations?: Json | null
          phone1?: string | null
          prepared_for?: string | null
          priority?: number | null
          priority_level?: string | null
          profile_data?: Json | null
          recommendations?: Json | null
          report_date?: string | null
          state?: string | null
          status?: string | null
          updated_at?: string
          zip?: string | null
        }
        Update: {
          address1?: string | null
          address2?: string | null
          agreement_active?: boolean | null
          agreement_category?: string | null
          ai_insight?: string | null
          appendices?: string[] | null
          author?: Json | null
          begin_date?: string | null
          bulldozer_mode?: boolean | null
          citations?: Json | null
          city?: string | null
          company_name?: string | null
          company_profile?: Json | null
          completed_at?: string | null
          contract_type?: string | null
          costs?: Json | null
          created_at?: string
          days_until_expiry?: number | null
          description?: string | null
          end_date?: string | null
          engagement_stage?: string | null
          executive_summary?: string | null
          firstname?: string | null
          follow_up_needed?: boolean | null
          id?: string
          industry?: string | null
          is_active?: boolean | null
          is_confidential?: boolean | null
          job_id?: string | null
          last_modified?: string | null
          last_outreach_date?: string | null
          lastname?: string | null
          low_priority_reason?: string | null
          name?: string
          news_updates?: string | null
          nlrb_cases?: Json | null
          notes?: string | null
          organizing_leverage?: Json | null
          osha_violations?: Json | null
          phone1?: string | null
          prepared_for?: string | null
          priority?: number | null
          priority_level?: string | null
          profile_data?: Json | null
          recommendations?: Json | null
          report_date?: string | null
          state?: string | null
          status?: string | null
          updated_at?: string
          zip?: string | null
        }
        Relationships: []
      }
      maintenance_tasks: {
        Row: {
          created_at: string
          created_by: string | null
          description: string | null
          display_order: number
          estimated_minutes: number | null
          icon_name: string | null
          id: string
          name: string
          status: string
          updated_at: string
          updated_by: string | null
        }
        Insert: {
          created_at?: string
          created_by?: string | null
          description?: string | null
          display_order?: number
          estimated_minutes?: number | null
          icon_name?: string | null
          id?: string
          name: string
          status?: string
          updated_at?: string
          updated_by?: string | null
        }
        Update: {
          created_at?: string
          created_by?: string | null
          description?: string | null
          display_order?: number
          estimated_minutes?: number | null
          icon_name?: string | null
          id?: string
          name?: string
          status?: string
          updated_at?: string
          updated_by?: string | null
        }
        Relationships: []
      }
      news_articles: {
        Row: {
          analyzed_at: string | null
          company_mentioned: string | null
          content: string | null
          content_type: string | null
          created_at: string
          description: string | null
          excerpt: string | null
          full_analysis: string | null
          id: string
          is_analyzed: boolean | null
          local_825_relevance: string | null
          priority_level: string | null
          published_at: string | null
          source_id: string | null
          title: string
          url: string
          wordpress_category: string | null
        }
        Insert: {
          analyzed_at?: string | null
          company_mentioned?: string | null
          content?: string | null
          content_type?: string | null
          created_at?: string
          description?: string | null
          excerpt?: string | null
          full_analysis?: string | null
          id?: string
          is_analyzed?: boolean | null
          local_825_relevance?: string | null
          priority_level?: string | null
          published_at?: string | null
          source_id?: string | null
          title: string
          url: string
          wordpress_category?: string | null
        }
        Update: {
          analyzed_at?: string | null
          company_mentioned?: string | null
          content?: string | null
          content_type?: string | null
          created_at?: string
          description?: string | null
          excerpt?: string | null
          full_analysis?: string | null
          id?: string
          is_analyzed?: boolean | null
          local_825_relevance?: string | null
          priority_level?: string | null
          published_at?: string | null
          source_id?: string | null
          title?: string
          url?: string
          wordpress_category?: string | null
        }
        Relationships: [
          {
            foreignKeyName: "news_articles_source_id_fkey"
            columns: ["source_id"]
            isOneToOne: false
            referencedRelation: "news_sources"
            referencedColumns: ["id"]
          },
        ]
      }
      news_sources: {
        Row: {
          company_names: string[] | null
          created_at: string
          description: string | null
          id: string
          is_active: boolean
          last_successful_sync_at: string | null
          last_sync_at: string | null
          last_sync_error: string | null
          name: string
          rss_url: string
          sync_attempt_count: number | null
          sync_status: string | null
          updated_at: string
        }
        Insert: {
          company_names?: string[] | null
          created_at?: string
          description?: string | null
          id?: string
          is_active?: boolean
          last_successful_sync_at?: string | null
          last_sync_at?: string | null
          last_sync_error?: string | null
          name: string
          rss_url: string
          sync_attempt_count?: number | null
          sync_status?: string | null
          updated_at?: string
        }
        Update: {
          company_names?: string[] | null
          created_at?: string
          description?: string | null
          id?: string
          is_active?: boolean
          last_successful_sync_at?: string | null
          last_sync_at?: string | null
          last_sync_error?: string | null
          name?: string
          rss_url?: string
          sync_attempt_count?: number | null
          sync_status?: string | null
          updated_at?: string
        }
        Relationships: []
      }
      profile_analysis: {
        Row: {
          analysis_text: string
          created_at: string
          feedback: string | null
          id: string
          is_approved: boolean | null
          profile_id: string
          updated_at: string
        }
        Insert: {
          analysis_text: string
          created_at?: string
          feedback?: string | null
          id?: string
          is_approved?: boolean | null
          profile_id: string
          updated_at?: string
        }
        Update: {
          analysis_text?: string
          created_at?: string
          feedback?: string | null
          id?: string
          is_approved?: boolean | null
          profile_id?: string
          updated_at?: string
        }
        Relationships: [
          {
            foreignKeyName: "profile_analysis_profile_id_fkey"
            columns: ["profile_id"]
            isOneToOne: false
            referencedRelation: "profiles"
            referencedColumns: ["id"]
          },
        ]
      }
      profiles: {
        Row: {
          avatar_url: string | null
          created_at: string | null
          goals: Json | null
          id: string
          industry: string | null
          insight_preferences: Json | null
          onboarding_completed: boolean | null
          organization_size: string | null
          priority: string | null
          role: string | null
          updated_at: string | null
          username: string | null
          view_preferences: Json | null
        }
        Insert: {
          avatar_url?: string | null
          created_at?: string | null
          goals?: Json | null
          id: string
          industry?: string | null
          insight_preferences?: Json | null
          onboarding_completed?: boolean | null
          organization_size?: string | null
          priority?: string | null
          role?: string | null
          updated_at?: string | null
          username?: string | null
          view_preferences?: Json | null
        }
        Update: {
          avatar_url?: string | null
          created_at?: string | null
          goals?: Json | null
          id?: string
          industry?: string | null
          insight_preferences?: Json | null
          onboarding_completed?: boolean | null
          organization_size?: string | null
          priority?: string | null
          role?: string | null
          updated_at?: string | null
          username?: string | null
          view_preferences?: Json | null
        }
        Relationships: []
      }
      site_settings: {
        Row: {
          created_at: string
          id: string
          setting_key: string
          setting_value: string
          updated_at: string
          updated_by: string | null
        }
        Insert: {
          created_at?: string
          id?: string
          setting_key: string
          setting_value: string
          updated_at?: string
          updated_by?: string | null
        }
        Update: {
          created_at?: string
          id?: string
          setting_key?: string
          setting_value?: string
          updated_at?: string
          updated_by?: string | null
        }
        Relationships: []
      }
      stripe_customers: {
        Row: {
          created_at: string | null
          customer_id: string
          deleted_at: string | null
          id: number
          updated_at: string | null
          user_id: string
        }
        Insert: {
          created_at?: string | null
          customer_id: string
          deleted_at?: string | null
          id?: never
          updated_at?: string | null
          user_id: string
        }
        Update: {
          created_at?: string | null
          customer_id?: string
          deleted_at?: string | null
          id?: never
          updated_at?: string | null
          user_id?: string
        }
        Relationships: []
      }
      stripe_orders: {
        Row: {
          amount_subtotal: number
          amount_total: number
          checkout_session_id: string
          created_at: string | null
          currency: string
          customer_id: string
          deleted_at: string | null
          id: number
          payment_intent_id: string
          payment_status: string
          status: Database["public"]["Enums"]["stripe_order_status"]
          updated_at: string | null
        }
        Insert: {
          amount_subtotal: number
          amount_total: number
          checkout_session_id: string
          created_at?: string | null
          currency: string
          customer_id: string
          deleted_at?: string | null
          id?: never
          payment_intent_id: string
          payment_status: string
          status?: Database["public"]["Enums"]["stripe_order_status"]
          updated_at?: string | null
        }
        Update: {
          amount_subtotal?: number
          amount_total?: number
          checkout_session_id?: string
          created_at?: string | null
          currency?: string
          customer_id?: string
          deleted_at?: string | null
          id?: never
          payment_intent_id?: string
          payment_status?: string
          status?: Database["public"]["Enums"]["stripe_order_status"]
          updated_at?: string | null
        }
        Relationships: []
      }
      stripe_subscriptions: {
        Row: {
          cancel_at_period_end: boolean | null
          created_at: string | null
          current_period_end: number | null
          current_period_start: number | null
          customer_id: string
          deleted_at: string | null
          id: number
          payment_method_brand: string | null
          payment_method_last4: string | null
          price_id: string | null
          status: Database["public"]["Enums"]["stripe_subscription_status"]
          subscription_id: string | null
          updated_at: string | null
        }
        Insert: {
          cancel_at_period_end?: boolean | null
          created_at?: string | null
          current_period_end?: number | null
          current_period_start?: number | null
          customer_id: string
          deleted_at?: string | null
          id?: never
          payment_method_brand?: string | null
          payment_method_last4?: string | null
          price_id?: string | null
          status: Database["public"]["Enums"]["stripe_subscription_status"]
          subscription_id?: string | null
          updated_at?: string | null
        }
        Update: {
          cancel_at_period_end?: boolean | null
          created_at?: string | null
          current_period_end?: number | null
          current_period_start?: number | null
          customer_id?: string
          deleted_at?: string | null
          id?: never
          payment_method_brand?: string | null
          payment_method_last4?: string | null
          price_id?: string | null
          status?: Database["public"]["Enums"]["stripe_subscription_status"]
          subscription_id?: string | null
          updated_at?: string | null
        }
        Relationships: []
      }
      team_invites: {
        Row: {
          accepted_at: string | null
          created_at: string
          email: string
          expires_at: string
          id: string
          inviter_id: string
          status: string
          team_id: string | null
        }
        Insert: {
          accepted_at?: string | null
          created_at?: string
          email: string
          expires_at?: string
          id?: string
          inviter_id: string
          status?: string
          team_id?: string | null
        }
        Update: {
          accepted_at?: string | null
          created_at?: string
          email?: string
          expires_at?: string
          id?: string
          inviter_id?: string
          status?: string
          team_id?: string | null
        }
        Relationships: [
          {
            foreignKeyName: "team_invites_inviter_id_fkey"
            columns: ["inviter_id"]
            isOneToOne: false
            referencedRelation: "profiles"
            referencedColumns: ["id"]
          },
        ]
      }
      tracked_companies: {
        Row: {
          address: string | null
          created_at: string
          id: string
          main_company_id: string | null
          name: string
          priority: string
          updated_at: string
          user_id: string
        }
        Insert: {
          address?: string | null
          created_at?: string
          id?: string
          main_company_id?: string | null
          name: string
          priority: string
          updated_at?: string
          user_id: string
        }
        Update: {
          address?: string | null
          created_at?: string
          id?: string
          main_company_id?: string | null
          name?: string
          priority?: string
          updated_at?: string
          user_id?: string
        }
        Relationships: [
          {
            foreignKeyName: "tracked_companies_main_company_id_fkey"
            columns: ["main_company_id"]
            isOneToOne: false
            referencedRelation: "main_companies"
            referencedColumns: ["id"]
          },
        ]
      }
      user_roles: {
        Row: {
          created_at: string
          id: string
          role: Database["public"]["Enums"]["app_role"]
          updated_at: string
          user_id: string
        }
        Insert: {
          created_at?: string
          id?: string
          role?: Database["public"]["Enums"]["app_role"]
          updated_at?: string
          user_id: string
        }
        Update: {
          created_at?: string
          id?: string
          role?: Database["public"]["Enums"]["app_role"]
          updated_at?: string
          user_id?: string
        }
        Relationships: []
      }
      webhook_logs: {
        Row: {
          error_message: string | null
          id: string
          payload: Json | null
          response_body: string | null
          response_status: number | null
          sent_at: string
          trigger_event: string
          webhook_setting_id: string | null
        }
        Insert: {
          error_message?: string | null
          id?: string
          payload?: Json | null
          response_body?: string | null
          response_status?: number | null
          sent_at?: string
          trigger_event: string
          webhook_setting_id?: string | null
        }
        Update: {
          error_message?: string | null
          id?: string
          payload?: Json | null
          response_body?: string | null
          response_status?: number | null
          sent_at?: string
          trigger_event?: string
          webhook_setting_id?: string | null
        }
        Relationships: [
          {
            foreignKeyName: "webhook_logs_webhook_setting_id_fkey"
            columns: ["webhook_setting_id"]
            isOneToOne: false
            referencedRelation: "webhook_settings"
            referencedColumns: ["id"]
          },
        ]
      }
      webhook_settings: {
        Row: {
          created_at: string
          created_by: string | null
          description: string | null
          id: string
          is_active: boolean
          setting_name: string
          updated_at: string
          updated_by: string | null
          webhook_url: string
        }
        Insert: {
          created_at?: string
          created_by?: string | null
          description?: string | null
          id?: string
          is_active?: boolean
          setting_name: string
          updated_at?: string
          updated_by?: string | null
          webhook_url: string
        }
        Update: {
          created_at?: string
          created_by?: string | null
          description?: string | null
          id?: string
          is_active?: boolean
          setting_name?: string
          updated_at?: string
          updated_by?: string | null
          webhook_url?: string
        }
        Relationships: []
      }
    }
    Views: {
      stripe_user_orders: {
        Row: {
          amount_subtotal: number | null
          amount_total: number | null
          checkout_session_id: string | null
          currency: string | null
          customer_id: string | null
          order_date: string | null
          order_id: number | null
          order_status:
            | Database["public"]["Enums"]["stripe_order_status"]
            | null
          payment_intent_id: string | null
          payment_status: string | null
        }
        Relationships: []
      }
      stripe_user_subscriptions: {
        Row: {
          cancel_at_period_end: boolean | null
          current_period_end: number | null
          current_period_start: number | null
          customer_id: string | null
          payment_method_brand: string | null
          payment_method_last4: string | null
          price_id: string | null
          subscription_id: string | null
          subscription_status:
            | Database["public"]["Enums"]["stripe_subscription_status"]
            | null
        }
        Relationships: []
      }
    }
    Functions: {
      get_company_related_content: {
        Args: { company_name_param: string }
        Returns: {
          articles_count: number
          jobs_count: number
          recent_articles: Json
          recent_jobs: Json
        }[]
      }
      get_maintenance_progress: {
        Args: Record<PropertyKey, never>
        Returns: {
          total_tasks: number
          completed_tasks: number
          processing_tasks: number
          completion_percentage: number
          estimated_minutes_remaining: number
        }[]
      }
      has_role: {
        Args: {
          _user_id: string
          _role: Database["public"]["Enums"]["app_role"]
        }
        Returns: boolean
      }
      trigger_webhook_notification: {
        Args: { event_type: string; event_data: Json }
        Returns: undefined
      }
      update_site_setting: {
        Args: { key: string; value: string }
        Returns: undefined
      }
    }
    Enums: {
      app_role: "admin" | "moderator" | "user"
      stripe_order_status: "pending" | "completed" | "canceled"
      stripe_subscription_status:
        | "not_started"
        | "incomplete"
        | "incomplete_expired"
        | "trialing"
        | "active"
        | "past_due"
        | "canceled"
        | "unpaid"
        | "paused"
    }
    CompositeTypes: {
      [_ in never]: never
    }
  }
}

type DatabaseWithoutInternals = Omit<Database, "__InternalSupabase">

type DefaultSchema = DatabaseWithoutInternals[Extract<keyof Database, "public">]

export type Tables<
  DefaultSchemaTableNameOrOptions extends
    | keyof (DefaultSchema["Tables"] & DefaultSchema["Views"])
    | { schema: keyof DatabaseWithoutInternals },
  TableName extends DefaultSchemaTableNameOrOptions extends {
    schema: keyof DatabaseWithoutInternals
  }
    ? keyof (DatabaseWithoutInternals[DefaultSchemaTableNameOrOptions["schema"]]["Tables"] &
        DatabaseWithoutInternals[DefaultSchemaTableNameOrOptions["schema"]]["Views"])
    : never = never,
> = DefaultSchemaTableNameOrOptions extends {
  schema: keyof DatabaseWithoutInternals
}
  ? (DatabaseWithoutInternals[DefaultSchemaTableNameOrOptions["schema"]]["Tables"] &
      DatabaseWithoutInternals[DefaultSchemaTableNameOrOptions["schema"]]["Views"])[TableName] extends {
      Row: infer R
    }
    ? R
    : never
  : DefaultSchemaTableNameOrOptions extends keyof (DefaultSchema["Tables"] &
        DefaultSchema["Views"])
    ? (DefaultSchema["Tables"] &
        DefaultSchema["Views"])[DefaultSchemaTableNameOrOptions] extends {
        Row: infer R
      }
      ? R
      : never
    : never

export type TablesInsert<
  DefaultSchemaTableNameOrOptions extends
    | keyof DefaultSchema["Tables"]
    | { schema: keyof DatabaseWithoutInternals },
  TableName extends DefaultSchemaTableNameOrOptions extends {
    schema: keyof DatabaseWithoutInternals
  }
    ? keyof DatabaseWithoutInternals[DefaultSchemaTableNameOrOptions["schema"]]["Tables"]
    : never = never,
> = DefaultSchemaTableNameOrOptions extends {
  schema: keyof DatabaseWithoutInternals
}
  ? DatabaseWithoutInternals[DefaultSchemaTableNameOrOptions["schema"]]["Tables"][TableName] extends {
      Insert: infer I
    }
    ? I
    : never
  : DefaultSchemaTableNameOrOptions extends keyof DefaultSchema["Tables"]
    ? DefaultSchema["Tables"][DefaultSchemaTableNameOrOptions] extends {
        Insert: infer I
      }
      ? I
      : never
    : never

export type TablesUpdate<
  DefaultSchemaTableNameOrOptions extends
    | keyof DefaultSchema["Tables"]
    | { schema: keyof DatabaseWithoutInternals },
  TableName extends DefaultSchemaTableNameOrOptions extends {
    schema: keyof DatabaseWithoutInternals
  }
    ? keyof DatabaseWithoutInternals[DefaultSchemaTableNameOrOptions["schema"]]["Tables"]
    : never = never,
> = DefaultSchemaTableNameOrOptions extends {
  schema: keyof DatabaseWithoutInternals
}
  ? DatabaseWithoutInternals[DefaultSchemaTableNameOrOptions["schema"]]["Tables"][TableName] extends {
      Update: infer U
    }
    ? U
    : never
  : DefaultSchemaTableNameOrOptions extends keyof DefaultSchema["Tables"]
    ? DefaultSchema["Tables"][DefaultSchemaTableNameOrOptions] extends {
        Update: infer U
      }
      ? U
      : never
    : never

export type Enums<
  DefaultSchemaEnumNameOrOptions extends
    | keyof DefaultSchema["Enums"]
    | { schema: keyof DatabaseWithoutInternals },
  EnumName extends DefaultSchemaEnumNameOrOptions extends {
    schema: keyof DatabaseWithoutInternals
  }
    ? keyof DatabaseWithoutInternals[DefaultSchemaEnumNameOrOptions["schema"]]["Enums"]
    : never = never,
> = DefaultSchemaEnumNameOrOptions extends {
  schema: keyof DatabaseWithoutInternals
}
  ? DatabaseWithoutInternals[DefaultSchemaEnumNameOrOptions["schema"]]["Enums"][EnumName]
  : DefaultSchemaEnumNameOrOptions extends keyof DefaultSchema["Enums"]
    ? DefaultSchema["Enums"][DefaultSchemaEnumNameOrOptions]
    : never

export type CompositeTypes<
  PublicCompositeTypeNameOrOptions extends
    | keyof DefaultSchema["CompositeTypes"]
    | { schema: keyof DatabaseWithoutInternals },
  CompositeTypeName extends PublicCompositeTypeNameOrOptions extends {
    schema: keyof DatabaseWithoutInternals
  }
    ? keyof DatabaseWithoutInternals[PublicCompositeTypeNameOrOptions["schema"]]["CompositeTypes"]
    : never = never,
> = PublicCompositeTypeNameOrOptions extends {
  schema: keyof DatabaseWithoutInternals
}
  ? DatabaseWithoutInternals[PublicCompositeTypeNameOrOptions["schema"]]["CompositeTypes"][CompositeTypeName]
  : PublicCompositeTypeNameOrOptions extends keyof DefaultSchema["CompositeTypes"]
    ? DefaultSchema["CompositeTypes"][PublicCompositeTypeNameOrOptions]
    : never

export const Constants = {
  public: {
    Enums: {
      app_role: ["admin", "moderator", "user"],
      stripe_order_status: ["pending", "completed", "canceled"],
      stripe_subscription_status: [
        "not_started",
        "incomplete",
        "incomplete_expired",
        "trialing",
        "active",
        "past_due",
        "canceled",
        "unpaid",
        "paused",
      ],
    },
  },
} as const
</file>

<file path="src/pages/Dashboard.tsx">
import { useState, useEffect } from "react";
import { Navigate, useNavigate } from "react-router-dom";
import { useAuth } from "@/contexts/AuthContext";
import NavBar from "@/components/NavBar";
import { Card, CardHeader, CardTitle, CardDescription, CardContent, CardFooter } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Building2, Newspaper, TrendingUp, Rss, RefreshCw, Briefcase } from "lucide-react";
import { motion } from "framer-motion";
import { DataPointChart } from "@/components/DataPointChart";
import { useDailyAnalytics } from "@/hooks/useDailyAnalytics";
import { supabase } from "@/integrations/supabase/client";
import { toast } from "@/hooks/use-toast";
import AnalyticsOverview from "@/components/analytics/AnalyticsOverview";

export default function Dashboard() {
  const { user, profile, loading } = useAuth();
  const navigate = useNavigate();

  // If not logged in or onboarding not completed, redirect
  if (!loading && (!user || (profile && !profile.onboarding_completed))) {
    return <Navigate to={user ? "/onboarding" : "/auth"} replace />;
  }

  // Show loading state while authentication status is being determined
  if (loading) {
    return (
      <div className="flex items-center justify-center min-h-screen dark:bg-[#0A0F18]">
        <div className="text-center">
          <div className="w-16 h-16 border-4 border-primary border-t-transparent rounded-full animate-spin mx-auto"></div>
          <p className="mt-4 text-muted-foreground">Loading dashboard...</p>
        </div>
      </div>
    );
  }

  return (
    <div className="relative min-h-screen flex flex-col bg-gradient-to-br from-background to-secondary/20">
      <NavBar />
      
      <main className="flex-1 container max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {/* Header Section */}
        <motion.div 
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.5 }}
          className="mb-8"
        >
          <div className="flex flex-col items-start space-y-2 text-left">
            <h1 className="text-4xl font-bold tracking-tight bg-gradient-to-r from-primary to-primary/70 bg-clip-text text-transparent">
              Welcome back, {profile?.username || user?.email?.split("@")[0]}
            </h1>
            <p className="text-xl text-muted-foreground max-w-2xl">
              Your intelligence dashboard for construction industry monitoring and labor insights
            </p>
          </div>
          {/* Quick Stats Bar */}
          <motion.div 
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.5, delay: 0.1 }}
            className="mt-6 flex flex-wrap gap-4"
          >
            <div className="flex items-center gap-2 px-4 py-2 bg-card border rounded-lg shadow-sm">
              <div className="h-2 w-2 bg-green-500 rounded-full animate-pulse"></div>
              <span className="text-sm font-medium">System Online</span>
            </div>
            <div className="flex items-center gap-2 px-4 py-2 bg-card border rounded-lg shadow-sm">
              <Rss className="h-4 w-4 text-primary" />
              <span className="text-sm font-medium">Feeds Active</span>
            </div>
            <div className="flex items-center gap-2 px-4 py-2 bg-card border rounded-lg shadow-sm">
              <TrendingUp className="h-4 w-4 text-emerald-500" />
              <span className="text-sm font-medium">Analytics Updated</span>
            </div>
          </motion.div>
        </motion.div>

        {/* Main Analytics Section */}
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.5, delay: 0.2 }}
          className="space-y-6"
        >
          <AnalyticsOverview />
        </motion.div>

        {/* Quick Actions Section */}
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.5, delay: 0.3 }}
          className="mt-8"
        >
          <h2 className="text-2xl font-semibold mb-6">Quick Actions</h2>
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
            <Card className="group hover:shadow-lg transition-all duration-300 hover:scale-[1.02] border-2 hover:border-primary/20">
              <CardContent className="p-6">
                <Button 
                  variant="ghost" 
                  size="lg" 
                  onClick={() => navigate("/feed")}
                  className="w-full h-auto flex flex-col gap-3 hover:bg-transparent"
                >
                  <div className="p-3 bg-primary/10 rounded-lg group-hover:bg-primary/20 transition-colors">
                    <Newspaper className="h-8 w-8 text-primary" />
                  </div>
                  <div className="text-center">
                    <h3 className="font-semibold">View Intel</h3>
                    <p className="text-sm text-muted-foreground">Latest news & updates</p>
                  </div>
                </Button>
              </CardContent>
            </Card>

            <Card className="group hover:shadow-lg transition-all duration-300 hover:scale-[1.02] border-2 hover:border-primary/20">
              <CardContent className="p-6">
                <Button 
                  variant="ghost" 
                  size="lg" 
                  onClick={() => navigate("/companies")}
                  className="w-full h-auto flex flex-col gap-3 hover:bg-transparent"
                >
                  <div className="p-3 bg-blue-500/10 rounded-lg group-hover:bg-blue-500/20 transition-colors">
                    <Building2 className="h-8 w-8 text-blue-500" />
                  </div>
                  <div className="text-center">
                    <h3 className="font-semibold">Companies</h3>
                    <p className="text-sm text-muted-foreground">Track employers</p>
                  </div>
                </Button>
              </CardContent>
            </Card>

            <Card className="group hover:shadow-lg transition-all duration-300 hover:scale-[1.02] border-2 hover:border-primary/20">
              <CardContent className="p-6">
                <Button 
                  variant="ghost" 
                  size="lg" 
                  onClick={() => navigate("/reports")}
                  className="w-full h-auto flex flex-col gap-3 hover:bg-transparent"
                >
                  <div className="p-3 bg-emerald-500/10 rounded-lg group-hover:bg-emerald-500/20 transition-colors">
                    <TrendingUp className="h-8 w-8 text-emerald-500" />
                  </div>
                  <div className="text-center">
                    <h3 className="font-semibold">Reports</h3>
                    <p className="text-sm text-muted-foreground">Generate insights</p>
                  </div>
                </Button>
              </CardContent>
            </Card>

            <Card className="group hover:shadow-lg transition-all duration-300 hover:scale-[1.02] border-2 hover:border-primary/20">
              <CardContent className="p-6">
                <Button 
                  variant="ghost" 
                  size="lg" 
                  onClick={() => navigate("825chat.datapilotplus.com")}
                  className="w-full h-auto flex flex-col gap-3 hover:bg-transparent"
                >
                  <div className="p-3 bg-purple-500/10 rounded-lg group-hover:bg-purple-500/20 transition-colors">
                    <Briefcase className="h-8 w-8 text-purple-500" />
                  </div>
                  <div className="text-center">
                    <h3 className="font-semibold">Assistant</h3>
                    <p className="text-sm text-muted-foreground">AI insights</p>
                  </div>
                </Button>
              </CardContent>
            </Card>
          </div>
        </motion.div>
      </main>
    </div>
  );
}
</file>

<file path="src/pages/Reports.tsx">
import React, { useState, useEffect } from "react";
import { useAuth } from "@/contexts/AuthContext";
import { useNavigate } from "react-router-dom";
import NavBar from "@/components/NavBar";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { FileText, TrendingUp, Calendar, ChevronDown, Loader2, Trash2, AlertTriangle, Play, Sparkles, Brain, BarChart3 } from "lucide-react";
import { Popover, PopoverContent, PopoverTrigger } from "@/components/ui/popover";
import { Calendar as CalendarComponent } from "@/components/ui/calendar";
import { format } from "date-fns";
import ReportTemplate from "@/components/reports/ReportTemplate";
import { useDailyAnalytics } from "@/hooks/useDailyAnalytics";
import { toast } from "@/hooks/use-toast";
import { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle, AlertDialogTrigger } from "@/components/ui/alert-dialog";
import { supabase } from "@/integrations/supabase/client";

export default function Reports() {
  const { user } = useAuth();
  const navigate = useNavigate();
  const { 
    analytics, 
    historicalReports, 
    loading, 
    error, 
    fetchAnalyticsByDate,
    generateHistoricalReport,
    deleteHistoricalReport,
    triggerAnalyticsGeneration
  } = useDailyAnalytics();
  
  const [selectedDate, setSelectedDate] = useState<Date | undefined>(new Date());
  const [currentReport, setCurrentReport] = useState<any>(null);
  const [isGenerating, setIsGenerating] = useState(false);
  const [isGeneratingToday, setIsGeneratingToday] = useState(false);
  const [isDeleting, setIsDeleting] = useState(false);
  const [showDatePicker, setShowDatePicker] = useState(false);
  const [maintenance, setMaintenance] = useState(false);

  useEffect(() => {
    if (!user) {
      navigate("/auth");
    }
  }, [user, navigate]);

  useEffect(() => {
    if (analytics) {
      setCurrentReport(analytics);
    }
  }, [analytics]);

  useEffect(() => {
    if (selectedDate) {
      handleDateChange(selectedDate);
    }
  }, [selectedDate]);

  useEffect(() => {
    // Fetch per-page maintenance mode from site_settings
    const fetchMaintenance = async () => {
      const { data, error } = await supabase
        .from('site_settings')
        .select('setting_value')
        .eq('setting_key', 'maintenance_reports')
        .single();
      if (data && data.setting_value === 'true') {
        setMaintenance(true);
      } else {
        setMaintenance(false);
      }
    };
    fetchMaintenance();
  }, [user]);

  const handleDateChange = async (date: Date) => {
    const dateString = format(date, 'yyyy-MM-dd');
    const todayString = format(new Date(), 'yyyy-MM-dd');
    
    if (dateString === todayString) {
      setCurrentReport(analytics);
    } else {
      const existingReport = historicalReports.find(
        report => report.analysis_date === dateString
      );
      
      if (existingReport) {
        setCurrentReport(existingReport);
      } else {
        setCurrentReport(null);
      }
    }
  };

  const handleGenerateReport = async () => {
    if (!selectedDate) return;
    
    setIsGenerating(true);
    const dateString = format(selectedDate, 'yyyy-MM-dd');
    const todayString = format(new Date(), 'yyyy-MM-dd');
    
    try {
      if (dateString === todayString) {
        toast({
          title: "Today's Report",
          description: "Today's report is generated automatically. Use the current report above.",
        });
        return;
      }

      const result = await generateHistoricalReport(dateString);
      
      if (result.success) {
        toast({
          title: "Report Generated",
          description: `AI-powered report for ${format(selectedDate, 'MMM dd, yyyy')} has been created successfully.`,
        });
        
        const newReport = await fetchAnalyticsByDate(dateString);
        if (newReport) {
          setCurrentReport(newReport);
        }
      } else {
        toast({
          title: "Generation Failed",
          description: result.error || "Failed to generate historical report. Please try again.",
          variant: "destructive",
        });
      }
    } catch (error: any) {
      toast({
        title: "Error",
        description: error.message || "An unexpected error occurred.",
        variant: "destructive",
      });
    } finally {
      setIsGenerating(false);
    }
  };

  const handleDeleteReport = async (targetDate?: string) => {
    if (!targetDate && !currentReport) return;
    
    setIsDeleting(true);
    const dateToDelete = targetDate || currentReport?.analysis_date;
    
    try {
      const result = await deleteHistoricalReport(dateToDelete);
      
      if (result.success) {
        toast({
          title: "Report Deleted",
          description: `Report for ${format(new Date(dateToDelete), 'MMM dd, yyyy')} has been deleted successfully.`,
        });
        
        if (currentReport?.analysis_date === dateToDelete) {
          setCurrentReport(null);
        }
      } else {
        toast({
          title: "Delete Failed",
          description: result.error || "Failed to delete report. Please try again.",
          variant: "destructive",
        });
      }
    } catch (error: any) {
      toast({
        title: "Error",
        description: error.message || "An unexpected error occurred.",
        variant: "destructive",
      });
    } finally {
      setIsDeleting(false);
    }
  };

  const handleDeleteAllReports = async () => {
    setIsDeleting(true);
    
    try {
      const result = await deleteHistoricalReport(undefined, true);
      
      if (result.success) {
        toast({
          title: "All Reports Deleted",
          description: "All historical reports have been deleted successfully.",
        });
        
        setCurrentReport(null);
      } else {
        toast({
          title: "Delete Failed",
          description: result.error || "Failed to delete all reports. Please try again.",
          variant: "destructive",
        });
      }
    } catch (error: any) {
      toast({
        title: "Error",
        description: error.message || "An unexpected error occurred.",
        variant: "destructive",
      });
    } finally {
      setIsDeleting(false);
    }
  };

  const handleRunTodayReport = async () => {
    setIsGeneratingToday(true);
    
    try {
      const success = await triggerAnalyticsGeneration();
      
      if (success) {
        toast({
          title: "AI Report Generated",
          description: "Today's AI-powered intelligence report has been generated successfully.",
        });
        
        const todayString = format(new Date(), 'yyyy-MM-dd');
        const selectedDateString = selectedDate ? format(selectedDate, 'yyyy-MM-dd') : '';
        
        if (selectedDateString === todayString) {
          setCurrentReport(analytics);
        }
      } else {
        toast({
          title: "Generation Failed",
          description: "Failed to generate today's report. Please try again.",
          variant: "destructive",
        });
      }
    } catch (error: any) {
      toast({
        title: "Error",
        description: error.message || "An unexpected error occurred.",
        variant: "destructive",
      });
    } finally {
      setIsGeneratingToday(false);
    }
  };

  const getReportProps = (report: any) => {
    if (!report) return null;
    
    // Use the new AI analysis fields if available
    const headlines = report.key_headlines || report.high_priority_alerts?.map((alert: string, index: number) => ({
      url: `https://henjii.com/article-${index}`,
      title: alert,
      source: "Local Intelligence",
      impact: "High"
    })) || [];

    const laborUpdates = report.labor_updates || [{
      description: report.trend_analysis || "No labor trends identified for this period.",
      changes: report.key_insights || []
    }];

    const riskAssessment = report.risk_assessment || [{
      riskLevel: report.labor_alerts_count > 5 ? "High" : report.labor_alerts_count > 2 ? "Medium" : "Low",
      description: `Based on ${report.labor_alerts_count} labor alerts and ${report.news_articles_count} news articles analyzed using AI Analysis ${report.ai_analysis_version || 'v1.0'}.`
    }];
    
    return {
      title: `AI Intelligence Report - ${format(new Date(report.analysis_date), 'MMMM dd, yyyy')}`,
      date: report.analysis_date,
      summary: report.executive_summary || report.daily_summary || "No summary available for this report.",
      keyMetrics: {
        totalProjects: report.companies_tracked || 0,
        projectsOnTrack: Math.floor((report.companies_tracked || 0) * 0.8),
        safetyIncidents: Math.floor((report.labor_alerts_count || 0) * 0.1)
      },
      headlines,
      laborUpdates,
      riskAssessment,
      aiVersion: report.ai_analysis_version || 'v1.0'
    };
  };

  if (maintenance) {
    return (
      <div className="min-h-screen flex flex-col bg-background">
        <NavBar />
        <main className="flex-1 container max-w-2xl mx-auto px-4 py-16 flex flex-col items-center justify-center">
          <Card className="max-w-md mx-4">
            <CardHeader className="text-center">
              <div className="w-16 h-16 mx-auto mb-4 rounded-full bg-muted flex items-center justify-center">
                <Brain className="h-8 w-8 text-muted-foreground" />
              </div>
              <CardTitle className="text-xl">Reports Under Maintenance</CardTitle>
              <CardDescription>
                The reports page is temporarily unavailable while we perform updates. Please check back soon.
              </CardDescription>
            </CardHeader>
            <CardContent className="text-center">
              <Button 
                onClick={() => navigate('/')} 
                className="w-full"
              >
                Return to Dashboard
              </Button>
            </CardContent>
          </Card>
        </main>
      </div>
    );
  }

  if (loading) {
    return (
      <div className="min-h-screen flex flex-col bg-background">
        <NavBar />
        <main className="flex-1 container max-w-6xl mx-auto px-4 py-8">
          <div className="text-center py-8">
            <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto mb-4"></div>
            <p className="text-muted-foreground">Loading AI-powered reports...</p>
          </div>
        </main>
      </div>
    );
  }

  const selectedDateString = selectedDate ? format(selectedDate, 'yyyy-MM-dd') : '';
  const todayString = format(new Date(), 'yyyy-MM-dd');
  const isToday = selectedDateString === todayString;
  const hasReportForDate = currentReport && currentReport.analysis_date === selectedDateString;

  return (
    <div className="min-h-screen flex flex-col bg-background">
      <NavBar />
      {/* Maintenance Overlay removed */}
      <main className="flex-1 container max-w-3xl mx-auto px-4 py-8">
        <div className="space-y-6">
          {/* Header */}
          <div className="flex flex-col lg:flex-row lg:items-center lg:justify-between gap-4">
            <div>
              <div className="flex items-center gap-2 mb-2">
                <Brain className="h-6 w-6 text-primary" />
                <h1 className="text-2xl font-bold text-foreground text-left">
                  AI Intelligence Reports
                </h1>
              </div>
              <p className="text-muted-foreground text-left">
                AI-powered analysis and insights for strategic decision making
              </p>
            </div>
            <div className="flex flex-col sm:flex-row gap-2">
              <Popover open={showDatePicker} onOpenChange={setShowDatePicker}>
                <PopoverTrigger asChild>
                  <Button 
                    variant="outline" 
                    size="sm"
                    className="justify-between min-w-[180px]"
                  >
                    <Calendar className="h-4 w-4 mr-2" />
                    {selectedDate ? format(selectedDate, 'MMM dd, yyyy') : 'Select Date'}
                    <ChevronDown className="h-4 w-4 ml-2" />
                  </Button>
                </PopoverTrigger>
                <PopoverContent className="w-auto p-0" align="end">
                  <CalendarComponent
                    mode="single"
                    selected={selectedDate}
                    onSelect={(date) => {
                      setSelectedDate(date);
                      setShowDatePicker(false);
                    }}
                    disabled={(date) => date > new Date()}
                    initialFocus
                  />
                </PopoverContent>
              </Popover>
              {/* Only show Generate button for admin */}
              {user?.role === 'admin' && (
                <Button 
                  size="sm" 
                  onClick={handleRunTodayReport}
                  disabled={isGeneratingToday}
                  className="bg-primary hover:bg-primary/90"
                >
                  {isGeneratingToday ? (
                    <Loader2 className="h-4 w-4 mr-2 animate-spin" />
                  ) : (
                    <Sparkles className="h-4 w-4 mr-2" />
                  )}
                  Generate Today's Report
                </Button>
              )}
            </div>
          </div>
          {/* Report content only */}
          <div>
            {hasReportForDate ? (
              (() => {
                const reportProps = getReportProps(currentReport);
                return reportProps ? (
                  <ReportTemplate 
                    title={reportProps.title}
                    date={reportProps.date}
                    summary={reportProps.summary}
                    keyMetrics={reportProps.keyMetrics}
                    headlines={reportProps.headlines}
                    laborUpdates={reportProps.laborUpdates}
                    riskAssessment={reportProps.riskAssessment}
                    key_insights={currentReport?.key_insights}
                    strategic_takeaways={currentReport?.strategic_takeaways}
                    action_items={currentReport?.action_items}
                    trend_analysis={currentReport?.trend_analysis}
                    news_articles_count={currentReport?.news_articles_count}
                    labor_alerts_count={currentReport?.labor_alerts_count}
                    companies_tracked={currentReport?.companies_tracked}
                    company_news_activity={currentReport?.company_news_activity}
                  />
                ) : null;
              })()
            ) :
              <Card>
                <CardContent className="p-8 text-center">
                  {!isToday && selectedDate ? (
                    <div className="space-y-4">
                      <Brain className="h-12 w-12 text-muted-foreground mx-auto" />
                      <div>
                        <h3 className="text-lg font-semibold mb-2">No AI Report Available</h3>
                        <p className="text-muted-foreground mb-4">
                          No report available for {format(selectedDate, 'MMMM dd, yyyy')}
                        </p>
                        <p className="text-sm text-muted-foreground mb-4">
                          Generate an AI-powered historical report from this date
                        </p>
                        {/* Only show Generate button for admin */}
                        {user?.role === 'admin' && (
                          <Button 
                            onClick={handleGenerateReport}
                            disabled={isGenerating}
                          >
                            {isGenerating ? (
                              <>
                                <Loader2 className="h-4 w-4 mr-2 animate-spin" />
                                Generating AI Report...
                              </>
                            ) : (
                              <>
                                <Sparkles className="h-4 w-4 mr-2" />
                                Generate Historical Report
                              </>
                            )}
                          </Button>
                        )}
                      </div>
                    </div>
                  ) : (
                    <div>
                      <FileText className="h-12 w-12 text-muted-foreground mx-auto mb-4" />
                      <h3 className="text-lg font-semibold mb-2">No Report Data</h3>
                      <p className="text-muted-foreground">Check back later for the latest AI intelligence report</p>
                    </div>
                  )}
                </CardContent>
              </Card>
            }
          </div>
        </div>
      </main>
      
      <footer className="text-center py-4 text-sm text-muted-foreground bg-card border-t">
        © 2025 DataPilot+™. AI-powered intelligence for labor organizations.
      </footer>
    </div>
  );
}
</file>

<file path="src/components/analytics/AnalyticsOverview.tsx">
import { motion } from "framer-motion";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Building2, TrendingUp, Users, RefreshCw } from "lucide-react";
import { Link } from "react-router-dom";
import { useDailyAnalytics } from "@/hooks/useDailyAnalytics";
import SyncButton from "@/components/SyncButton";
import { FeedSyncStatus } from "./FeedSyncStatus";
import { DataPointChart } from "@/components/DataPointChart";

export default function AnalyticsOverview() {
  const { analytics, historicalReports, loading, error } = useDailyAnalytics();

  const containerVariants = {
    hidden: { opacity: 0 },
    visible: {
      opacity: 1,
      transition: {
        staggerChildren: 0.1
      }
    }
  };

  const itemVariants = {
    hidden: { opacity: 0, y: 20 },
    visible: { opacity: 1, y: 0 }
  };

  return (
    <div className="space-y-6">
      {/* Quick Actions */}
      <div className="flex flex-col sm:flex-row gap-4 items-start sm:items-center justify-between text-left">
        <div>
          <h2 className="text-2xl font-bold text-left">Intelligence Overview</h2>
          <p className="text-muted-foreground text-left">
            Real-time monitoring of construction industry activity and Local 825 intelligence feeds.
          </p>
        </div>
        <div className="flex gap-2">
          <Button asChild variant="outline" size="sm">
            <Link to="/feed" className="flex items-center gap-2">
              <TrendingUp className="h-4 w-4" />
              View Intel
            </Link>
          </Button>
          <SyncButton />
        </div>
      </div>

      {/* Analytics Cards */}
      <motion.div 
        className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4"
        variants={containerVariants}
        initial="hidden"
        animate="visible"
      >
        <motion.div variants={itemVariants} className="min-w-[220px] h-36">
          <FeedSyncStatus />
        </motion.div>

        <motion.div variants={itemVariants} className="min-w-[220px] h-36">
          <Card className="h-full">
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium">Today's Articles</CardTitle>
              <TrendingUp className="h-4 w-4 text-muted-foreground" />
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold">
                {loading ? "..." : analytics?.news_articles_count || 0}
              </div>
              <p className="text-xs text-muted-foreground">
                New articles processed
              </p>
            </CardContent>
          </Card>
        </motion.div>

        <motion.div variants={itemVariants} className="min-w-[220px] h-36">
          <Card className="h-full">
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium">Companies Tracked</CardTitle>
              <Building2 className="h-4 w-4 text-muted-foreground" />
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold">
                {loading ? "..." : analytics?.companies_tracked || 30}
              </div>
              <p className="text-xs text-muted-foreground">
                Active monitoring targets
              </p>
            </CardContent>
          </Card>
        </motion.div>

        <motion.div variants={itemVariants} className="min-w-[220px] h-36">
          <Card className="h-full">
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium">Labor Insights</CardTitle>
              <Users className="h-4 w-4 text-muted-foreground" />
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold">
                {loading ? "..." : analytics?.labor_alerts_count || 0}
              </div>
              <p className="text-xs text-muted-foreground">
                Insights collected by Bulldozer
              </p>
            </CardContent>
          </Card>
        </motion.div>
      </motion.div>

      {/* Additional Insights Section (placeholders for now) */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 mt-4">
        {/* Trend Chart for Articles Processed (last 7 days) */}
        <Card className="h-44 flex flex-col justify-center items-center">
          <div className="w-full h-full flex flex-col justify-center items-center p-2">
            <div className="w-full">
              <DataPointChart
                data={historicalReports.slice(0, 7).reverse().map(day => ({
                  name: day.analysis_date.slice(5), // MM-DD
                  value: day.news_articles_count || 0
                }))}
                title="Articles (7-day trend)"
                height={120}
              />
            </div>
          </div>
        </Card>
        <Card className="h-44 flex flex-col justify-center items-center">
          <span className="text-sm text-muted-foreground">[Top Companies Placeholder]</span>
        </Card>
        <Card className="h-44 flex flex-col justify-center items-center">
          <span className="text-sm text-muted-foreground">[Topics/Tag Cloud Placeholder]</span>
        </Card>
        <Card className="h-44 flex flex-col justify-center items-center">
          <span className="text-sm text-muted-foreground">[Recent High-Priority News Placeholder]</span>
        </Card>
      </div>

      {/* Daily Summary Card */}
      {analytics?.daily_summary && (
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ delay: 0.4 }}
        >
          <Card>
            <CardHeader>
              <div className="flex items-center justify-between">
                <CardTitle>Today's Intelligence Summary</CardTitle>
                <Button asChild size="sm" variant="outline">
                  <Link to="/feed">
                    View Full Feed
                    <TrendingUp className="h-4 w-4 ml-2" />
                  </Link>
                </Button>
              </div>
            </CardHeader>
            <CardContent>
              <p className="text-sm leading-relaxed text-muted-foreground">
                {analytics.daily_summary}
              </p>
              
              {analytics.key_insights && analytics.key_insights.length > 0 && (
                <div className="mt-4">
                  <h4 className="text-sm font-medium mb-2">Key Insights</h4>
                  <ul className="space-y-1">
                    {analytics.key_insights.map((insight, index) => (
                      <li key={index} className="text-xs text-muted-foreground flex items-start gap-2">
                        <span className="w-1 h-1 bg-primary rounded-full mt-2 flex-shrink-0" />
                        {insight}
                      </li>
                    ))}
                  </ul>
                </div>
              )}
            </CardContent>
          </Card>
        </motion.div>
      )}

      {error && (
        <motion.div
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
        >
          <Card className="border-destructive/20 bg-destructive/5">
            <CardContent className="pt-6">
              <p className="text-sm text-destructive">
                Unable to load analytics data. Please try refreshing the page.
              </p>
            </CardContent>
          </Card>
        </motion.div>
      )}
    </div>
  );
}
</file>

<file path="src/components/NavBar.tsx">
import { useState, useRef, useEffect } from "react";
import { Link, useLocation, useNavigate } from "react-router-dom";
import { useAuth } from "@/contexts/AuthContext";
import { Button } from "@/components/ui/button";
import { Sheet, SheetContent, SheetTrigger } from "@/components/ui/sheet";
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import { DropdownMenu, DropdownMenuContent, DropdownMenuGroup, DropdownMenuItem, DropdownMenuLabel, DropdownMenuSeparator, DropdownMenuTrigger } from "@/components/ui/dropdown-menu";
import { 
  Menu, 
  Home, 
  Building2, 
  FileText, 
  Settings, 
  LogOut, 
  User, 
  BarChart3,
  Rss,
  Bot,
  Search,
  BookOpen,
  ExternalLink
} from "lucide-react";
import { toast } from "@/hooks/use-toast";
import CommandBar, { CommandBarRef } from "@/components/CommandBar";
import ThemeToggle from "@/components/ThemeToggle";

const NavBar = () => {
  const { user, signOut } = useAuth();
  const location = useLocation();
  const navigate = useNavigate();
  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);
  const [isCommandBarOpen, setIsCommandBarOpen] = useState(false);
  const commandBarRef = useRef<CommandBarRef>(null);

  const handleSignOut = async () => {
    try {
      await signOut();
      toast({
        title: "Signed out successfully",
        description: "You have been logged out of your account.",
      });
      navigate("/auth");
    } catch (error) {
      console.error("Error signing out:", error);
      toast({
        title: "Error",
        description: "Failed to sign out. Please try again.",
        variant: "destructive",
      });
    }
  };

  const openCommandBar = () => {
    setIsCommandBarOpen(true);
    commandBarRef.current?.openCommandBar();
  };

  // Keyboard shortcut for command bar
  useEffect(() => {
    const handleKeyDown = (event: KeyboardEvent) => {
      if ((event.metaKey || event.ctrlKey) && event.key === 'k') {
        event.preventDefault();
        openCommandBar();
      }
    };

    document.addEventListener('keydown', handleKeyDown);
    return () => {
      document.removeEventListener('keydown', handleKeyDown);
    };
  }, []);

  const navItems = [
    { name: "Dashboard", href: "/dashboard", icon: Home },
    { name: "Intelligence Feed", href: "/feed", icon: Rss },
    { name: "Companies", href: "/companies", icon: Building2 },
    { name: "Reports", href: "/reports", icon: FileText },
    { name: "Assistant", href: "https://825chat.datapilotplus.com", icon: Bot, external: true },
  ];

  const NavLink = ({ item, onClick }: { item: typeof navItems[0], onClick?: () => void }) => {
    const isActive = location.pathname === item.href || 
      (item.href === "/companies" && location.pathname.startsWith("/company")) ||
      (item.href === "/reports" && location.pathname.startsWith("/report"));
    
    if (item.external) {
      return (
        <a
          href={item.href}
          target="_blank"
          rel="noopener noreferrer"
          onClick={onClick}
          className="flex items-center gap-2 px-3 py-1.5 rounded-md text-sm font-medium transition-all duration-200 text-muted-foreground hover:text-foreground hover:bg-muted/50"
        >
          <item.icon className="h-4 w-4" />
          {item.name}
          <ExternalLink className="h-3 w-3" />
        </a>
      );
    }
    
    return (
      <Link
        to={item.href}
        onClick={onClick}
        className={`flex items-center gap-2 px-3 py-1.5 rounded-md text-sm font-medium transition-all duration-200 ${
          isActive
            ? "bg-primary/10 text-primary border border-primary/20"
            : "text-muted-foreground hover:text-foreground hover:bg-muted/50"
        }`}
      >
        <item.icon className="h-4 w-4" />
        {item.name}
      </Link>
    );
  };

  const userDisplayName = user?.user_metadata?.full_name || user?.email?.split('@')[0] || "User";
  const userInitials = userDisplayName.split(' ').map((n: string) => n[0]).join('').toUpperCase();

  return (
    <>
      <nav className="sticky top-0 z-50 w-full border-b border-border/40 bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60">
        <div className="container flex h-14 max-w-screen-2xl items-center">
          <div className="mr-4 hidden md:flex">
            <Link to="/dashboard" className="mr-6 flex items-center space-x-2">
              <img 
                src="https://www.iuoe825.org/wp-content/uploads/2016/03/825_2_120x120.png" 
                alt="Local 825" 
                className="h-8 w-8"
              />
              <span className="hidden font-bold sm:inline-block">
                Bulldozer
              </span>
            </Link>
            <nav className="flex items-center gap-1">
              {navItems.map((item) => (
                <NavLink key={item.name} item={item} />
              ))}
            </nav>
          </div>

          {/* Mobile Menu */}
          <Sheet open={isMobileMenuOpen} onOpenChange={setIsMobileMenuOpen}>
            <SheetTrigger asChild>
              <Button
                variant="ghost"
                className="mr-2 px-0 text-base hover:bg-transparent focus-visible:bg-transparent focus-visible:ring-0 focus-visible:ring-offset-0 md:hidden"
              >
                <Menu className="h-5 w-5" />
                <span className="sr-only">Toggle Menu</span>
              </Button>
            </SheetTrigger>
            <SheetContent side="left" className="pr-0">
              <div className="flex flex-col space-y-4">
                <Link to="/dashboard" className="flex items-center space-x-2 mb-4">
                  <img 
                    src="https://www.iuoe825.org/wp-content/uploads/2016/03/825_2_120x120.png" 
                    alt="Local 825" 
                    className="h-8 w-8"
                  />
                  <span className="font-bold">Bulldozer+</span>
                </Link>
                {navItems.map((item) => (
                  <NavLink key={item.name} item={item} onClick={() => setIsMobileMenuOpen(false)} />
                ))}
              </div>
            </SheetContent>
          </Sheet>

          <div className="flex flex-1 items-center justify-between space-x-2 md:justify-end">
            <div className="w-full flex-1 md:w-auto md:flex-none">
              <Link to="/dashboard" className="flex items-center space-x-2 md:hidden">
                <img 
                  src="https://www.iuoe825.org/wp-content/uploads/2016/03/825_2_120x120.png" 
                  alt="Local 825" 
                  className="h-8 w-8"
                />
                <span className="font-bold">Bulldozer</span>
              </Link>
            </div>
            <nav className="flex items-center space-x-2">
              {/* Hide search bar on small screens to show logo */}
              <Button
                variant="outline"
                size="sm"
                onClick={openCommandBar}
                className="relative h-8 w-full justify-start rounded-[0.5rem] bg-background text-sm font-normal text-muted-foreground shadow-none sm:pr-12 md:w-40 lg:w-64 hidden sm:flex"
              >
                <Search className="mr-2 h-4 w-4" />
                <span className="hidden lg:inline-flex">Search pages...</span>
                <span className="inline-flex lg:hidden">Search...</span>
                <kbd className="pointer-events-none absolute right-[0.3rem] top-[0.3rem] hidden h-5 select-none items-center gap-1 rounded border bg-muted px-1.5 font-mono text-[10px] font-medium opacity-100 sm:flex">
                  <span className="text-xs">⌘</span>K
                </kbd>
              </Button>
              
              {/* Search icon only for mobile */}
              <Button
                variant="ghost"
                size="sm"
                onClick={openCommandBar}
                className="h-8 w-8 p-0 sm:hidden"
              >
                <Search className="h-4 w-4" />
              </Button>
              
              <ThemeToggle />
              
              <DropdownMenu>
                <DropdownMenuTrigger asChild>
                  <Button variant="ghost" className="relative h-8 w-8 rounded-full">
                    <Avatar className="h-8 w-8">
                      <AvatarImage src={user?.user_metadata?.avatar_url} alt={userDisplayName} />
                      <AvatarFallback>{userInitials}</AvatarFallback>
                    </Avatar>
                  </Button>
                </DropdownMenuTrigger>
                <DropdownMenuContent className="w-56" align="end" forceMount>
                  <DropdownMenuLabel className="font-normal">
                    <div className="flex flex-col space-y-1">
                      <p className="text-sm font-medium leading-none">{userDisplayName}</p>
                      <p className="text-xs leading-none text-muted-foreground">
                        {user?.email}
                      </p>
                    </div>
                  </DropdownMenuLabel>
                  <DropdownMenuSeparator />
                  <DropdownMenuGroup>
                    <DropdownMenuItem asChild>
                      <Link to="/profile" className="cursor-pointer">
                        <User className="mr-2 h-4 w-4" />
                        <span>Profile</span>
                      </Link>
                    </DropdownMenuItem>
                    <DropdownMenuItem asChild>
                      <Link to="/settings" className="cursor-pointer">
                        <Settings className="mr-2 h-4 w-4" />
                        <span>Settings</span>
                      </Link>
                    </DropdownMenuItem>
                    <DropdownMenuItem asChild>
                      <Link to="/user-guide" className="cursor-pointer">
                        <BookOpen className="mr-2 h-4 w-4" />
                        <span>User Guide</span>
                      </Link>
                    </DropdownMenuItem>
                  </DropdownMenuGroup>
                  <DropdownMenuSeparator />
                  <DropdownMenuItem onClick={handleSignOut} className="cursor-pointer">
                    <LogOut className="mr-2 h-4 w-4" />
                    <span>Log out</span>
                  </DropdownMenuItem>
                </DropdownMenuContent>
              </DropdownMenu>
            </nav>
          </div>
        </div>
      </nav>
      
      <CommandBar 
        ref={commandBarRef}
        isOpen={isCommandBarOpen}
        setIsOpen={setIsCommandBarOpen}
      />
    </>
  );
};

export default NavBar;
</file>

<file path="src/hooks/useFeedData.ts">
import { useState, useEffect, useCallback } from "react";
import { supabase } from "@/integrations/supabase/client";
import { toast } from "@/hooks/use-toast";
import { useTrackedCompanies } from "@/hooks/useTrackedCompanies";
import { useMainCompanies } from "@/hooks/useMainCompanies";
import { useNewsSourceCompanies } from "@/hooks/useNewsSourceCompanies";
import { NewsArticle } from "@/types";

export function useFeedData(showIrrelevant: boolean = false) {
  const { companies: trackedCompanies } = useTrackedCompanies();
  const { companies: mainCompanies } = useMainCompanies();
  const { companies: newsSourceCompanies } = useNewsSourceCompanies();
  const [articles, setArticles] = useState<NewsArticle[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [refreshing, setRefreshing] = useState(false);

  const fetchArticles = useCallback(async () => {
    setLoading(true);
    setError(null);
    try {
      console.log('Loading all news articles from database');
      
      // Load all articles from the database with full content (news and jobs)
      const { data, error } = await supabase
        .from('news_articles')
        .select(`
          id,
          source_id,
          title,
          description,
          url,
          published_at,
          company_mentioned,
          created_at,
          excerpt,
          full_analysis,
          local_825_relevance,
          is_analyzed,
          analyzed_at,
          wordpress_category,
          content_type,
          content,
          priority_level,
          news_sources (
            name,
            description
          )
        `)
        .order('published_at', { ascending: false })
        .limit(1000);

      if (error) {
        console.error('Database error:', error);
        throw error;
      }
      
      console.log(`Raw data from database:`, data?.length || 0, 'Local 825 news articles');
      console.log('Articles by category:', {
        'local-825 news': data?.filter(a => a.wordpress_category === 'local-825' && a.content_type === 'news').length || 0,
        'total articles': data?.length || 0
      });
      
      if (!data || data.length === 0) {
        console.log('No articles found in database');
        setArticles([]);
        return;
      }

      const uniqueArticles = removeDuplicatesAndSort(data || []);
      console.log(`Loaded ${uniqueArticles.length} articles from database after deduplication`);
      
      // Log content availability for debugging
      const articlesWithContent = uniqueArticles.filter(a => a.content && a.content.trim().length > 0);
      console.log(`Articles with full content: ${articlesWithContent.length}/${uniqueArticles.length}`);
      
      setArticles(uniqueArticles);

    } catch (error: unknown) {
      const errorMessage = error instanceof Error ? error.message : "Failed to load articles";
      console.error('Error fetching articles:', error);
      setError(errorMessage);
      toast({
        title: "Error",
        description: errorMessage,
        variant: "destructive",
      });
    } finally {
      setLoading(false);
    }
  }, []);

  const triggerRefresh = async () => {
    setRefreshing(true);
    await fetchArticles();
    setRefreshing(false);
  };

  const removeDuplicatesAndSort = (articles: NewsArticle[]) => {
    // Remove duplicates by URL and sort by latest
    const seenUrls = new Set<string>();
    let uniqueArticles = articles.filter(article => {
      if (seenUrls.has(article.url)) {
        return false;
      }
      seenUrls.add(article.url);
      return true;
    });

    // Sort by latest post at the top
    uniqueArticles = uniqueArticles.sort((a, b) => {
      const dateA = new Date(a.published_at || a.created_at);
      const dateB = new Date(b.published_at || b.created_at);
      return dateB.getTime() - dateA.getTime();
    });

    return uniqueArticles;
  };

  // Fetch articles immediately when component mounts
  useEffect(() => {
    fetchArticles();
  }, [fetchArticles]);

  return {
    articles,
    loading,
    error,
    refreshing,
    fetchArticles,
    triggerRefresh,
    allCompanies: {
      mainCompanies,
      trackedCompanies,
      newsSourceCompanies
    }
  };
}
</file>

<file path="src/pages/ArticleDetail.tsx">
import { useState, useEffect } from "react";
import { useParams, Link } from "react-router-dom";
import { supabase } from "@/integrations/supabase/client";
import NavBar from "@/components/NavBar";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { ArrowLeft, ExternalLink, Clock, Building2 } from "lucide-react";
import { format } from "date-fns";
import { MarkdownRenderer } from "@/components/chat/MarkdownRenderer";

interface NewsArticle {
  id: string;
  title: string;
  description: string | null;
  url: string;
  published_at: string | null;
  company_mentioned: string | null;
  created_at: string;
  excerpt?: string | null;
  full_analysis?: string | null;
  local_825_relevance?: string | null;
  is_analyzed?: boolean;
  analyzed_at?: string | null;
  content?: string | null;
  news_sources: {
    name: string;
    description: string | null;
  };
}

export default function ArticleDetail() {
  const { id } = useParams<{ id: string }>();
  const [article, setArticle] = useState<NewsArticle | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    if (!id) return;

    const fetchArticle = async () => {
      try {
        const { data, error } = await supabase
          .from('news_articles')
          .select(`*, news_sources (name, description) `)
          .eq('id', id)
          .single();

        if (error) throw error;
        setArticle(data);
      } catch (err: any) {
        console.error('Error fetching article:', err);
        setError(err.message);
      } finally {
        setLoading(false);
      }
    };

    fetchArticle();
  }, [id]);

  const cleanDescription = (description: string | null): string => {
    if (!description) return "";
    let cleaned = description.replace(/<[^>]*>/g, "");
    cleaned = cleaned
      .replace(/&nbsp;/g, " ")
      .replace(/&amp;/g, "&")
      .replace(/&lt;/g, "<")
      .replace(/&gt;/g, ">")
      .replace(/&quot;/g, '"')
      .replace(/&#39;/g, "'")
      .replace(/&apos;/g, "'")
      .replace(/&#8211;/g, "–")
      .replace(/&#8230;/g, "...")
      .replace(/&#038;/g, "&")
      .replace(/&#124;/g, "|")
      .replace(/\s+/g, " ").trim()
      .replace(/Read more\.\.\./gi, "")
      .replace(/Continue reading\.\.\./gi, "")
      .replace(/\[.*?\]/g, "");
    return cleaned;
  };

  const formatArticleContent = (content: string): string => {
    if (!content) return "";
    let formatted = cleanDescription(content);
    formatted = formatted
      .replace(/(\. )([A-Z][^.]*(?:said|announced|reported|stated|confirmed|revealed|explained|noted|added|emphasized|concluded))/gi, '$1\n\n$2')
      .replace(/(" )([A-Z])/g, '$1\n\n$2')
      .replace(/(\. )([A-Z][A-Z\s]+ –|[A-Z][a-z]+ –)/g, '$1\n\n$2')
      .replace(/(\.)(\s*)([\d•\-\*]\.\s+[A-Z])/g, '$1\n\n$3')
      .replace(/(\. )(According to|Based on|In a statement|The company)/gi, '$1\n\n$2')
      .replace(/\n{3,}/g, '\n\n')
      .trim()
      .replace(/\b([A-Z][a-z]+\s+[A-Z][a-z]+(?:\s+[A-Z][a-z]+)?)\s+(Corporation|Corp|Company|Co\.|Inc\.|LLC|Ltd\.)/g, '**$1 $2**')
      .replace(/(\$[\d,]+(?:\.\d{2})?(?:\s+(?:million|billion|thousand))?)/gi, '**$1**')
      .replace(/\b(January|February|March|April|May|June|July|August|September|October|November|December)\s+\d{1,2},?\s+\d{4}\b/g, '**$&**')
      .replace(/"([^"]+)"/g, '*"$1"*');
    return formatted;
  };

  const formatDate = (dateString: string | null): string => {
    if (!dateString) return "";
    try {
      const date = new Date(dateString);
      if (isNaN(date.getTime())) return "";
      return format(date, "MMMM d, yyyy 'at' h:mm a");
    } catch (error) {
      return "";
    }
  };

  if (loading) {
    return (
      <div className="min-h-screen flex flex-col bg-gradient-to-br from-background to-secondary/20">
        <NavBar />
        <main className="flex-1 container max-w-4xl mx-auto px-4 sm:px-6 py-8">
          <div className="animate-pulse space-y-4">
            <div className="h-8 bg-gray-200 rounded"></div>
            <div className="h-4 bg-gray-200 rounded w-3/4"></div>
            <div className="h-32 bg-gray-200 rounded"></div>
          </div>
        </main>
      </div>
    );
  }

  if (error || !article) {
    return (
      <div className="min-h-screen flex flex-col bg-gradient-to-br from-background to-secondary/20">
        <NavBar />
        <main className="flex-1 container max-w-4xl mx-auto px-4 sm:px-6 py-8">
          <Card>
            <CardContent className="text-center py-12">
              <h3 className="text-lg font-semibold mb-2">Article Not Found</h3>
              <p className="text-muted-foreground mb-4">The article you're looking for doesn't exist or has been removed.</p>
              <Button asChild>
                <Link to="/feed">
                  <ArrowLeft className="h-4 w-4 mr-2" />
                  Back to Feed
                </Link>
              </Button>
            </CardContent>
          </Card>
        </main>
      </div>
    );
  }

  const displayContent = article.content || article.description || "";
  const formattedContent = formatArticleContent(displayContent);

  return (
    <div className="min-h-screen flex flex-col bg-gradient-to-br from-background to-secondary/20">
      <NavBar />
      <main className="flex-1 container max-w-3xl mx-auto px-2 sm:px-4 py-8">
        <div className="mb-6">
          <Button variant="ghost" asChild>
            <Link to="/feed">
              <ArrowLeft className="h-4 w-4 mr-2" />
              Back to Feed
            </Link>
          </Button>
        </div>
        <Card className="shadow-lg border border-blue-200 dark:border-blue-900">
          <CardHeader className="pb-2">
            <div className="flex flex-wrap items-center gap-2 mb-2">
              <Badge variant="outline" className="flex items-center gap-1 bg-blue-50 dark:bg-blue-900/30 text-blue-900 dark:text-blue-200 border-blue-200 dark:border-blue-700">
                <Building2 className="h-3 w-3" />
                {article.news_sources?.name || 'Bulldozer Scraper'}
              </Badge>
              <Badge variant="secondary" className="bg-blue-100 dark:bg-blue-950/40 text-blue-800 dark:text-blue-200 border-blue-200 dark:border-blue-700">
                News Insight
              </Badge>
            </div>
            <CardTitle className="text-2xl font-bold leading-tight mb-2 text-blue-900 dark:text-blue-100 text-left">
              {cleanDescription(article.title)}
            </CardTitle>
            <div className="flex flex-wrap items-center gap-4 text-xs text-muted-foreground mb-2 text-left">
              {article.published_at && (
                <div className="flex items-center gap-1">
                  <Clock className="h-4 w-4" />
                  <span>{formatDate(article.published_at)}</span>
                </div>
              )}
              <Button variant="outline" size="sm" asChild>
                <a href={article.url} target="_blank" rel="noopener noreferrer" className="flex items-center gap-1">
                  View Original
                  <ExternalLink className="h-3 w-3" />
                </a>
              </Button>
            </div>
          </CardHeader>
          <CardContent>
            {article.is_analyzed && article.local_825_relevance && (
              <div className="mb-6 bg-blue-50 dark:bg-blue-950/30 p-4 rounded-lg border border-blue-200 dark:border-blue-800">
                <div className="flex items-center gap-2 mb-2">
                  <img src="https://www.iuoe825.org/wp-content/uploads/2016/03/825_2_120x120.png" alt="Local 825" className="h-6 w-6 rounded-full" />
                  <h4 className="font-semibold text-blue-900 dark:text-blue-100 text-left">
                    Local 825 Analysis
                  </h4>
                </div>
                <div className="prose prose-sm max-w-none dark:prose-invert text-left">
                  <MarkdownRenderer content={article.local_825_relevance} />
                </div>
              </div>
            )}
            {formattedContent && (
              <article className="max-w-none">
                <div className="prose prose-lg max-w-none dark:prose-invert prose-headings:text-left prose-p:text-left prose-li:text-left prose-blockquote:text-left text-left">
                  <MarkdownRenderer content={formattedContent} />
                </div>
              </article>
            )}
            {article.full_analysis && (
              <div className="mt-8 bg-gray-50 dark:bg-gray-900/30 p-6 rounded-lg border">
                <h4 className="font-semibold mb-4 text-left">Detailed Analysis</h4>
                <div className="prose prose-sm max-w-none dark:prose-invert text-left">
                  <MarkdownRenderer content={article.full_analysis} />
                </div>
              </div>
            )}
            <div className="mt-8 pt-6 border-t border-border text-xs text-muted-foreground text-left">
              <div className="flex flex-wrap gap-4 mb-2">
                <span><strong>Source:</strong> <a href={article.url} target="_blank" rel="noopener noreferrer" className="ml-1 text-primary hover:underline">{new URL(article.url).hostname}</a></span>
                <span><strong>Company:</strong> <span className="ml-1">{article.company_mentioned || 'Bulldozer'}</span></span>
                <span><strong>Published:</strong> <span className="ml-1">{formatDate(article.published_at)}</span></span>
              </div>
            </div>
          </CardContent>
        </Card>
      </main>
      <footer className="text-center py-6 text-xs text-muted-foreground">
        © 2025 Bulldozer Insights™. Intelligence for labor organizations.
      </footer>
    </div>
  );
}
</file>

<file path="src/components/feed/ArticleCard.tsx">
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { ExternalLink, Clock, Building2 } from "lucide-react";
import { format } from "date-fns";

interface Article {
  id: string;
  title: string;
  description?: string;
  excerpt?: string;
  url: string;
  published_at?: string;
  company_mentioned?: string;
  priority_level?: string;
  local_825_relevance?: string;
  news_sources?: {
    name: string;
  };
  content?: string;
}

interface ArticleCardProps {
  article: Article;
  onClick: () => void;
}

export default function ArticleCard({ article, onClick }: ArticleCardProps) {
  const getPriorityColor = (priority?: string) => {
    switch (priority?.toLowerCase()) {
      case 'high': return 'bg-red-100 text-red-800 dark:bg-red-900/20 dark:text-red-400';
      case 'medium': return 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900/20 dark:text-yellow-400';
      case 'low': return 'bg-green-100 text-green-800 dark:bg-green-900/20 dark:text-green-400';
      default: return 'bg-gray-100 text-gray-700 dark:bg-gray-800 dark:text-gray-300';
    }
  };

  const getRelevanceColor = (relevance?: string) => {
    switch (relevance?.toLowerCase()) {
      case 'high': return 'bg-blue-100 text-blue-800 dark:bg-blue-900/20 dark:text-blue-400';
      case 'medium': return 'bg-purple-100 text-purple-800 dark:bg-purple-900/20 dark:text-purple-400';
      case 'low': return 'bg-gray-100 text-gray-700 dark:bg-gray-800 dark:text-gray-300';
      default: return 'bg-gray-100 text-gray-700 dark:bg-gray-800 dark:text-gray-300';
    }
  };

  return (
    <Card 
      className="cursor-pointer transition-all duration-200 hover:shadow-md hover:border-blue-300 dark:hover:border-blue-600"
      onClick={onClick}
    >
      <CardHeader className="pb-3">
        <div className="flex items-start justify-between gap-3">
          <CardTitle className="text-base leading-tight hover:text-blue-600 dark:hover:text-blue-400 transition-colors">
            {article.title}
          </CardTitle>
          <ExternalLink className="h-4 w-4 text-gray-500 dark:text-gray-400 flex-shrink-0 mt-1" />
        </div>
        
        <div className="flex flex-wrap gap-2 mt-2">
          {article.priority_level && (
            <Badge variant="secondary" className={`text-xs ${getPriorityColor(article.priority_level)}`}>
              {article.priority_level} Priority
            </Badge>
          )}
          {article.local_825_relevance && (
            <Badge variant="secondary" className={`text-xs ${getRelevanceColor(article.local_825_relevance)}`}>
              Local 825: {article.local_825_relevance}
            </Badge>
          )}
        </div>
      </CardHeader>
      
      <CardContent className="pt-0">
        {(article.content || article.description || article.excerpt) && (
          <p className="text-sm text-gray-600 dark:text-gray-300 mb-3 line-clamp-3 leading-relaxed text-left">
            {(article.content && article.content.length > 0)
              ? article.content.slice(0, 300) + (article.content.length > 300 ? '...' : '')
              : (article.description || article.excerpt || '')}
          </p>
        )}
        
        <div className="flex items-center justify-between text-xs text-gray-500 dark:text-gray-400">
          <div className="flex items-center gap-4">
            {article.published_at && (
              <div className="flex items-center gap-1">
                <Clock className="h-3 w-3" />
                {format(new Date(article.published_at), 'MMM d, yyyy')}
              </div>
            )}
            {article.company_mentioned && (
              <div className="flex items-center gap-1">
                <Building2 className="h-3 w-3" />
                {article.company_mentioned}
              </div>
            )}
          </div>
          
          {article.news_sources && (
            <span className="font-medium text-blue-600 dark:text-blue-400">
              {article.news_sources.name}
            </span>
          )}
        </div>
      </CardContent>
    </Card>
  );
}
</file>

<file path="src/components/reports/ReportTemplate.tsx">
import React from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { CalendarDays, Building2, AlertTriangle, Target, CheckCircle, TrendingUp, Users, Briefcase, ShieldAlert, Brain, Sparkles, FileText, BarChart3 } from "lucide-react";
import { format, parseISO } from "date-fns";
import { Link } from "react-router-dom";

interface ReportTemplateProps {
  title: string;
  date: string;
  summary: string;
  keyMetrics: {
    totalProjects: number;
    projectsOnTrack: number;
    safetyIncidents: number;
  };
  headlines: { url: string; title: string; source: string; impact?: string }[];
  laborUpdates: { description: string; changes: string[] }[];
  riskAssessment: { riskLevel: string; description: string }[];
}

const ReportTemplate: React.FC<any> = ({
  title,
  date,
  summary,
  keyMetrics,
  headlines,
  laborUpdates,
  riskAssessment,
  key_insights,
  strategic_takeaways,
  action_items,
  trend_analysis,
  news_articles_count,
  labor_alerts_count,
  companies_tracked,
  company_news_activity,
}) => {
  const getRiskIcon = (riskLevel: string) => {
    switch (riskLevel.toLowerCase()) {
      case "high":
        return <AlertTriangle className="h-4 w-4 text-red-500 mr-2" />;
      case "medium":
        return <Target className="h-4 w-4 text-orange-500 mr-2" />;
      case "low":
        return <CheckCircle className="h-4 w-4 text-green-500 mr-2" />;
      default:
        return <ShieldAlert className="h-4 w-4 text-gray-500 mr-2" />;
    }
  };

  const getHeadlineLink = (headline: { url: string; title: string; source: string; impact?: string }) => {
    if (headline.url.includes('henjii.com')) {
      return (
        <Link 
          to={`/feed?search=${encodeURIComponent(headline.title.substring(0, 50))}`}
          className="text-blue-600 hover:text-blue-800 text-sm font-medium"
        >
          View in Feed →
        </Link>
      );
    }
    
    return (
      <a 
        href={headline.url} 
        target="_blank" 
        rel="noopener noreferrer" 
        className="text-blue-600 hover:text-blue-800 text-sm font-medium"
      >
        Read Article →
      </a>
    );
  };

  return (
    <article className="max-w-3xl mx-auto bg-white dark:bg-gray-950 rounded-lg shadow p-8 border border-blue-200 dark:border-blue-900 prose prose-lg dark:prose-invert text-left">
      {/* Local 825 Branding */}
      <header className="flex flex-col items-start mb-8 text-left">
        <img src="https://www.iuoe825.org/wp-content/uploads/2016/03/825_2_120x120.png" alt="Local 825 Logo" className="h-16 w-16 mb-2" />
        <h1 className="text-2xl font-bold text-blue-900 dark:text-blue-100 mb-1 text-left">{title}</h1>
        <div className="text-sm text-blue-700 dark:text-blue-300 text-left">{format(parseISO(date), "MMMM d, yyyy")}</div>
        <div className="mt-2 text-xs text-muted-foreground text-left">AI-generated for IUOE Local 825</div>
      </header>

      {/* Executive Summary */}
      <section className="mb-8">
        <h2 className="text-xl font-semibold text-blue-800 dark:text-blue-200 mb-2 border-b border-blue-100 pb-1 text-left">Executive Summary</h2>
        <p className="text-left">{summary}</p>
      </section>

      {/* Key Insights */}
      {key_insights && key_insights.length > 0 && (
        <section className="mb-8">
          <h2 className="text-xl font-semibold text-blue-800 dark:text-blue-200 mb-2 border-b border-blue-100 pb-1 text-left">Key Insights</h2>
          <ul className="list-disc ml-6 space-y-1 text-left">
            {key_insights.map((insight: string, idx: number) => (
              <li key={idx}>{insight}</li>
            ))}
          </ul>
        </section>
      )}

      {/* Priority Headlines */}
      {headlines && headlines.length > 0 && (
        <section className="mb-8">
          <h2 className="text-xl font-semibold text-blue-800 dark:text-blue-200 mb-2 border-b border-blue-100 pb-1">Priority Headlines</h2>
          <ol className="list-decimal ml-6 space-y-2">
            {headlines.map((headline: any, index: number) => (
              <li key={index}>
                <span className="font-medium">{headline.title}</span>
                {headline.source && (
                  <span className="ml-2 text-xs text-muted-foreground">({headline.source}{headline.publishDate ? `, ${headline.publishDate}` : ""})</span>
                )}
                {headline.url && (
                  <a href={headline.url} target="_blank" rel="noopener noreferrer" className="ml-2 text-blue-700 underline">[Link]</a>
                )}
              </li>
            ))}
          </ol>
        </section>
      )}

      {/* Trend Analysis */}
      {trend_analysis && (
        <section className="mb-8">
          <h2 className="text-xl font-semibold text-blue-800 dark:text-blue-200 mb-2 border-b border-blue-100 pb-1">Trend Analysis</h2>
          <p>{trend_analysis}</p>
        </section>
      )}

      {/* Strategic Takeaways */}
      {strategic_takeaways && strategic_takeaways.length > 0 && (
        <section className="mb-8">
          <h2 className="text-xl font-semibold text-blue-800 dark:text-blue-200 mb-2 border-b border-blue-100 pb-1">Strategic Takeaways</h2>
          <ul className="list-disc ml-6 space-y-1">
            {strategic_takeaways.map((takeaway: string, idx: number) => (
              <li key={idx}>{takeaway}</li>
            ))}
          </ul>
        </section>
      )}

      {/* Action Items */}
      {action_items && (
        <section className="mb-8">
          <h2 className="text-xl font-semibold text-blue-800 dark:text-blue-200 mb-2 border-b border-blue-100 pb-1">Action Items</h2>
          {action_items.next_7_days && action_items.next_7_days.length > 0 && (
            <div className="mb-4">
              <h3 className="text-lg font-semibold text-blue-700 dark:text-blue-300 mb-1">Next 7 Days</h3>
              <ul className="list-disc ml-6">
                {action_items.next_7_days.map((item: string, idx: number) => (
                  <li key={idx}>{item}</li>
                ))}
              </ul>
            </div>
          )}
          {action_items.next_30_days && action_items.next_30_days.length > 0 && (
            <div className="mb-4">
              <h3 className="text-lg font-semibold text-blue-700 dark:text-blue-300 mb-1">Next 30 Days</h3>
              <ul className="list-disc ml-6">
                {action_items.next_30_days.map((item: string, idx: number) => (
                  <li key={idx}>{item}</li>
                ))}
              </ul>
            </div>
          )}
          {action_items.next_90_days && action_items.next_90_days.length > 0 && (
            <div className="mb-4">
              <h3 className="text-lg font-semibold text-blue-700 dark:text-blue-300 mb-1">Next 90 Days</h3>
              <ul className="list-disc ml-6">
                {action_items.next_90_days.map((item: string, idx: number) => (
                  <li key={idx}>{item}</li>
                ))}
              </ul>
            </div>
          )}
        </section>
      )}

      {/* Footer */}
      <footer className="mt-12 pt-6 border-t border-blue-100 text-xs text-muted-foreground text-center">
        © 2025 IUOE Local 825. AI-powered intelligence for labor organizations.
      </footer>
    </article>
  );
};

export default ReportTemplate;
</file>

<file path="supabase/functions/sync-rss-feeds/index.ts">
import "https://deno.land/x/xhr@0.1.0/mod.ts";
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2';

const supabaseUrl = Deno.env.get('SUPABASE_URL')!;
const supabaseKey = Deno.env.get('SUPABASE_SERVICE_ROLE_KEY')!;
const openaiApiKey = Deno.env.get('OPENAI_API_KEY');
const geminiApiKey = 'AIzaSyC94av_WEd778XuNwz6ZLfZ9LPwV3x824Y';

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
  'Access-Control-Allow-Methods': 'POST, GET, OPTIONS',
  'Access-Control-Max-Age': '86400',
};

function categorizeFromUrl(url: string): {
  wordpress_category: string;
  content_type: string;
} {
  console.log(`Categorizing from URL: ${url}`);
  
  if (url.includes('employer-watch')) {
    console.log('Categorized as employer-watch from URL');
    return {
      wordpress_category: 'employer-watch',
      content_type: 'job'
    };
  }
  
  if (url.includes('local-825')) {
    console.log('Categorized as local-825 from URL');
    return {
      wordpress_category: 'local-825',
      content_type: 'news'
    };
  }
  
  // Default fallback
  console.log('Defaulting to local-825 news');
  return {
    wordpress_category: 'local-825',
    content_type: 'news'
  };
}

// Improved XML parser with better content:encoded extraction
function parseRSSXML(xmlString: string) {
  const items: any[] = [];
  
  // Extract items using regex
  const itemMatches = xmlString.match(/<item[^>]*>([\s\S]*?)<\/item>/gi);
  
  if (!itemMatches) {
    console.log('No items found in RSS feed');
    return items;
  }
  
  console.log(`Found ${itemMatches.length} items in RSS feed`);
  
  itemMatches.forEach((itemXml, index) => {
    try {
      const item: any = {};
      
      // Extract title
      const titleMatch = itemXml.match(/<title[^>]*><!\[CDATA\[(.*?)\]\]><\/title>|<title[^>]*>(.*?)<\/title>/is);
      item.title = titleMatch ? (titleMatch[1] || titleMatch[2] || '').trim() : '';
      
      // Extract link
      const linkMatch = itemXml.match(/<link[^>]*><!\[CDATA\[(.*?)\]\]><\/link>|<link[^>]*>(.*?)<\/link>/is);
      item.link = linkMatch ? (linkMatch[1] || linkMatch[2] || '').trim() : '';
      
      // Extract description
      const descMatch = itemXml.match(/<description[^>]*><!\[CDATA\[(.*?)\]\]><\/description>|<description[^>]*>(.*?)<\/description>/is);
      item.description = descMatch ? (descMatch[1] || descMatch[2] || '').trim() : '';
      
      // Extract content:encoded (WordPress full content) - IMPROVED EXTRACTION
      const contentEncodedMatch = itemXml.match(/<content:encoded[^>]*><!\[CDATA\[([\s\S]*?)\]\]><\/content:encoded>/i);
      if (contentEncodedMatch) {
        item.content = contentEncodedMatch[1].trim();
        console.log(`Item ${index + 1}: Found content:encoded with ${item.content.length} characters`);
      } else {
        // Fallback: try without CDATA
        const contentMatch = itemXml.match(/<content:encoded[^>]*>([\s\S]*?)<\/content:encoded>/i);
        if (contentMatch) {
          item.content = contentMatch[1].trim();
          console.log(`Item ${index + 1}: Found content:encoded (no CDATA) with ${item.content.length} characters`);
        } else {
          // Final fallback to description
          item.content = item.description;
          console.log(`Item ${index + 1}: No content:encoded found, using description`);
        }
      }
      
      // Extract publication date
      const pubDateMatch = itemXml.match(/<pubDate[^>]*>(.*?)<\/pubDate>/i);
      item.pubDate = pubDateMatch ? pubDateMatch[1].trim() : '';
      
      // Extract creator
      const creatorMatch = itemXml.match(/<dc:creator[^>]*><!\[CDATA\[(.*?)\]\]><\/dc:creator>|<dc:creator[^>]*>(.*?)<\/dc:creator>/i);
      item.creator = creatorMatch ? (creatorMatch[1] || creatorMatch[2] || '').trim() : '';
      
      console.log(`Item ${index + 1}: ${item.title}`);
      console.log(`  - Description length: ${item.description?.length || 0} chars`);
      console.log(`  - Full content length: ${item.content?.length || 0} chars`);
      console.log(`  - Has full content: ${item.content && item.content.length > item.description?.length}`);
      
      items.push(item);
    } catch (error) {
      console.error(`Error parsing item ${index + 1}:`, error);
    }
  });
  
  return items;
}

function cleanHtml(html: string): string {
  if (!html) return '';
  
  // Remove HTML tags but preserve content structure
  let cleaned = html.replace(/<script[^>]*>.*?<\/script>/gi, '');
  cleaned = cleaned.replace(/<style[^>]*>.*?<\/style>/gi, '');
  
  // Keep paragraph breaks and line breaks for readability
  cleaned = cleaned.replace(/<\/p>/gi, '\n\n');
  cleaned = cleaned.replace(/<br\s*\/?>/gi, '\n');
  cleaned = cleaned.replace(/<\/div>/gi, '\n');
  
  // Remove remaining HTML tags
  cleaned = cleaned.replace(/<[^>]*>/g, ' ');
  
  // Decode HTML entities
  cleaned = cleaned.replace(/&nbsp;/g, ' ');
  cleaned = cleaned.replace(/&amp;/g, '&');
  cleaned = cleaned.replace(/&lt;/g, '<');
  cleaned = cleaned.replace(/&gt;/g, '>');
  cleaned = cleaned.replace(/&quot;/g, '"');
  cleaned = cleaned.replace(/&#39;/g, "'");
  cleaned = cleaned.replace(/&apos;/g, "'");
  cleaned = cleaned.replace(/&#8211;/g, "–");
  cleaned = cleaned.replace(/&#8230;/g, "...");
  cleaned = cleaned.replace(/&#038;/g, "&");
  cleaned = cleaned.replace(/&#124;/g, "|");
  
  // Clean up excessive whitespace but preserve paragraph structure
  cleaned = cleaned.replace(/[ \t]+/g, ' ');
  cleaned = cleaned.replace(/\n\s*\n/g, '\n\n');
  cleaned = cleaned.trim();
  
  return cleaned;
}

// AI analysis using Gemini as backup
async function analyzeArticleWithAI(title: string, description: string, fullContent: string): Promise<string | null> {
  if (!geminiApiKey) {
    console.log('No AI API key available, skipping analysis');
    return null;
  }

  try {
    console.log('Analyzing article with Gemini AI...');
    
    // Use full content if available, fallback to description
    const contentToAnalyze = fullContent || description;
    
    const prompt = `Analyze this article for Local 825 (Operating Engineers union) relevance. 
    Title: ${title}
    Content: ${contentToAnalyze.substring(0, 2000)}...
    
    Provide a brief analysis of why this is relevant to Local 825 members and construction workers. Keep it under 200 words.`;

    const response = await fetch(`https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent?key=${geminiApiKey}`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        contents: [{
          parts: [{
            text: prompt
          }]
        }]
      })
    });

    if (!response.ok) {
      console.error('Gemini API error:', response.status);
      return null;
    }

    const data = await response.json();
    const analysis = data.candidates?.[0]?.content?.parts?.[0]?.text;
    
    if (analysis) {
      console.log('AI analysis completed successfully');
      return analysis.trim();
    } else {
      console.log('No analysis returned from AI');
      return null;
    }
  } catch (error) {
    console.error('Error in AI analysis:', error);
    return null;
  }
}

// Function to fetch posts using WordPress REST API (fetches ALL pages)
async function fetchPostsFromWordPressAPI(categorySlug: string, maxPostsPerPage: number = 100): Promise<any[]> {
  try {
    console.log(`🔍 Fetching posts from WordPress REST API for category: ${categorySlug}`);
    
    // Map category slugs to known category IDs
    const categoryIds: { [key: string]: number } = {
      'local-825': 1229,
      'employer-watch': 703
    };
    
    const categoryId = categoryIds[categorySlug];
    if (!categoryId) {
      console.log(`❌ Unknown category slug: ${categorySlug}`);
      return [];
    }
    
    console.log(`📋 Using category ID: ${categoryId} for ${categorySlug}`);
    
    let allPosts: any[] = [];
    let page = 1;
    let keepFetching = true;
    while (keepFetching) {
      const url = `https://henjii.com/wp-json/wp/v2/posts?categories=${categoryId}&per_page=${maxPostsPerPage}&page=${page}&orderby=date&order=desc`;
      console.log(`🌐 Fetching page ${page} from: ${url}`);
      const postsResponse = await fetch(url, {
        headers: {
          'User-Agent': 'Mozilla/5.0 (compatible; Local825-RSS-Sync/1.0)',
        }
      });
      if (!postsResponse.ok) {
        console.log(`❌ Failed to fetch posts from WordPress API: ${postsResponse.status}`);
        break;
      }
      const posts = await postsResponse.json();
      console.log(`📋 Found ${posts.length} posts on page ${page}`);
      if (posts.length === 0) {
        keepFetching = false;
      } else {
        allPosts = allPosts.concat(posts);
        page++;
        // Respectful delay to avoid hammering the API
        await new Promise(resolve => setTimeout(resolve, 100));
      }
    }
    console.log(`✅ Total posts fetched for ${categorySlug}: ${allPosts.length}`);
    // Convert WordPress API format to our standard format
    return allPosts.map((post: any) => ({
      title: post.title.rendered || post.title,
      link: post.link,
      description: post.excerpt.rendered || post.excerpt,
      content: post.content.rendered || post.content,
      pubDate: post.date,
      creator: post._embedded?.author?.[0]?.name || 'Bulldozer'
    }));
  } catch (error) {
    console.error(`❌ Error fetching from WordPress API:`, error);
    return [];
  }
}

serve(async (req) => {
  // Handle CORS preflight requests
  if (req.method === 'OPTIONS') {
    console.log('Handling CORS preflight request');
    return new Response(null, { 
      status: 200,
      headers: corsHeaders 
    });
  }

  try {
    console.log('🚀 Starting WordPress API sync...');
    console.log('Request method:', req.method);
    console.log('Request headers:', Object.fromEntries(req.headers.entries()));
    
    const supabase = createClient(supabaseUrl, supabaseKey);
    
    // Get active RSS feeds
    const { data: sources, error: sourcesError } = await supabase
      .from('news_sources')
      .select('*')
      .eq('is_active', true);
    
    if (sourcesError) {
      console.error('❌ Error fetching news sources:', sourcesError);
      throw sourcesError;
    }
    
    console.log(`📊 Found ${sources?.length || 0} active news sources`);
    
    if (!sources || sources.length === 0) {
      console.log('⚠️ No active news sources found in database');
      return new Response(
        JSON.stringify({
          success: false,
          error: 'No active news sources found',
          totalNewArticles: 0,
          totalSources: 0
        }),
        { 
          status: 400,
          headers: { ...corsHeaders, 'Content-Type': 'application/json' } 
        }
      );
    }
    
    let totalNewArticles = 0;
    const results: any[] = [];
    
    for (const source of sources) {
      try {
        console.log(`\n🔄 Processing: ${source.name}`);
        console.log(`📡 URL: ${source.rss_url}`);
        
        // Update sync status
        await supabase
          .from('news_sources')
          .update({ 
            sync_status: 'syncing',
            last_sync_at: new Date().toISOString()
          })
          .eq('id', source.id);
        
        // Fetch posts from WordPress REST API
        console.log('📥 Fetching posts from WordPress REST API...');
        
        // Use WordPress REST API instead of RSS for better reliability and more posts
        console.log('🔍 Fetching posts from WordPress REST API...');
        let items: any[] = [];
        
        if (source.rss_url.includes('local-825')) {
          console.log('📰 Fetching Local 825 posts from WordPress API...');
          items = await fetchPostsFromWordPressAPI('local-825', 100);
        } else if (source.rss_url.includes('employer-watch')) {
          console.log('💼 Fetching jobs from API...');
          items = await fetchPostsFromWordPressAPI('employer-watch', 100);
        } else {
          console.log('⚠️ Unknown source type, skipping...');
          continue;
        }
        
        console.log(`📊 Items array length: ${items.length}`);
        console.log(`📊 Items array type: ${typeof items}`);
        console.log(`📊 First item:`, items[0]);
        
        // Simple test: just log the first few items to see what we're getting
        console.log(`🔍 Testing items array - first 3 items:`);
        for (let i = 0; i < Math.min(3, items.length); i++) {
          console.log(`  Item ${i}: ${items[i]?.title || 'No title'} - ${items[i]?.link || 'No link'}`);
        }
        
        if (items.length === 0) {
          console.warn(`⚠️ No items found for ${source.name}`);
          continue;
        }
        
        // Log the results
        if (items.length >= 50) {
          console.log(`🎉 Excellent! Found ${items.length} posts via WordPress API`);
        } else if (items.length >= 20) {
          console.log(`📈 Good! Found ${items.length} posts via WordPress API`);
        } else {
          console.log(`⚠️ Only found ${items.length} posts via WordPress API`);
        }
        
        console.log(`🔍 Starting to process ${items.length} items...`);
        
        let newArticlesCount = 0;
        let processedArticlesCount = 0;
        
        // Process ALL items instead of limiting to 20
        for (let i = 0; i < items.length; i++) {
          const item = items[i];
          console.log(`🔄 Processing item ${i + 1}/${items.length}: ${item.title || 'Untitled'}`);
          
          try {
            console.log(`\n📰 Processing item ${i + 1}/${items.length}`);
            
            const title = item.title || 'Untitled';
            const link = item.link || '';
            // Fix: Extract .rendered if description/content is an object
            const descriptionRaw = typeof item.description === 'object' && item.description !== null
              ? item.description.rendered
              : item.description;
            const contentRaw = typeof item.content === 'object' && item.content !== null
              ? item.content.rendered
              : item.content;

            const description = cleanHtml(descriptionRaw || '');
            const fullContent = cleanHtml(contentRaw || '');
            const creator = item.creator || '';
            const pubDateStr = item.pubDate || '';
            
            console.log(`📰 Title: ${title}`);
            console.log(`🔗 Link: ${link}`);
            console.log(`👤 Creator: ${creator}`);
            console.log(`📄 Description length: ${description.length} chars`);
            console.log(`📄 Full content length: ${fullContent.length} chars`);
            console.log(`📅 Pub date: ${pubDateStr}`);
            
            if (!link) {
              console.log(`⚠️ Skipping item with no link: ${title}`);
              continue;
            }
            
            // Parse publication date
            let publishedAt = null;
            if (pubDateStr) {
              try {
                const date = new Date(pubDateStr);
                if (!isNaN(date.getTime())) {
                  publishedAt = date.toISOString();
                  console.log(`📅 Parsed date: ${publishedAt}`);
                }
              } catch (dateError) {
                console.error(`❌ Error parsing date: ${pubDateStr}`, dateError);
              }
            }
            
            // Categorize based on source URL
            const categorization = categorizeFromUrl(source.rss_url);
            
            // Get AI analysis if available (only for news content)
            let aiAnalysis = null;
            if (categorization.content_type === 'news') {
              aiAnalysis = await analyzeArticleWithAI(title, description, fullContent);
            }
            
            // Ensure we have content - prioritize full content over description
            const finalContent = fullContent && fullContent.length > description.length ? fullContent : description;
            
            // Prepare article data with proper content storage
            const articleData = {
              title: title,
              description: description || null,
              url: link,
              published_at: publishedAt,
              source_id: source.id,
              content: finalContent || null, // Store the full content here
              excerpt: description || null,
              full_analysis: aiAnalysis,
              wordpress_category: categorization.wordpress_category,
              content_type: categorization.content_type,
              company_mentioned: creator || null,
              is_analyzed: aiAnalysis ? true : false,
              priority_level: 'medium',
              local_825_relevance: aiAnalysis || null
            };
            
            console.log(`💾 Upserting article with data:`, {
              title: articleData.title,
              wordpress_category: articleData.wordpress_category,
              content_type: articleData.content_type,
              url: articleData.url,
              content_length: (articleData.content || '').length,
              description_length: (articleData.description || '').length,
              source_id: articleData.source_id,
              has_ai_analysis: !!articleData.full_analysis,
              has_full_content: !!(articleData.content && articleData.content.length > 100)
            });
            
            // Insert article (with duplicate handling) - this ensures all posts are loaded
            const { data: insertedData, error: insertError } = await supabase
              .from('news_articles')
              .insert(articleData)
              .select('id');
            
            if (insertError) {
              // If it's a duplicate key error, that's fine - just log it
              if (insertError.code === '23505') {
                console.log(`🔄 Article already exists: ${title}`);
              } else {
                console.error(`❌ Error inserting article: ${title}`, insertError);
                console.error('📊 Insert error details:', insertError.message, insertError.code, insertError.details);
              }
            } else {
              processedArticlesCount++;
              console.log(`✅ Successfully inserted article: ${title} (ID: ${insertedData?.[0]?.id})`);
              console.log(`📊 Content stored: ${(articleData.content || '').length} characters`);
              
              // Check if this was a new article by looking at the response
              if (insertedData && insertedData.length > 0) {
                newArticlesCount++;
                console.log(`🆕 New article added: ${title}`);
              } else {
                console.log(`🔄 Existing article updated: ${title}`);
              }
            }
            
          } catch (itemError) {
            console.error(`❌ Error processing RSS item ${i + 1}:`, itemError);
          }
        }
        
        console.log(`📊 Processing complete: ${processedArticlesCount} articles processed out of ${items.length} items`);
        totalNewArticles += processedArticlesCount;
        
        // Update sync status to success
        await supabase
          .from('news_sources')
          .update({ 
            sync_status: 'success',
            last_successful_sync_at: new Date().toISOString(),
            sync_attempt_count: 0,
            last_sync_error: null
          })
          .eq('id', source.id);
        
        results.push({
          source: source.name,
          new_articles: processedArticlesCount,
          status: 'success'
        });
        
        console.log(`✅ Completed ${source.name}: ${processedArticlesCount} articles processed`);
        
      } catch (sourceError) {
        console.error(`❌ Error syncing source ${source.name}:`, sourceError);
        
        // Update sync status to error
        await supabase
          .from('news_sources')
          .update({ 
            sync_status: 'error',
            last_sync_error: sourceError.message,
            sync_attempt_count: (source.sync_attempt_count || 0) + 1
          })
          .eq('id', source.id);
        
        results.push({
          source: source.name,
          new_articles: 0,
          status: 'error',
          error: sourceError.message
        });
      }
    }
    
    console.log(`\n🎉 WORDPRESS API FULL SYNC COMPLETED`);
    console.log(`📊 Total articles processed: ${totalNewArticles}`);
    console.log(`📊 Sources processed: ${sources?.length || 0}`);
    console.log(`📊 Results:`, results);
    
    return new Response(
      JSON.stringify({
        success: true,
        message: 'WordPress API feeds fully synced - all posts processed',
        totalNewArticles: totalNewArticles,
        totalSources: sources?.length || 0,
        summary: {
          total_articles_processed: totalNewArticles,
          total_sources: sources?.length || 0,
          results: results
        }
      }),
      { headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
    );
    
  } catch (error) {
    console.error('❌ Critical error in WordPress API sync:', error);
    return new Response(
      JSON.stringify({
        success: false,
        error: error.message,
        totalNewArticles: 0,
        totalSources: 0
      }),
      { 
        status: 500,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' } 
      }
    );
  }
});
</file>

<file path="src/components/MaintenancePage.tsx">
import React from 'react';
import { Loader2, CheckCircle, Clock, Database, Circle, Square, Triangle, Star, Hexagon } from 'lucide-react';
import { Card, CardContent } from '@/components/ui/card';
import { useMaintenanceTasks } from '@/hooks/useMaintenanceTasks';

// Icon mapping for dynamic icon selection
const iconMap = {
  CheckCircle,
  Loader2,
  Database,
  Clock,
  Circle,
  Square,
  Triangle,
  Star,
  Hexagon,
};

const MaintenancePage = () => {
  const { tasks, progress, loading, error } = useMaintenanceTasks();

  if (loading) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-background via-secondary/10 to-background flex items-center justify-center p-4">
        <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-primary"></div>
      </div>
    );
  }

  if (error) {
    console.error("MaintenancePage error:", error);
    // Fallback to show maintenance mode even if there's an error
  }

  const completionPercentage = progress?.completion_percentage || 96;
  const estimatedMinutes = progress?.estimated_minutes_remaining || 0;
  const isComplete = completionPercentage >= 100;

  return (
    <div className="min-h-screen bg-gradient-to-br from-background via-secondary/10 to-background flex items-center justify-center p-4">
      <div className="w-full max-w-2xl mx-auto">
        <Card className="bg-white/80 dark:bg-card/80 backdrop-blur-sm border-border/50 shadow-2xl">
          <CardContent className="p-6 sm:p-8 md:p-12">
            <div className="text-center space-y-6 sm:space-y-8">
              {/* Icon */}
              <div className="flex justify-center">
                <div className="relative">
                  <div className="w-20 h-20 sm:w-24 sm:h-24 bg-gradient-to-br from-primary/20 to-accent/20 rounded-full flex items-center justify-center">
                    {isComplete ? (
                      <CheckCircle className="w-10 h-10 sm:w-12 sm:h-12 text-green-500" />
                    ) : (
                      <Loader2 className="w-10 h-10 sm:w-12 sm:h-12 text-primary animate-spin" />
                    )}
                  </div>
                  {isComplete && (
                    <div className="absolute -top-2 -right-2 w-6 h-6 sm:w-8 sm:h-8 bg-green-500 rounded-full flex items-center justify-center">
                      <CheckCircle className="w-3 h-3 sm:w-4 sm:h-4 text-white" />
                    </div>
                  )}
                </div>
              </div>

              {/* Title */}
              <div className="space-y-2 sm:space-y-3">
                <h1 className="text-2xl sm:text-3xl md:text-4xl font-bold text-foreground">
                  {isComplete ? "System Ready" : "Finalizing Your Dashboard"}
                </h1>
                <p className="text-sm sm:text-base text-muted-foreground max-w-md mx-auto leading-relaxed">
                  {isComplete 
                    ? "All systems are operational. Standing by for final activation."
                    : "We're putting the finishing touches on your intelligence dashboard. Almost ready!"
                  }
                </p>
              </div>

              {/* Progress Bar */}
              <div className="space-y-3 sm:space-y-4">
                <div className="flex items-center justify-between text-xs sm:text-sm text-muted-foreground">
                  <span>Progress</span>
                  <span className="font-medium">{completionPercentage}% Complete</span>
                </div>
                <div className="w-full bg-secondary rounded-full h-2 sm:h-3 overflow-hidden">
                  <div 
                    className="bg-gradient-to-r from-primary to-accent h-full rounded-full transition-all duration-1000 ease-out"
                    style={{ width: `${completionPercentage}%` }}
                  />
                </div>
              </div>

              {/* Processing Items */}
              <div className="space-y-3 sm:space-y-4">
                <h2 className="text-base sm:text-lg font-semibold text-foreground text-center">
                  System Status
                </h2>
                <div className="space-y-2 sm:space-y-3">
                  {tasks.map((task, index) => {
                    const IconComponent = iconMap[task.icon_name as keyof typeof iconMap] || Database;
                    return (
                      <div
                        key={task.id}
                        className={`flex items-center justify-between p-3 sm:p-4 rounded-lg transition-all duration-300 ${
                          task.status === 'complete' 
                            ? 'bg-green-50 dark:bg-green-950/30 border border-green-200 dark:border-green-800' 
                            : 'bg-blue-50 dark:bg-blue-950/30 border border-blue-200 dark:border-blue-800'
                        }`}
                      >
                        <span className="text-sm sm:text-base font-medium text-foreground">
                          {task.name}
                        </span>
                        <div className="flex items-center gap-2">
                          <IconComponent 
                            className={`w-4 h-4 sm:w-5 sm:h-5 ${
                              task.status === 'complete' 
                                ? 'text-green-600 dark:text-green-400' 
                                : 'text-blue-600 dark:text-blue-400'
                            } ${task.status === 'processing' ? 'animate-spin' : ''}`} 
                          />
                          <span className={`text-xs sm:text-sm font-medium ${
                            task.status === 'complete' 
                              ? 'text-green-600 dark:text-green-400' 
                              : 'text-blue-600 dark:text-blue-400'
                          }`}>
                            {task.status === 'complete' ? 'Complete' : 'Processing'}
                          </span>
                        </div>
                      </div>
                    );
                  })}
                </div>
              </div>

              {/* Time Estimate */}
              <div className="flex items-center justify-center gap-2 text-xs sm:text-sm text-muted-foreground">
                <Clock className="w-4 h-4" />
                <span>
                  Estimated completion: {estimatedMinutes > 0 ? `${estimatedMinutes} minutes` : 'calculating...'}
                </span>
              </div>

              {/* Note */}
              <div className="bg-blue-50 dark:bg-blue-950/30 border border-blue-200 dark:border-blue-800 rounded-lg p-3 sm:p-4">
                <p className="text-xs sm:text-sm text-blue-800 dark:text-blue-200 leading-relaxed">
                  <strong>Almost there!</strong> We're organizing your data across multiple systems 
                  to ensure everything loads quickly and works smoothly.
                </p>
              </div>
            </div>
          </CardContent>
        </Card>
      </div>
    </div>
  );
};

export default MaintenancePage;
</file>

<file path="src/pages/Feed.tsx">
import { useState, useEffect } from "react";
import { useNavigate } from "react-router-dom";
import { useAuth } from "@/contexts/AuthContext";
import NavBar from "@/components/NavBar";
import FeedHeader from "@/components/feed/FeedHeader";
import ArticlesList from "@/components/feed/ArticlesList";
import FilterSection from "@/components/feed/FilterSection";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { useFeedData } from "@/hooks/useFeedData";

import { useMainCompanies } from "@/hooks/useMainCompanies";
import { useTrackedCompanies } from "@/hooks/useTrackedCompanies";
import { useNewsSources } from "@/hooks/useNewsSources";
import { Button } from "@/components/ui/button";
import { Bot } from "lucide-react";

export default function Feed() {
  const { user } = useAuth();
  const navigate = useNavigate();
  const [selectedCompany, setSelectedCompany] = useState("all");
  const [activeFilters, setActiveFilters] = useState<string[]>([]);
  const [currentPage, setCurrentPage] = useState(1);
  const [showIrrelevant, setShowIrrelevant] = useState(false);
  const [activeTab, setActiveTab] = useState("news");
  const articlesPerPage = 10;
  
  const { articles, loading, error, refreshing, triggerRefresh } = useFeedData();
  const { companies: mainCompanies } = useMainCompanies();
  const { companies: trackedCompanies } = useTrackedCompanies();
  const { sources } = useNewsSources();

  useEffect(() => {
    if (!user) {
      navigate("/auth");
    }
  }, [user, navigate]);

  // Reset currentPage to 1 when switching tabs
  useEffect(() => {
    setCurrentPage(1);
  }, [activeTab]);

  const allCompanies = [
    ...mainCompanies.map(c => ({ id: c.id, name: c.name, type: 'main' as const })),
    ...trackedCompanies.map(c => ({ id: c.id, name: c.name, type: 'tracked' as const })),
    ...sources.map(s => ({ id: s.id, name: s.name, type: 'news_source' as const }))
  ];

  // Filter articles for news tab: content_type === 'news' && wordpress_category === 'local-825'
  const newsArticles = articles.filter(article => 
    article.content_type === 'news' && article.wordpress_category === 'local-825'
  );
  
  // Filter articles for jobs tab: content_type === 'job' && wordpress_category === 'employer-watch'
  const jobArticles = articles.filter(article => 
    article.content_type === 'job' && article.wordpress_category === 'employer-watch'
  );
  
  const filteredNewsArticles = newsArticles.filter(article => {
    if (selectedCompany !== "all" && article.company_mentioned !== selectedCompany) {
      return false;
    }
    return true;
  });

  const filteredJobArticles = jobArticles.filter(article => {
    if (selectedCompany !== "all" && article.company_mentioned !== selectedCompany) {
      return false;
    }
    return true;
  });

  // Pagination for news
  const newsTotalPages = Math.ceil(filteredNewsArticles.length / articlesPerPage);
  const newsStartIndex = (currentPage - 1) * articlesPerPage;
  const newsEndIndex = newsStartIndex + articlesPerPage;
  const currentNewsArticles = filteredNewsArticles.slice(newsStartIndex, newsEndIndex);

  // Pagination for jobs
  const jobsTotalPages = Math.ceil(filteredJobArticles.length / articlesPerPage);
  const jobsStartIndex = (currentPage - 1) * articlesPerPage;
  const jobsEndIndex = jobsStartIndex + articlesPerPage;
  const currentJobArticles = filteredJobArticles.slice(jobsStartIndex, jobsEndIndex);

  const availableFilters = [
    { label: 'High Priority', value: 'high_priority' },
    { label: 'Union Relevant', value: 'union_relevant' },
    { label: 'Job Listings', value: 'job_listings' },
    { label: 'Safety Issues', value: 'safety' },
    { label: 'Contract News', value: 'contracts' },
  ];

  const toggleFilter = (filterValue: string) => {
    setActiveFilters(prev => 
      prev.includes(filterValue) 
        ? prev.filter(f => f !== filterValue)
        : [...prev, filterValue]
    );
  };

  const handlePageChange = (page: number) => {
    setCurrentPage(page);
  };

  const handleAnalysisComplete = () => {
    triggerRefresh();
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-background to-secondary/20">
      <NavBar />
      
      <main className="container max-w-7xl mx-auto px-3 sm:px-4 lg:px-6 py-4 sm:py-8">
        {/* Mobile-optimized header */}
        <div className="mb-6 sm:mb-8 text-left">
          <h1 className="text-2xl sm:text-3xl font-bold mb-2 text-gray-900 dark:text-gray-100 text-left">Intelligence Feed</h1>
          <p className="text-sm sm:text-base text-gray-600 dark:text-gray-300 text-left">
            Stay updated with the latest construction industry news and Local 825 updates
          </p>
        </div>

        <div className="grid grid-cols-1 lg:grid-cols-4 gap-4 sm:gap-6 lg:gap-8">
          {/* Sidebar - Mobile optimized */}
          <div className="lg:col-span-1 space-y-4 sm:space-y-6">
            {/* Only show the assistant button here */}
            <Button
              asChild
              className="w-full flex items-center gap-2 bg-primary text-white hover:bg-primary/90"
              size="lg"
            >
              <a href="https://825chat.datapilotplus.com" target="_blank" rel="noopener noreferrer">
                <Bot className="h-5 w-5" />
                Bulldozer Assist
              </a>
            </Button>
            <div className="bg-white/50 dark:bg-gray-800/50 backdrop-blur-sm border border-gray-200/50 dark:border-gray-700/50 rounded-xl p-4">
              <FilterSection
                availableFilters={availableFilters}
                activeFilters={activeFilters}
                toggleFilter={toggleFilter}
              />
            </div>
          </div>

          {/* Main content with tabs - Mobile optimized */}
          <div className="lg:col-span-3">
            <Tabs value={activeTab} onValueChange={setActiveTab} className="w-full">
              <TabsList className="grid w-full grid-cols-2 mb-6">
                <TabsTrigger value="news">Local 825 News</TabsTrigger>
                <TabsTrigger value="jobs">Employer Watch</TabsTrigger>
              </TabsList>
              
              <TabsContent value="news" className="mt-0">
                <ArticlesList
                  articles={currentNewsArticles}
                  loading={loading}
                  showIrrelevant={showIrrelevant}
                  currentPage={currentPage}
                  totalPages={newsTotalPages}
                  onPageChange={handlePageChange}
                  onAnalysisComplete={handleAnalysisComplete}
                  startIndex={newsStartIndex}
                  endIndex={newsEndIndex}
                  totalArticles={filteredNewsArticles.length}
                />
              </TabsContent>
              
              <TabsContent value="jobs" className="mt-0">
                <ArticlesList
                  articles={currentJobArticles}
                  loading={loading}
                  showIrrelevant={showIrrelevant}
                  currentPage={currentPage}
                  totalPages={jobsTotalPages}
                  onPageChange={handlePageChange}
                  onAnalysisComplete={handleAnalysisComplete}
                  startIndex={jobsStartIndex}
                  endIndex={jobsEndIndex}
                  totalArticles={filteredJobArticles.length}
                />
              </TabsContent>
            </Tabs>
          </div>
        </div>
      </main>
      
      <footer className="text-center py-4 sm:py-6 text-xs sm:text-sm text-gray-500 dark:text-gray-400 border-t border-gray-200/50 dark:border-gray-700/50 bg-white/30 dark:bg-gray-900/30 backdrop-blur-sm">
        © 2025 DataPilot+™. Intelligence for labor organizations.
      </footer>
    </div>
  );
}
</file>

</files>
